{
  List<Future<Boolean>> calls=new ArrayList<Future<Boolean>>();
  final CountDownLatch cdl=new CountDownLatch(10);
  for (int x=0; x < 10; x++) {
    final int c=x;
    calls.add(exec.submit(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        for (int y=0; y < 10; y++) {
          Count count=new Count("Counter","k1","counter1",1);
          batcher.add(count);
        }
        LOG.info("Task iteration # {} : ",c);
        cdl.countDown();
        return new Boolean(true);
      }
    }
));
  }
  batcher.add(new Count("Counter","k1","counter1",1));
  LOG.info("size: " + calls.size());
  cdl.await();
  exec.shutdown();
  while (!exec.awaitTermination(3,TimeUnit.SECONDS)) {
    LOG.warn("jobs not yet finished, wait again");
  }
  assertEquals(101,batcher.invocationCounter.count());
  int iteration=0;
  int total_retry=10;
  while (batcher.getBatchSubmissionCount() != 10 || iteration < total_retry) {
    Thread.sleep(3000L);
    iteration++;
  }
  assertEquals(10,batcher.getBatchSubmissionCount());
}
