{
  Id sourceId=IdGenerator.createId("source");
  MarkedEdge edge1=createEdge(sourceId,"test",IdGenerator.createId("target1"));
  storageEdgeSerialization.writeEdge(scope,edge1,UUIDGenerator.newTimeUUID()).execute();
  edgeMetadataSerialization.writeEdge(scope,edge1).execute();
  MarkedEdge edge2=createEdge(sourceId,"test",IdGenerator.createId("target2"));
  storageEdgeSerialization.writeEdge(scope,edge2,UUIDGenerator.newTimeUUID()).execute();
  edgeMetadataSerialization.writeEdge(scope,edge2).execute();
  MarkedEdge edge3=createEdge(sourceId,"test",IdGenerator.createId("target3"));
  storageEdgeSerialization.writeEdge(scope,edge3,UUIDGenerator.newTimeUUID()).execute();
  edgeMetadataSerialization.writeEdge(scope,edge3).execute();
  long cleanupVersion=System.currentTimeMillis();
  int value=edgeMetaRepair.repairSources(scope,edge1.getSourceNode(),edge1.getType(),cleanupVersion).toBlocking().single();
  assertEquals("No subtypes removed, edges exist",3,value);
  storageEdgeSerialization.deleteEdge(scope,edge1,UUIDGenerator.newTimeUUID()).execute();
  value=edgeMetaRepair.repairSources(scope,edge1.getSourceNode(),edge1.getType(),cleanupVersion).toBlocking().single();
  assertEquals("No subtypes removed, edges exist",2,value);
  storageEdgeSerialization.deleteEdge(scope,edge2,UUIDGenerator.newTimeUUID()).execute();
  value=edgeMetaRepair.repairSources(scope,edge1.getSourceNode(),edge1.getType(),cleanupVersion).toBlocking().single();
  assertEquals("No subtypes removed, edges exist",1,value);
  storageEdgeSerialization.deleteEdge(scope,edge3,UUIDGenerator.newTimeUUID()).execute();
  value=edgeMetaRepair.repairSources(scope,edge1.getSourceNode(),edge1.getType(),cleanupVersion).toBlocking().single();
  assertEquals("Single subtype should be removed",0,value);
  Iterator<String> edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,new SimpleSearchEdgeType(edge1.getSourceNode(),null,null));
  assertFalse("No edge types exist",edgeTypes.hasNext());
  Iterator<String> sourceTypes=edgeMetadataSerialization.getIdTypesFromSource(scope,new SimpleSearchIdType(edge1.getSourceNode(),edge1.getType(),null,null));
  assertFalse("No edge types exist",sourceTypes.hasNext());
}
