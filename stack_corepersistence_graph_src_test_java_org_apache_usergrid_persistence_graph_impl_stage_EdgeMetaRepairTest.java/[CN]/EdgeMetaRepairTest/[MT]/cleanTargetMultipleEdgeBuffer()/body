{
  final Id targetId=IdGenerator.createId("target");
  final String edgeType="test";
  final int size=graphFig.getRepairConcurrentSize() * 2;
  Set<MarkedEdge> writtenEdges=new HashSet<MarkedEdge>();
  for (int i=0; i < size; i++) {
    MarkedEdge edge=createEdge(IdGenerator.createId("source" + i),edgeType,targetId);
    storageEdgeSerialization.writeEdge(scope,edge,UUIDGenerator.newTimeUUID()).execute();
    edgeMetadataSerialization.writeEdge(scope,edge).execute();
    writtenEdges.add(edge);
  }
  long cleanupVersion=System.currentTimeMillis();
  int value=edgeMetaRepair.repairTargets(scope,targetId,edgeType,cleanupVersion).toBlocking().single();
  assertEquals("No subtypes removed, edges exist",size,value);
  for (  MarkedEdge created : writtenEdges) {
    storageEdgeSerialization.deleteEdge(scope,created,UUIDGenerator.newTimeUUID()).execute();
  }
  value=edgeMetaRepair.repairTargets(scope,targetId,edgeType,cleanupVersion).toBlocking().last();
  assertEquals("Subtypes removed",0,value);
  Iterator<String> edgeTypes=edgeMetadataSerialization.getEdgeTypesToTarget(scope,new SimpleSearchEdgeType(targetId,null,null));
  assertFalse("No edge types exist",edgeTypes.hasNext());
  Iterator<String> sourceTypes=edgeMetadataSerialization.getIdTypesToTarget(scope,new SimpleSearchIdType(targetId,edgeType,null,null));
  assertFalse("No edge types exist",sourceTypes.hasNext());
}
