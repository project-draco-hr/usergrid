def run(self):
    worker_logger.info('starting run()...')
    keep_going = True
    count_processed = 0
    empty_count = 0
    start_time = int(time.time())
    while keep_going:
        try:
            (app, collection_name, entity) = self.queue.get(timeout=120)
            empty_count = 0
            if (self.handler_function is not None):
                try:
                    message_start_time = int(time.time())
                    processed = self.handler_function(app, collection_name, entity)
                    message_end_time = int(time.time())
                    if processed:
                        count_processed += 1
                        total_time = (message_end_time - start_time)
                        avg_time_per_message = (total_time / count_processed)
                        message_time = (message_end_time - message_start_time)
                        worker_logger.debug(('Processed [%sth] entity = %s / %s / %s' % (count_processed, app, collection_name, entity.get('uuid'))))
                        if ((count_processed % 1000) == 1):
                            worker_logger.info(('Processed [%sth] entity = [%s / %s / %s] in [%s]s - avg time/message [%s]' % (count_processed, app, collection_name, entity.get('uuid'), message_time, avg_time_per_message)))
                except KeyboardInterrupt as e:
                    raise e
                except Exception as e:
                    logger.exception('Error in EntityWorker processing message')
                    print traceback.format_exc()
        except KeyboardInterrupt as e:
            raise e
        except Empty:
            worker_logger.warning(('EMPTY! Count=%s' % empty_count))
            empty_count += 1
            if (empty_count >= 2):
                keep_going = False
        except Exception as e:
            logger.exception('Error in EntityWorker run()')
            print traceback.format_exc()
