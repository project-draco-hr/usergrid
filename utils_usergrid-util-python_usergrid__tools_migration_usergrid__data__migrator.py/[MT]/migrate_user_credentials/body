def migrate_user_credentials(app, collection_name, source_entity, attempts=0):
    if ((collection_name not in ['users', 'user']) or config.get('skip_credentials', False)):
        return False
    source_identifier = get_source_identifier(source_entity)
    (target_app, target_collection, target_org) = get_target_mapping(app, collection_name)
    source_url = user_credentials_url_template.format(org=config.get('org'), app=app, uuid=source_identifier, **config.get('source_endpoint'))
    target_url = user_credentials_url_template.format(org=target_org, app=target_app, uuid=source_identifier, **config.get('target_endpoint'))
    r = requests.get(source_url, auth=HTTPBasicAuth(config.get('su_username'), config.get('su_password')))
    if (r.status_code != 200):
        logger.error(('Unable to migrate credentials due to HTTP [%s] on GET URL [%s]: %s' % (r.status_code, source_url, r.text)))
        return False
    source_credentials = r.json()
    logger.info(('Putting credentials to [%s]...' % target_url))
    r = requests.put(target_url, data=json.dumps(source_credentials), auth=HTTPBasicAuth(config.get('su_username'), config.get('su_password')))
    if (r.status_code != 200):
        logger.error(('Unable to migrate credentials due to HTTP [%s] on PUT URL [%s]: %s' % (r.status_code, target_url, r.text)))
        return False
    logger.info(('migrate_user_credentials | success=[%s] | app/collection/name = %s/%s/%s' % (True, app, collection_name, source_entity.get('uuid'))))
    return True
