def filter_apps_and_collections(org_apps):
    app_collecitons = {'apps': {}, }
    try:
        selected_apps = config.get('app')
        for org_app in sorted(org_apps.keys()):
            logger.info(('Found SOURCE App: %s' % org_app))
        time.sleep(3)
        for org_app in sorted(org_apps.keys()):
            parts = org_app.split('/')
            app = parts[1]
            if (selected_apps and (len(selected_apps) > 0) and (app not in selected_apps)):
                logger.warning(('Skipping app [%s] not included in process list [%s]' % (app, selected_apps)))
                continue
            app_collecitons['apps'][app] = {'collections': [], }
            source_app_url = app_url_template.format(org=config.get('org'), app=app, **config.get('source_endpoint'))
            logger.info(('GET %s' % source_app_url))
            r_collections = session_source.get(source_app_url)
            collection_attempts = 0
            while ((r_collections.status_code != 200) and (collection_attempts < 5)):
                collection_attempts += 1
                logger.warning(('FAILED: GET (%s) [%s] URL: %s' % (r_collections.elapsed, r_collections.status_code, source_app_url)))
                time.sleep(DEFAULT_RETRY_SLEEP)
                r_collections = session_source.get(source_app_url)
            if (collection_attempts >= 5):
                logger.critical(('Unable to get collections at URL %s, skipping app' % source_app_url))
                continue
            app_response = r_collections.json()
            logger.info(('App Response: ' + json.dumps(app_response)))
            app_entities = app_response.get('entities', [])
            if (len(app_entities) > 0):
                app_entity = app_entities[0]
                collections = app_entity.get('metadata', {}).get('collections', {})
                logger.info(('App=[%s] starting Collections=[%s]' % (app, collections)))
                app_collecitons['apps'][app]['collections'] = [c for c in collections if include_collection(c)]
                logger.info(('App=[%s] filtered Collections=[%s]' % (app, collections)))
    except:
        print traceback.format_exc()
    return app_collecitons
