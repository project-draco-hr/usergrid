def main():
    global config, cache
    config = parse_args()
    init()
    init_logging()
    logger.warn('Script starting')
    try:
        if (config.get('redis_socket') is not None):
            cache = redis.Redis(unix_socket_path=config.get('redis_socket'))
        else:
            cache = redis.StrictRedis(host='localhost', port=6379, db=0)
        cache.get('usergrid')
    except:
        logger.error('Error connecting to Redis cache, consider using Redis to be able to optimize the migration process...')
        logger.error('Error connecting to Redis cache, consider using Redis to be able to optimize the migration process...')
        time.sleep(3)
        config['use_cache'] = False
        config['skip_cache_read'] = True
        config['skip_cache_write'] = True
    org_apps = {}
    force_apps = config.get('force_app', [])
    if ((force_apps is not None) and (len(force_apps) > 0)):
        logger.warn(('Forcing only the following apps to be processed: %s' % force_apps))
        for app in force_apps:
            key = ('%s/%s' % (app, app))
            org_apps[key] = app
    if (len(org_apps) == 0):
        source_org_mgmt_url = org_management_url_template.format(org=config.get('org'), limit=config.get('limit'), **config.get('source_endpoint'))
        print ('Retrieving apps from [%s]' % source_org_mgmt_url)
        logger.info(('Retrieving apps from [%s]' % source_org_mgmt_url))
        try:
            logger.info(('GET %s' % source_org_mgmt_url))
            r = session_source.get(source_org_mgmt_url)
            if (r.status_code != 200):
                logger.critical(('Abort processing: Unable to retrieve apps from [%s]: %s' % (source_org_mgmt_url, r.text)))
                exit()
            logger.info(json.dumps(r.text))
            org_apps = r.json().get('data')
        except Exception:
            logger.exception(('ERROR Retrieving apps from [%s]' % source_org_mgmt_url))
            print traceback.format_exc()
            logger.critical(('Unable to retrieve apps from [%s] and will exit' % source_org_mgmt_url))
            exit()
    if (config.get('migrate') == 'graph'):
        operation = migrate_graph
    elif (config.get('migrate') == 'data'):
        operation = migrate_data
    elif (config.get('migrate') == 'prune'):
        operation = prune_graph
    elif (config.get('migrate') == 'permissions'):
        operation = migrate_permissions
        config['collection'] = ['roles', 'groups']
        logger.warn(('Since permissions migration was specified, overwriting included collections to be %s...' % config['collection']))
    elif (config.get('migrate') == 'credentials'):
        operation = migrate_user_credentials
        config['collection'] = ['users']
        logger.warn(('Since credential migration was specified, overwriting included collections to be %s' % config['collection']))
    elif (config.get('migrate') == 'reput'):
        operation = reput
    else:
        operation = None
    apps_and_collections = filter_apps_and_collections(org_apps)
    logger.warn(('The following apps/collections will be processed: %s' % json.dumps(apps_and_collections)))
    confirm_target_org_apps(apps_and_collections)
    do_operation(apps_and_collections, operation)
    logger.warn('Script finished')
