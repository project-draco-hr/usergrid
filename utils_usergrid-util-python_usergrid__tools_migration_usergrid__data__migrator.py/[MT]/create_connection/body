def create_connection(app, collection_name, source_entity, edge_name, target_entity):
    (target_app, target_collection, target_org) = get_target_mapping(app, collection_name)
    source_identifier = get_source_identifier(source_entity)
    target_identifier = get_source_identifier(target_entity)
    source_type_id = ('%s/%s' % (source_entity.get('type'), source_identifier))
    target_type_id = ('%s/%s' % (target_entity.get('type'), target_identifier))
    if (source_entity.get('type') == 'user'):
        source_type_id = ('%s/%s' % ('users', source_entity.get('username')))
    if (target_entity.get('type') == 'user'):
        if (edge_name == 'users'):
            target_type_id = target_entity.get('uuid')
        else:
            target_type_id = ('%s/%s' % ('users', target_entity.get('uuid')))
    if (target_entity.get('type') == 'device'):
        if (edge_name == 'devices'):
            target_type_id = target_entity.get('uuid')
        else:
            target_type_id = ('%s/%s' % ('devices', target_entity.get('uuid')))
    if (target_entity.get('type') == 'receipt'):
        if (edge_name == 'receipts'):
            target_type_id = target_entity.get('uuid')
        else:
            target_type_id = ('%s/%s' % ('receipts', target_entity.get('uuid')))
    create_connection_url = connection_create_by_pairs_url_template.format(org=target_org, app=target_app, source_type_id=source_type_id, verb=edge_name, target_type_id=target_type_id, **config.get('target_endpoint'))
    if (not config.get('skip_cache_read', False)):
        processed = cache.get(create_connection_url)
        if (processed not in [None, 'None']):
            logger.debug(('Skipping visited Edge: [%s / %s / %s] --[%s]--> [%s / %s / %s]: %s ' % (app, collection_name, source_identifier, edge_name, target_app, target_entity.get('type'), target_entity.get('name'), create_connection_url)))
            return True
    logger.info(('Connecting entity [%s / %s / %s] --[%s]--> [%s / %s / %s]: %s ' % (app, collection_name, source_identifier, edge_name, target_app, target_entity.get('type'), target_entity.get('name', target_entity.get('uuid')), create_connection_url)))
    attempts = 0
    while (attempts < 5):
        attempts += 1
        r_create = session_target.post(create_connection_url)
        if (r_create.status_code == 200):
            if (not config.get('skip_cache_write', False)):
                cache.set(create_connection_url, 1)
            return True
        elif (r_create.status_code >= 500):
            if (attempts < 5):
                logger.warning(('FAILED [%s] (will retry) to create connection at URL=[%s]: %s' % (r_create.status_code, create_connection_url, r_create.text)))
                time.sleep(DEFAULT_RETRY_SLEEP)
            else:
                logger.critical(('FAILED [%s] (WILL NOT RETRY - max attempts) to create connection at URL=[%s]: %s' % (r_create.status_code, create_connection_url, r_create.text)))
                return False
        elif (r_create.status_code in [401, 404]):
            if config.get('repair_data', False):
                logger.warning(('FAILED [%s] (WILL attempt repair) to create connection at URL=[%s]: %s' % (r_create.status_code, create_connection_url, r_create.text)))
                migrate_data(app, source_entity.get('type'), source_entity, force=True)
                migrate_data(app, target_entity.get('type'), target_entity, force=True)
            else:
                logger.critical(('FAILED [%s] (WILL NOT attempt repair) to create connection at URL=[%s]: %s' % (r_create.status_code, create_connection_url, r_create.text)))
        else:
            logger.warning(('FAILED [%s] (will retry) to create connection at URL=[%s]: %s' % (r_create.status_code, create_connection_url, r_create.text)))
    return False
