def confirm_user_entity(app, source_entity, attempts=0):
    attempts += 1
    source_entity_url = get_entity_url_template.format(org=config.get('org'), app=app, collection='users', uuid=source_entity.get('username'), **config.get('source_endpoint'))
    if (attempts >= 5):
        logger.warning(('Punting after [%s] attempts to confirm user at URL [%s], will use the source entity...' % (attempts, source_entity_url)))
        return source_entity
    r = requests.get(url=source_entity_url)
    if (r.status_code == 200):
        retrieved_entity = r.json().get('entities')[0]
        if (retrieved_entity.get('uuid') != source_entity.get('uuid')):
            logger.info(('UUID of Source Entity [%s] differs from uuid [%s] of retrieved entity at URL=[%s] and will be substituted' % (source_entity.get('uuid'), retrieved_entity.get('uuid'), source_entity_url)))
        return retrieved_entity
    elif ('service_resource_not_found' in r.text):
        logger.warn(('Unable to retrieve user at URL [%s], and will use source entity.  status=[%s] response: %s...' % (source_entity_url, r.status_code, r.text)))
        return source_entity
    else:
        logger.error(('After [%s] attempts to confirm user at URL [%s], received status [%s] message: %s...' % (attempts, source_entity_url, r.status_code, r.text)))
        time.sleep(DEFAULT_RETRY_SLEEP)
        return confirm_user_entity(app, source_entity, attempts)
