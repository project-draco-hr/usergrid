def repair_user_role(app, collection_name, source_entity, attempts=0, depth=0):
    (target_app, target_collection, target_org) = get_target_mapping(app, collection_name)
    target_pk = 'uuid'
    if (target_collection in ['users', 'user']):
        target_pk = 'username'
    elif (target_collection in ['roles', 'role']):
        target_pk = 'name'
    target_name = source_entity.get(target_pk)
    target_entity_url_by_name = get_entity_url_template.format(org=target_org, app=target_app, collection=target_collection, uuid=target_name, **config.get('target_endpoint'))
    logger.warning(('Repairing: Deleting name=[%s] entity at URL=[%s]' % (target_name, target_entity_url_by_name)))
    r = session_target.delete(target_entity_url_by_name)
    if ((r.status_code == 200) or ((r.status_code in [404, 401]) and ('service_resource_not_found' in r.text))):
        logger.info(('Deletion of entity at URL=[%s] was [%s]' % (target_entity_url_by_name, r.status_code)))
        best_source_entity = get_best_source_entity(app, collection_name, source_entity)
        target_entity_url_by_uuid = get_entity_url_template.format(org=target_org, app=target_app, collection=target_collection, uuid=best_source_entity.get('uuid'), **config.get('target_endpoint'))
        r = session_target.put(target_entity_url_by_uuid, data=json.dumps(best_source_entity))
        if (r.status_code == 200):
            logger.info(('Successfully repaired user at URL=[%s]' % target_entity_url_by_uuid))
            return True
        else:
            logger.critical(('Failed to PUT [%s] the desired entity  at URL=[%s]: %s' % (r.status_code, target_entity_url_by_name, r.text)))
            return False
    else:
        logger.critical(('Deletion of entity at URL=[%s] FAILED [%s]: %s' % (target_entity_url_by_name, r.status_code, r.text)))
        return False
