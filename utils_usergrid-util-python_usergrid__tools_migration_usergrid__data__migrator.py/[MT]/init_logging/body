def init_logging(stdout_enabled=True):
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.getLevelName(config.get('log_level', 'INFO')))
    logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(logging.ERROR)
    logging.getLogger('boto').setLevel(logging.ERROR)
    logging.getLogger('urllib3.connectionpool').setLevel(logging.WARN)
    log_formatter = logging.Formatter(fmt=(('%(asctime)s | ' + ECID) + ' | %(name)s | %(processName)s | %(levelname)s | %(message)s'), datefmt='%m/%d/%Y %I:%M:%S %p')
    stdout_logger = logging.StreamHandler(sys.stdout)
    stdout_logger.setFormatter(log_formatter)
    root_logger.addHandler(stdout_logger)
    if stdout_enabled:
        stdout_logger.setLevel(logging.getLevelName(config.get('log_level', 'INFO')))
    log_file_name = os.path.join(config.get('log_dir'), ('%s-%s-%s-migrator.log' % (config.get('org'), config.get('migrate'), ECID)))
    rotating_file = ConcurrentRotatingFileHandler(filename=log_file_name, mode='a', maxBytes=404857600, backupCount=0)
    rotating_file.setFormatter(log_formatter)
    rotating_file.setLevel(logging.INFO)
    root_logger.addHandler(rotating_file)
    error_log_file_name = os.path.join(config.get('log_dir'), ('%s-%s-%s-migrator-errors.log' % (config.get('org'), config.get('migrate'), ECID)))
    error_rotating_file = ConcurrentRotatingFileHandler(filename=error_log_file_name, mode='a', maxBytes=404857600, backupCount=0)
    error_rotating_file.setFormatter(log_formatter)
    error_rotating_file.setLevel(logging.ERROR)
    root_logger.addHandler(error_rotating_file)
