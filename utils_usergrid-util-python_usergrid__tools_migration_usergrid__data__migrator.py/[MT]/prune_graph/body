def prune_graph(app, collection_name, source_entity):
    source_uuid = source_entity.get('uuid')
    key = ('%s:prune_graph:%s' % (key_version, source_uuid))
    entity_tag = ('[%s / %s / %s (%s)]' % (app, collection_name, source_uuid, get_uuid_time(source_uuid)))
    if (not config.get('skip_cache_read', False)):
        date_visited = cache.get(key)
        if (date_visited not in [None, 'None']):
            logger.debug(('Skipping PRUNE %s at %s' % (entity_tag, date_visited)))
            return True
        else:
            cache.delete(key)
    logger.debug(('pruning GRAPH %s at %s' % (entity_tag, str(datetime.datetime.utcnow()))))
    if (not config.get('skip_cache_write', False)):
        cache.set(name=key, value=str(int(time.time())), ex=config.get('visit_cache_ttl', (3600 * 2)))
    if (collection_name in config.get('exclude_collection', [])):
        logger.debug(('Excluding (Collection) entity %s' % entity_tag))
        return True
    out_edge_names = [edge_name for edge_name in source_entity.get('metadata', {}).get('collections', [])]
    out_edge_names += [edge_name for edge_name in source_entity.get('metadata', {}).get('connections', [])]
    for edge_name in out_edge_names:
        prune_edge_by_name(edge_name, app, collection_name, source_entity)
