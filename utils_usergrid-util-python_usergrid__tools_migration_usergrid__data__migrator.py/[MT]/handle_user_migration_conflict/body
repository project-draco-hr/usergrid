def handle_user_migration_conflict(app, collection_name, source_entity, attempts=0, depth=0):
    if (collection_name in ['users', 'user']):
        return False
    username = source_entity.get('username')
    (target_app, target_collection, target_org) = get_target_mapping(app, collection_name)
    target_entity_url = get_entity_url_template.format(org=target_org, app=target_app, collection=target_collection, uuid=username, **config.get('target_endpoint'))
    if (attempts >= 5):
        logger.critical(('Aborting after [%s] attempts to audit user [%s] at URL [%s]' % (attempts, username, target_entity_url)))
        return False
    r = session_target.get(url=target_entity_url)
    if (r.status_code == 200):
        target_entity = r.json().get('entities')[0]
        if (source_entity.get('created') < target_entity.get('created')):
            return repair_user_role(app, collection_name, source_entity)
    elif ((r.status_code / 100) == 5):
        audit_logger.warning(('CONFLICT: handle_user_migration_conflict failed attempt [%s] GET [%s] on TARGET URL=[%s] - : %s' % (attempts, r.status_code, target_entity_url, r.text)))
        time.sleep(DEFAULT_RETRY_SLEEP)
        return handle_user_migration_conflict(app, collection_name, source_entity, attempts)
    else:
        audit_logger.error(('CONFLICT: Failed handle_user_migration_conflict attempt [%s] GET [%s] on TARGET URL=[%s] - : %s' % (attempts, r.status_code, target_entity_url, r.text)))
        return False
