def get_best_source_entity(app, collection_name, source_entity, depth=0):
    (target_app, target_collection, target_org) = get_target_mapping(app, collection_name)
    target_pk = 'uuid'
    if (target_collection in ['users', 'user']):
        target_pk = 'username'
    elif (target_collection in ['roles', 'role']):
        target_pk = 'name'
    target_name = source_entity.get(target_pk)
    source_entity_url_by_name = get_entity_url_template.format(org=config.get('org'), app=app, collection=collection_name, uuid=target_name, **config.get('source_endpoint'))
    r_get_source_entity = session_source.get(source_entity_url_by_name)
    if (r_get_source_entity.status_code == 200):
        entity_from_get = r_get_source_entity.json().get('entities')[0]
        return entity_from_get
    elif ((r_get_source_entity.status_code / 100) == 4):
        source_entity_query_url = collection_query_url_template.format(org=config.get('org'), app=app, collection=collection_name, ql=("select * where %s='%s' order by created asc" % (target_pk, target_name)), limit=config.get('limit'), **config.get('source_endpoint'))
        logger.info(('Attempting to determine best entity from query on URL %s' % source_entity_query_url))
        q = UsergridQueryIterator(source_entity_query_url, sleep_time=config.get('error_retry_sleep'))
        desired_entity = None
        entity_counter = 0
        for e in q:
            entity_counter += 1
            if (desired_entity is None):
                desired_entity = e
            elif (e.get('created') < desired_entity.get('created')):
                desired_entity = e
        if (desired_entity is None):
            logger.warn(('Unable to determine best of [%s] entities from query on URL %s' % (entity_counter, source_entity_query_url)))
            return source_entity
        else:
            return desired_entity
    else:
        return source_entity
