{
  if (entity == null) {
    entity=new Entity();
  }
  for (  String fieldName : map.keySet()) {
    Object value=map.get(fieldName);
    boolean unqiue=Schema.getDefaultSchema().isPropertyUnique(entityType,fieldName);
    if (value instanceof String) {
      entity.setField(new StringField(fieldName,(String)value,unqiue && topLevel));
    }
 else     if (value instanceof Boolean) {
      entity.setField(new BooleanField(fieldName,(Boolean)value,unqiue && topLevel));
    }
 else     if (value instanceof Integer) {
      entity.setField(new IntegerField(fieldName,(Integer)value,unqiue && topLevel));
    }
 else     if (value instanceof Double) {
      entity.setField(new DoubleField(fieldName,(Double)value,unqiue && topLevel));
    }
 else     if (value instanceof Float) {
      entity.setField(new FloatField(fieldName,(Float)value,unqiue && topLevel));
    }
 else     if (value instanceof Long) {
      entity.setField(new LongField(fieldName,(Long)value,unqiue && topLevel));
    }
 else     if (value instanceof List) {
      entity.setField(listToListField(fieldName,(List)value,entityType));
    }
 else     if (value instanceof UUID) {
      entity.setField(new UUIDField(fieldName,(UUID)value,unqiue && topLevel));
    }
 else     if (value instanceof Map) {
      processMapValue(value,fieldName,entity,entityType);
    }
 else     if (value != null) {
      byte[] valueSerialized;
      try {
        valueSerialized=objectMapper.writeValueAsBytes(value);
      }
 catch (      JsonProcessingException e) {
        throw new RuntimeException("Can't serialize object ",e);
      }
catch (      IOException e) {
        throw new RuntimeException("Can't serialize object ",e);
      }
      ByteBuffer byteBuffer=ByteBuffer.wrap(valueSerialized);
      ByteArrayField bf=new ByteArrayField(fieldName,byteBuffer.array(),value.getClass());
      entity.setField(bf);
    }
  }
  return entity;
}
