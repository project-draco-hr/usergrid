{
  UUID applicationId=createApplication("testOrganization","testPropertyUpdateWithConnectionEntityIndexEntryAudit");
  EntityManager em=emf.getEntityManager(applicationId);
  Map<String,Object> entity1=new LinkedHashMap<String,Object>();
  entity1.put("name","name_1");
  entity1.put("status","pickled");
  Map<String,Object> entity2=new LinkedHashMap<String,Object>();
  entity2.put("name","name_2");
  entity2.put("status","foo");
  Entity entity1Ref=em.create("names",entity1);
  Entity entity2Ref=em.create("names",entity2);
  em.createConnection(entity2Ref,"connecting",entity1Ref);
  Query query=Query.fromQL("select * where status = 'pickled'");
  Results r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  em.searchConnections(entity2Ref,query);
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  entity1Ref.setProperty("status","herring");
  em.update(entity1Ref);
  query=Query.fromQL("select * where status = 'pickled'");
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(0,r.size());
  em.searchConnections(entity2Ref,query);
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(0,r.size());
  query=Query.fromQL("select * where status = 'herring'");
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  em.searchConnections(entity2Ref,query);
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  RelationManagerImpl impl=(RelationManagerImpl)em.getRelationManager(entity2Ref);
  CassandraService cass=helper.getCassandraService();
  ByteBufferSerializer buf=ByteBufferSerializer.get();
  Keyspace ko=cass.getApplicationKeyspace(applicationId);
  Mutator<ByteBuffer> m=createMutator(ko,buf);
  IndexUpdate update=impl.batchStartIndexUpdate(m,entity1Ref,"status","ignore",UUIDUtils.newTimeUUID(),false,false,true,false);
  int count=0;
  IndexEntry lastMatch=null;
  for (  IndexEntry entry : update.getPrevEntries()) {
    if ("status".equals(entry.getPath())) {
      count++;
      lastMatch=entry;
    }
  }
  assertEquals(1,count);
  assertEquals("herring",lastMatch.getValue());
}
