{
  EdgeSerialization commitLog=mock(EdgeSerialization.class);
  EdgeSerialization storage=mock(EdgeSerialization.class);
  final Id sourceId=createId("source");
  final String type="test";
  final String targetIdType="target";
  MarkedEdge commitLogEdge1=createEdge(sourceId,type,createId(targetIdType),System.currentTimeMillis(),true);
  MarkedEdge storageEdge1=createEdge(sourceId,type,commitLogEdge1.getTargetNode(),commitLogEdge1.getTimestamp(),false);
  MarkedEdge commitLogEdge2=createEdge(sourceId,type,createId(targetIdType),System.currentTimeMillis(),true);
  MarkedEdge storageEdge2=createEdge(sourceId,type,commitLogEdge2.getTargetNode(),commitLogEdge2.getTimestamp(),false);
  assertTrue(Long.compare(commitLogEdge1.getTimestamp(),storageEdge1.getTimestamp()) == 0);
  assertTrue(Long.compare(commitLogEdge2.getTimestamp(),storageEdge2.getTimestamp()) == 0);
  SearchByIdType searchByEdgeType=createSearchByEdgeAndId(sourceId,type,System.currentTimeMillis(),targetIdType,null);
  when(commitLog.getEdgesFromSourceByTargetType(scope,searchByEdgeType)).thenReturn(Arrays.asList(commitLogEdge2,commitLogEdge1).iterator());
  when(storage.getEdgesFromSourceByTargetType(scope,searchByEdgeType)).thenReturn(Arrays.asList(storageEdge2,storageEdge1).iterator());
  MergedEdgeReader read=new MergedEdgeReaderImpl(commitLog,storage,config);
  Iterator<MarkedEdge> marked=read.getEdgesFromSourceByTargetType(scope,searchByEdgeType).toBlockingObservable().getIterator();
  assertEquals(commitLogEdge2,marked.next());
  assertEquals(commitLogEdge1,marked.next());
  assertFalse(marked.hasNext());
}
