{
  EdgeSerialization commitLog=mock(EdgeSerialization.class);
  EdgeSerialization storage=mock(EdgeSerialization.class);
  final Id targetId=createId("target");
  final String type="test";
  final String sourceIdType="target";
  final long timestamp1=10000l;
  final long timestamp2=timestamp1 + 100;
  MarkedEdge commitLogEdge1=createEdge(createId(sourceIdType),type,targetId,timestamp1,true);
  MarkedEdge storageEdge1=createEdge(commitLogEdge1.getSourceNode(),type,commitLogEdge1.getTargetNode(),commitLogEdge1.getTimestamp(),false);
  MarkedEdge commitLogEdge2=createEdge(createId(sourceIdType),type,targetId,timestamp2,true);
  MarkedEdge storageEdge2=createEdge(commitLogEdge2.getSourceNode(),type,commitLogEdge2.getTargetNode(),commitLogEdge2.getTimestamp(),false);
  assertTrue(Long.compare(commitLogEdge1.getTimestamp(),storageEdge1.getTimestamp()) == 0);
  assertTrue(Long.compare(commitLogEdge2.getTimestamp(),storageEdge2.getTimestamp()) == 0);
  SearchByIdType searchByEdgeType=createSearchByEdgeAndId(targetId,type,System.currentTimeMillis(),sourceIdType,null);
  when(commitLog.getEdgesToTargetBySourceType(scope,searchByEdgeType)).thenReturn(Arrays.asList(commitLogEdge2,commitLogEdge1).iterator());
  when(storage.getEdgesToTargetBySourceType(scope,searchByEdgeType)).thenReturn(Arrays.asList(storageEdge2,storageEdge1).iterator());
  MergedEdgeReader read=new MergedEdgeReaderImpl(commitLog,storage,config);
  Iterator<MarkedEdge> marked=read.getEdgesToTargetBySourceType(scope,searchByEdgeType).toBlockingObservable().getIterator();
  assertEquals(commitLogEdge2,marked.next());
  assertEquals(commitLogEdge1,marked.next());
  assertFalse(marked.hasNext());
}
