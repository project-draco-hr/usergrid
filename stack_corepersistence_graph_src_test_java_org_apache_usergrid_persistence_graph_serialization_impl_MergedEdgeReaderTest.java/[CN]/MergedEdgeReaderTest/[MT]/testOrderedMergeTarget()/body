{
  EdgeSerialization commitLog=mock(EdgeSerialization.class);
  EdgeSerialization storage=mock(EdgeSerialization.class);
  final Id targetId=createId("target");
  final String type="test";
  MarkedEdge commitLogEdge1=createEdge(createId("source"),type,targetId);
  MarkedEdge storageEdge1=createEdge(createId("source"),type,targetId);
  MarkedEdge commitLogEdge2=createEdge(createId("source"),type,targetId);
  MarkedEdge storageEdge2=createEdge(createId("source"),type,targetId);
  assertTrue(Long.compare(commitLogEdge1.getTimestamp(),storageEdge1.getTimestamp()) < 0);
  assertTrue(Long.compare(storageEdge1.getTimestamp(),commitLogEdge2.getTimestamp()) < 0);
  assertTrue(Long.compare(commitLogEdge2.getTimestamp(),storageEdge2.getTimestamp()) < 0);
  SearchByEdgeType searchByEdgeType=createSearchByEdge(targetId,type,System.currentTimeMillis(),null);
  when(commitLog.getEdgesToTarget(scope,searchByEdgeType)).thenReturn(Arrays.asList(commitLogEdge2,commitLogEdge1).iterator());
  when(storage.getEdgesToTarget(scope,searchByEdgeType)).thenReturn(Arrays.asList(storageEdge2,storageEdge1).iterator());
  MergedEdgeReader read=new MergedEdgeReaderImpl(commitLog,storage,config);
  Iterator<MarkedEdge> marked=read.getEdgesToTarget(scope,searchByEdgeType).toBlockingObservable().getIterator();
  assertEquals(storageEdge2,marked.next());
  assertEquals(commitLogEdge2,marked.next());
  assertEquals(storageEdge1,marked.next());
  assertEquals(commitLogEdge1,marked.next());
  assertFalse(marked.hasNext());
}
