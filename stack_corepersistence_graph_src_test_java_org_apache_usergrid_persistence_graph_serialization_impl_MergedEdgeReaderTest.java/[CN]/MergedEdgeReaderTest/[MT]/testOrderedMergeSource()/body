{
  EdgeSerialization commitLog=mock(EdgeSerialization.class);
  EdgeSerialization storage=mock(EdgeSerialization.class);
  final Id sourceId=createId("source");
  final String type="test";
  MarkedEdge commitLogEdge1=createEdge(sourceId,type,createId("target1"));
  MarkedEdge storageEdge1=createEdge(sourceId,type,createId("target2"));
  MarkedEdge commitLogEdge2=createEdge(sourceId,type,createId("target3"));
  MarkedEdge storageEdge2=createEdge(sourceId,type,createId("target4"));
  assertTrue(UUIDComparator.staticCompare(commitLogEdge1.getVersion(),storageEdge1.getVersion()) < 0);
  assertTrue(UUIDComparator.staticCompare(storageEdge1.getVersion(),commitLogEdge2.getVersion()) < 0);
  assertTrue(UUIDComparator.staticCompare(commitLogEdge2.getVersion(),storageEdge2.getVersion()) < 0);
  SearchByEdgeType searchByEdgeType=createSearchByEdge(sourceId,type,UUIDGenerator.newTimeUUID(),null);
  when(commitLog.getEdgesFromSource(scope,searchByEdgeType)).thenReturn(Arrays.asList(commitLogEdge2,commitLogEdge1).iterator());
  when(storage.getEdgesFromSource(scope,searchByEdgeType)).thenReturn(Arrays.asList(storageEdge2,storageEdge1).iterator());
  MergedEdgeReader read=new MergedEdgeReaderImpl(commitLog,storage,config);
  Iterator<MarkedEdge> marked=read.getEdgesFromSource(scope,searchByEdgeType).toBlockingObservable().getIterator();
  assertEquals(storageEdge2,marked.next());
  assertEquals(commitLogEdge2,marked.next());
  assertEquals(storageEdge1,marked.next());
  assertEquals(commitLogEdge1,marked.next());
  assertFalse(marked.hasNext());
}
