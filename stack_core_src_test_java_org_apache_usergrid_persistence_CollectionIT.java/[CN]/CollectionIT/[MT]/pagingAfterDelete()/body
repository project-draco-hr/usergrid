{
  LOG.debug("pagingAfterDelete");
  EntityManager em=app.getEntityManager();
  assertNotNull(em);
  int initialSize=20;
  List<UUID> entityIds=new ArrayList<UUID>();
  for (int i=0; i < initialSize; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("name","object" + i);
    Entity created=em.create("objects",properties);
    entityIds.add(created.getUuid());
  }
  app.refreshIndex();
  Query query=new Query();
  query.setLimit(50);
  Results r=em.searchCollection(em.getApplicationRef(),"objects",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  assertEquals(initialSize,r.size());
  for (int i=0; i < initialSize; i++) {
    final int index=initialSize - i - 1;
    final UUID entityId=entityIds.get(index);
    assertEquals(entityId,r.getEntities().get(i).getUuid());
  }
  int numDeleted=0;
  for (int i=5; i < 10; i++) {
    Entity entity=r.getEntities().get(i);
    em.delete(entity);
    entityIds.remove(entity.getUuid());
    numDeleted++;
  }
  app.refreshIndex();
  Thread.sleep(1000);
  query=new Query();
  r=em.searchCollection(em.getApplicationRef(),"objects",query);
  assertEquals(query.getLimit(),r.size());
  for (int i=0; i < 10; i++) {
    final int index=initialSize - i - numDeleted- 1;
    final UUID entityId=entityIds.get(index);
    assertEquals(entityId,r.getEntities().get(i).getUuid());
  }
  query=new Query();
  query.setCursor(r.getCursor());
  r=em.searchCollection(em.getApplicationRef(),"objects",query);
  assertEquals(5,r.size());
  for (int i=10; i < 15; i++) {
    final int index=initialSize - i - numDeleted- 1;
    final UUID entityId=entityIds.get(index);
    assertEquals(entityId,r.getEntities().get(i - 10).getUuid());
  }
}
