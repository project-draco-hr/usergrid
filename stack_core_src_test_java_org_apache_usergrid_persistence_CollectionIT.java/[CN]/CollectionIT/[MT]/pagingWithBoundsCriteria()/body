{
  LOG.debug("pagingWithBoundsCriteria");
  EntityManager em=app.getEntityManager();
  assertNotNull(em);
  int size=40;
  List<UUID> entityIds=new ArrayList<UUID>();
  for (int i=0; i < size; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("index",i);
    Entity created=em.create("page",properties);
    entityIds.add(created.getUuid());
  }
  em.refreshIndex();
  int pageSize=10;
  Query query=Query.fromQL("select * where index >= 10 and index <= 29");
  query.setLimit(pageSize);
  query.addSort(new Query.SortPredicate("index",Query.SortDirection.ASCENDING));
  Results r=null;
  for (int i=1; i < 3; i++) {
    r=em.searchCollection(em.getApplicationRef(),"pages",query);
    LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
    assertEquals(pageSize,r.size());
    for (int j=0; j < pageSize; j++) {
      assertEquals(entityIds.get(i * pageSize + j),r.getEntities().get(j).getUuid());
    }
    query.setCursor(r.getCursor());
  }
  r=em.searchCollection(em.getApplicationRef(),"pages",query);
  assertEquals(0,r.size());
  assertNull(r.getCursor());
}
