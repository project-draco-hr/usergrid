{
  LOG.debug("arrayQuerying");
  Map<String,Object> root=new HashMap<String,Object>();
  root.put("intprop",10);
  root.put("array",new String[]{"val1","val2","val3 with spaces"});
  Map<String,Object> jsonData=(Map<String,Object>)JsonUtils.parse(JsonUtils.mapToJsonString(root));
  UUID applicationId=setup.createApplication("testOrganization","arrayQuerying");
  assertNotNull(applicationId);
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  assertNotNull(em);
  Entity saved=em.create("test",jsonData);
  em.refreshIndex();
  Query query=new Query();
  query.addEqualityFilter("intprop",10);
  Results results=em.searchCollection(em.getApplicationRef(),"tests",query);
  Entity entity=results.getEntitiesMap().get(saved.getUuid());
  assertNotNull(entity);
  query=new Query();
  query.addEqualityFilter("array","val1");
  results=em.searchCollection(em.getApplicationRef(),"tests",query);
  entity=results.getEntitiesMap().get(saved.getUuid());
  assertNotNull(entity);
  query=new Query();
  query.addEqualityFilter("array","val2");
  results=em.searchCollection(em.getApplicationRef(),"tests",query);
  entity=results.getEntitiesMap().get(saved.getUuid());
  assertNotNull(entity);
  query=new Query();
  query.addEqualityFilter("array","val3");
  results=em.searchCollection(em.getApplicationRef(),"tests",query);
  entity=results.getEntitiesMap().get(saved.getUuid());
  assertNull(entity);
  query=new Query();
  query.addContainsFilter("array","spaces");
  results=em.searchCollection(em.getApplicationRef(),"tests",query);
  entity=results.getEntitiesMap().get(saved.getUuid());
  assertNotNull(entity);
}
