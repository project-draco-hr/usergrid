{
  try {
    SubscribeRequest subscribeRequest=new SubscribeRequest(topicArn,"sqs",queueArn);
    SubscribeResult subscribeResult=sns.subscribe(subscribeRequest);
    String subscriptionArn=subscribeResult.getSubscriptionArn();
    sns.setSubscriptionAttributes(subscriptionArn,"RawMessageDelivery","true");
    logger.info("Successfully subscribed SQS Queue {} to SNS arn {} with Subscription arn {}",queueArn,topicArn,subscriptionArn);
  }
 catch (  AuthorizationErrorException e) {
    logger.error(String.format("AuthorizationErrorException creating/subscribing SQS Queue [%s] to SNS arn [%s]: %s",queueArn,topicArn,e.getMessage()),e);
    throw new Exception("AuthorizationErrorException creating/subscribing SQS queue to SNS",e);
  }
catch (  SubscriptionLimitExceededException e) {
    logger.error(String.format("SubscriptionLimitExceededException creating/subscribing SQS Queue [%s] to SNS arn [%s]: %s",queueArn,topicArn,e.getMessage()),e);
    throw new Exception("SubscriptionLimitExceededException creating/subscribing SQS queue to SNS",e);
  }
catch (  AmazonServiceException e) {
    logger.error(String.format("AmazonServiceException creating/subscribing SQS Queue [%s] to SNS arn [%s]: %s",queueArn,topicArn,e.getMessage()),e);
    throw new Exception("AmazonServiceException creating/subscribing SQS queue to SNS",e);
  }
catch (  Exception e) {
    logger.error(String.format("Failed creating/subscribing SQS Queue [%s] to SNS arn [%s]: %s",queueArn,topicArn,e.getMessage()),e);
    throw e;
  }
}
