{
  Observable<MarkedEdge> commitLog=Observable.create(new ObservableIterator<MarkedEdge>("getEdgesToTargetCommitLog"){
    @Override protected Iterator<MarkedEdge> getIterator(){
      return commitLogSerialization.getEdgesToTarget(scope,edgeType);
    }
  }
).subscribeOn(Schedulers.io());
  Observable<MarkedEdge> permanent=Observable.create(new ObservableIterator<MarkedEdge>("getEdgesToTargetTypeStorage"){
    @Override protected Iterator<MarkedEdge> getIterator(){
      return permanentSerialization.getEdgesToTarget(scope,edgeType);
    }
  }
).subscribeOn(Schedulers.io());
  return OrderedMerge.orderedMerge(TargetEdgeComparator.INSTANCE,cassandraConfig.getScanPageSize() / 2,commitLog,permanent).distinctUntilChanged().doOnNext(RX_LOG);
}
