{
  Observable<SourceAwareMarkedEdge> commitLog=Observable.create(new ObservableIterator<MarkedEdge>("getEdgesFromSourceCommitLog"){
    @Override protected Iterator<MarkedEdge> getIterator(){
      return commitLogSerialization.getEdgesFromSource(scope,edgeType);
    }
  }
).subscribeOn(Schedulers.io()).map(new Func1<MarkedEdge,SourceAwareMarkedEdge>(){
    @Override public SourceAwareMarkedEdge call(    final MarkedEdge markedEdge){
      return new SourceAwareMarkedEdge(markedEdge,commitLogSerialization);
    }
  }
);
  Observable<SourceAwareMarkedEdge> permanent=Observable.create(new ObservableIterator<MarkedEdge>("getEdgesFromSourceStorage"){
    @Override protected Iterator<MarkedEdge> getIterator(){
      return permanentSerialization.getEdgesFromSource(scope,edgeType);
    }
  }
).subscribeOn(Schedulers.io()).subscribeOn(Schedulers.io()).map(new Func1<MarkedEdge,SourceAwareMarkedEdge>(){
    @Override public SourceAwareMarkedEdge call(    final MarkedEdge markedEdge){
      return new SourceAwareMarkedEdge(markedEdge,permanentSerialization);
    }
  }
);
  return OrderedMerge.orderedMerge(new SourceEdgeComparator(commitLogSerialization),graphFig.getScanPageSize() / 2,commitLog,permanent).map(MAPPER).distinctUntilChanged(EDGE_KEY_SELECTOR).doOnNext(RX_LOG);
}
