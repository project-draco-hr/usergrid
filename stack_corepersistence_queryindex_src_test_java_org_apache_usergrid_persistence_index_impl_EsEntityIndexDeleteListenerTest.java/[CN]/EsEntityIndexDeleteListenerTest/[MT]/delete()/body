{
  CollectionScope scope=mock(CollectionScope.class);
  UUID uuid=TimeUUIDUtils.getTimeUUID(10000L);
  Id entityId=new SimpleId(uuid,"test");
  Entity entity=mock(Entity.class);
  when(entity.getVersion()).thenReturn(uuid);
  when(entity.getId()).thenReturn(entityId);
  when(eif.createEntityIndex(null)).thenReturn(entityIndex);
  CandidateResults results=mock(CandidateResults.class);
  Iterator<Entity> entities=mock(Iterator.class);
  when(entities.hasNext()).thenReturn(true);
  when(entities.next()).thenReturn(entity);
  when(serializationFig.getBufferSize()).thenReturn(10);
  when(serializationFig.getHistorySize()).thenReturn(20);
  when(entityIndex.getEntityVersions(entityId)).thenReturn(results);
  MvccEntity mvccEntity=new MvccEntityImpl(entityId,uuid,MvccEntity.Status.COMPLETE,entity);
  MvccEntityEvent<MvccEntity> event=new MvccEntityEvent<MvccEntity>(scope,uuid,mvccEntity);
  Observable<EntityVersion> o=esEntityIndexDeleteListener.receive(event);
  EntityVersion testEntity=o.toBlockingObservable().last();
  assertEquals(testEntity.getId(),mvccEntity.getId());
  verify(entityIndex).deindex(entity);
}
