{
  CollectionScope scope=mock(CollectionScope.class);
  UUID uuid=TimeUUIDUtils.getTimeUUID(10000L);
  Id entityId=new SimpleId(uuid,"test");
  Entity entity=mock(Entity.class);
  when(entity.getVersion()).thenReturn(uuid);
  when(entity.getId()).thenReturn(entityId);
  Results results=mock(Results.class);
  List<Entity> entities=new ArrayList<>();
  entities.add(entity);
  when(serializationFig.getBufferSize()).thenReturn(10);
  when(serializationFig.getHistorySize()).thenReturn(20);
  when(results.getEntities()).thenReturn(entities);
  when(entityIndex.getEntityVersions(entityId,scope)).thenReturn(results);
  MvccEntity mvccEntity=new MvccEntityImpl(entityId,uuid,MvccEntity.Status.COMPLETE,entity);
  MvccEntityEvent<MvccEntity> event=new MvccEntityEvent<MvccEntity>(scope,uuid,mvccEntity);
  Observable<MvccEntity> o=esEntityIndexDeleteListener.receive(event);
  MvccEntity testEntity=o.toBlockingObservable().last();
  assertEquals(testEntity.getId(),mvccEntity.getId());
  verify(entityIndex).deindex(scope,entity);
}
