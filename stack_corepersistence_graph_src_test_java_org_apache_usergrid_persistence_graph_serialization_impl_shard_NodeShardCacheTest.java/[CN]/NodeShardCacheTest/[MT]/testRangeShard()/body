{
  final GraphFig graphFig=getFigMock();
  final NodeShardAllocation allocation=mock(NodeShardAllocation.class);
  final TimeService time=mock(TimeService.class);
  final Id id=createId("test");
  final String edgeType="edge";
  final String otherIdType="type";
  NodeShardCache cache=new NodeShardCacheImpl(allocation,graphFig,time);
  final Shard minShard=new Shard(0,0,true);
  final Shard midShard=new Shard(10000,1000,true);
  final Shard maxShard=new Shard(20000,2000,true);
  final ShardEntryGroup minShardGroup=new ShardEntryGroup(10000);
  minShardGroup.addShard(minShard);
  final ShardEntryGroup midShardGroup=new ShardEntryGroup(10000);
  midShardGroup.addShard(midShard);
  final ShardEntryGroup maxShardGroup=new ShardEntryGroup(10000);
  maxShardGroup.addShard(maxShard);
  DirectedEdgeMeta directedEdgeMeta=DirectedEdgeMeta.fromTargetNodeSourceType(id,edgeType,otherIdType);
  when(allocation.getShards(same(scope),any(Optional.class),same(directedEdgeMeta))).thenAnswer(new Answer<Iterator<ShardEntryGroup>>(){
    @Override public Iterator<ShardEntryGroup> answer(    final InvocationOnMock invocationOnMock) throws Throwable {
      return Arrays.asList(maxShardGroup,midShardGroup,minShardGroup).iterator();
    }
  }
);
  ShardEntryGroup writeShard=cache.getWriteShardGroup(scope,minShard.getShardIndex(),directedEdgeMeta);
  assertSame(minShardGroup,writeShard);
  Iterator<ShardEntryGroup> groups=cache.getReadShardGroup(scope,minShard.getShardIndex(),directedEdgeMeta);
  assertTrue(groups.hasNext());
  assertSame("min shard expected",minShardGroup,groups.next());
  assertFalse(groups.hasNext());
  writeShard=cache.getWriteShardGroup(scope,midShard.getShardIndex(),directedEdgeMeta);
  assertSame(midShardGroup,writeShard);
  groups=cache.getReadShardGroup(scope,midShard.getShardIndex(),directedEdgeMeta);
  assertTrue(groups.hasNext());
  assertSame("mid shard expected",midShardGroup,groups.next());
  assertTrue(groups.hasNext());
  assertSame("min shard expected",minShardGroup,groups.next());
  assertFalse(groups.hasNext());
  writeShard=cache.getWriteShardGroup(scope,maxShard.getShardIndex(),directedEdgeMeta);
  assertSame(maxShardGroup,writeShard);
  groups=cache.getReadShardGroup(scope,maxShard.getShardIndex(),directedEdgeMeta);
  assertTrue(groups.hasNext());
  assertSame("max shard expected",maxShardGroup,groups.next());
  assertTrue(groups.hasNext());
  assertSame("mid shard expected",midShardGroup,groups.next());
  assertTrue(groups.hasNext());
  assertSame("min shard expected",minShardGroup,groups.next());
  assertFalse(groups.hasNext());
  writeShard=cache.getWriteShardGroup(scope,midShard.getShardIndex() + 1,directedEdgeMeta);
  assertSame(midShardGroup,writeShard);
  groups=cache.getReadShardGroup(scope,midShard.getShardIndex() + 1,directedEdgeMeta);
  assertTrue(groups.hasNext());
  assertSame("mid shard expected",midShardGroup,groups.next());
  assertTrue(groups.hasNext());
  assertSame("min shard expected",minShardGroup,groups.next());
  assertFalse(groups.hasNext());
  writeShard=cache.getWriteShardGroup(scope,midShard.getShardIndex() - 1,directedEdgeMeta);
  assertSame(minShardGroup,writeShard);
  groups=cache.getReadShardGroup(scope,midShard.getShardIndex() - 1,directedEdgeMeta);
  assertTrue(groups.hasNext());
  assertSame("min shard expected",minShardGroup,groups.next());
  assertFalse(groups.hasNext());
}
