{
  final GraphFig graphFig=getFigMock();
  final NodeShardAllocation allocation=mock(NodeShardAllocation.class);
  final Id id=IdGenerator.createId("test");
  final String edgeType="edge";
  final String otherIdType="type";
  final long newTime=10000l;
  NodeShardCache cache=new NodeShardCacheImpl(allocation,graphFig);
  final Optional max=Optional.absent();
  final ShardEntryGroup group=new ShardEntryGroup(newTime);
  group.addShard(new Shard(0,0,true));
  DirectedEdgeMeta directedEdgeMeta=DirectedEdgeMeta.fromSourceNodeTargetType(id,edgeType,otherIdType);
  when(allocation.getShards(same(scope),same(max),same(directedEdgeMeta))).thenAnswer(new Answer<Iterator<ShardEntryGroup>>(){
    @Override public Iterator<ShardEntryGroup> answer(    final InvocationOnMock invocationOnMock) throws Throwable {
      return Collections.singletonList(group).iterator();
    }
  }
);
  ShardEntryGroup returnedGroup=cache.getWriteShardGroup(scope,newTime,directedEdgeMeta);
  assertSame(group,returnedGroup);
  Iterator<ShardEntryGroup> shards=cache.getReadShardGroup(scope,newTime,directedEdgeMeta);
  assertTrue(shards.hasNext());
  returnedGroup=shards.next();
  assertSame("Single shard group expected",group,returnedGroup);
  assertFalse(shards.hasNext());
}
