{
  final GraphFig graphFig=getFigMock();
  final NodeShardAllocation allocation=mock(NodeShardAllocation.class);
  final Id id=createId("test");
  final String edgeType="edge";
  final String otherIdType="type";
  final UUID min=new UUID(0,1);
  final UUID mid=new UUID(0,100);
  final UUID max=new UUID(0,200);
  NodeShardCache cache=new NodeShardCacheImpl(allocation,graphFig);
  when(allocation.getShards(same(scope),same(id),same(Constants.MAX_UUID),any(Integer.class),same(edgeType),same(otherIdType))).thenReturn(Arrays.asList(min,mid,max).iterator());
  Iterator<UUID> slice=cache.getVersions(scope,id,new UUID(max.getMostSignificantBits(),max.getLeastSignificantBits()),edgeType,otherIdType);
  assertEquals(max,slice.next());
  assertEquals(mid,slice.next());
  assertEquals(min,slice.next());
  slice=cache.getVersions(scope,id,new UUID(mid.getMostSignificantBits(),mid.getLeastSignificantBits()),edgeType,otherIdType);
  assertEquals(mid,slice.next());
  assertEquals(min,slice.next());
  slice=cache.getVersions(scope,id,new UUID(min.getMostSignificantBits(),min.getLeastSignificantBits()),edgeType,otherIdType);
  assertEquals(min,slice.next());
}
