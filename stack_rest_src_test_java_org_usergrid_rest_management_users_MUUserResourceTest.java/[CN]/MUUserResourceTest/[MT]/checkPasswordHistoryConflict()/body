{
  String[] passwords=new String[]{"password1","password2","password3","password4"};
  UserInfo user=setup.getMgmtSvc().createAdminUser("edanuff","Ed Anuff","ed@anuff.com",passwords[0],true,false);
  assertNotNull(user);
  OrganizationInfo organization=setup.getMgmtSvc().createOrganization("ed-organization",user,true);
  assertNotNull(organization);
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(OrganizationInfo.PASSWORD_HISTORY_SIZE_KEY,1);
  organization.setProperties(props);
  setup.getMgmtSvc().updateOrganization(organization);
  UserInfo userInfo=setup.getMgmtSvc().getAdminUserByEmail("ed@anuff.com");
  Map<String,String> payload=hashMap("oldpassword",passwords[0]).map("newpassword",passwords[0]);
  try {
    JsonNode node=resource().path("/management/users/edanuff/password").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
    fail("should fail with conflict");
  }
 catch (  UniformInterfaceException e) {
    assertEquals(409,e.getResponse().getStatus());
  }
  payload.put("newpassword",passwords[1]);
  JsonNode node=resource().path("/management/users/edanuff/password").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  payload.put("oldpassword",passwords[1]);
  payload.put("newpassword",passwords[0]);
  try {
    node=resource().path("/management/users/edanuff/password").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
    fail("should fail with conflict");
  }
 catch (  UniformInterfaceException e) {
    assertEquals(409,e.getResponse().getStatus());
  }
}
