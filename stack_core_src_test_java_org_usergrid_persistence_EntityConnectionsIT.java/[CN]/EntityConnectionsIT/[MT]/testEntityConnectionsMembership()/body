{
  UUID applicationId=createApplication("entityConnectionsTest","testEntityConnectionsMembership");
  assertNotNull(applicationId);
  EntityManager em=emf.getEntityManager(applicationId);
  assertNotNull(em);
  User first=new User();
  first.setUsername("first");
  first.setEmail("first@usergrid.com");
  Entity firstUserEntity=em.create(first);
  assertNotNull(firstUserEntity);
  User second=new User();
  second.setUsername("second");
  second.setEmail("second@usergrid.com");
  Entity secondUserEntity=em.create(second);
  assertNotNull(secondUserEntity);
  Map<String,Object> data=new HashMap<String,Object>();
  data.put("name","4peaks");
  Entity fourpeaks=em.create("restaurant",data);
  em.createConnection(firstUserEntity,"likes",fourpeaks);
  data=new HashMap<String,Object>();
  data.put("name","arrogantbutcher");
  Entity arrogantbutcher=em.create("restaurant",data);
  em.createConnection(secondUserEntity,"likes",arrogantbutcher);
  Results r=em.getConnectedEntities(firstUserEntity.getUuid(),"likes","restaurant",Level.IDS);
  List<ConnectionRef> connections=r.getConnections();
  assertNotNull(connections);
  assertEquals(1,connections.size());
  assertEquals(fourpeaks.getUuid(),connections.get(0).getConnectedEntity().getUuid());
  assertEquals(firstUserEntity.getUuid(),connections.get(0).getConnectingEntity().getUuid());
  assertTrue(em.isConnectionMember(firstUserEntity,"likes",fourpeaks));
  assertFalse(em.isConnectionMember(firstUserEntity,"likes",arrogantbutcher));
  r=em.getConnectedEntities(secondUserEntity.getUuid(),"likes","restaurant",Level.IDS);
  connections=r.getConnections();
  assertNotNull(connections);
  assertEquals(1,connections.size());
  assertEquals(arrogantbutcher.getUuid(),connections.get(0).getConnectedEntity().getUuid());
  assertEquals(secondUserEntity.getUuid(),connections.get(0).getConnectingEntity().getUuid());
  assertTrue(em.isConnectionMember(secondUserEntity,"likes",arrogantbutcher));
  assertFalse(em.isConnectionMember(secondUserEntity,"likes",fourpeaks));
}
