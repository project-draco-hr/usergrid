{
  AuthPrincipalInfo principal=AuthPrincipalInfo.getFromAccessToken(token);
  if (principal == null) {
    return null;
  }
  if ((expectedType != null) && !principal.getType().equals(expectedType)) {
    logger.info("Token is not of expected type {}",token);
    throw new BadAccessTokenException("Token is not of expected type " + token);
  }
  String digestPart=stringOrSubstringAfterLast(token,':').substring(BASE64_PREFIX_LENGTH);
  ByteBuffer bytes=ByteBuffer.wrap(decodeBase64(digestPart));
  if (bytes.remaining() != 28) {
    String error_str="Token digest is wrong size: " + digestPart + " is "+ bytes.remaining()+ " bytes, expected 28";
    logger.info(error_str);
    throw new BadAccessTokenException(error_str);
  }
  long timestamp=bytes.getLong();
  long current_time=System.currentTimeMillis();
  long age=current_time - timestamp;
  if ((maxAge > 0) && (age > maxAge)) {
    logger.info("Token expired {} minutes ago",(age / 1000 / 60));
    throw new ExpiredAccessTokenException("Token expired " + (age / 1000 / 60) + " minutes ago");
  }
  EntityRef user=new SimpleEntityRef(principal.getUuid());
  String principalSecret=null;
  if (useSecret) {
    principalSecret=getSecret(applicationId,principal.getType(),principal.getUuid());
  }
  String secret=(tokenSalt != null ? tokenSalt : "") + (principalSecret != null ? principalSecret : "");
  ByteBuffer digest=ByteBuffer.wrap(sha(timestamp + sessionSecretSalt + secret+ principal.getUuid()));
  boolean verified=digest.equals(bytes);
  if (!verified) {
    throw new InvalidAccessTokenException();
  }
  return user;
}
