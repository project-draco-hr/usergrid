{
  final long time=1l;
  final long timeout=5;
  final long extentedTimeout=50;
  final int queueSize=100;
  String queueName="testTimeout" + UUID.randomUUID();
  AWSCredentials awsCredentials=new BasicAWSCredentials(System.getProperty("accessKey"),System.getProperty("secretKey"));
  AmazonSQSAsyncClient sqsAsyncClient=new AmazonSQSAsyncClient(awsCredentials);
  TimeoutQueue queue=null;
  try {
    queue=new AmazonSimpleTimeoutQueue(queueName);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assert(false);
  }
  try {
    Set<TestEvent> events=new HashSet<TestEvent>();
    for (int i=0; i < queueSize; i++) {
      final TestEvent event=new TestEvent();
      AsynchronousMessage<TestEvent> asynchronousMessage=queue.queue(event,timeout);
      events.add(event);
      assertNotNull(asynchronousMessage);
      assertEquals(event,asynchronousMessage.getEvent());
      assertEquals(timeout,asynchronousMessage.getTimeout());
    }
    Collection<AsynchronousMessage<TestEvent>> results=queue.take(100,timeout);
    final long firstTime=time + timeout;
    final int takeSize=100;
    final int iterations=queueSize;
    assertEquals("Time elapsed",100,results.size());
    Iterator<AsynchronousMessage<TestEvent>> eventIterator=results.iterator();
    while (eventIterator.hasNext()) {
      AsynchronousMessage<TestEvent> message=eventIterator.next();
      boolean removed=queue.remove(message);
      assertTrue(removed);
    }
  }
  finally {
    sqsAsyncClient.deleteQueue(queueName);
  }
}
