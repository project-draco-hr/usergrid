{
  final Job job;
  try {
    job=jobFactory.jobsFrom(jobDescriptor);
  }
 catch (  JobNotFoundException e) {
    LOG.error("Could not create jobs",e);
    return;
  }
  final JobExecution execution=new JobExecutionImpl(jobDescriptor);
  final JobListener currentListener=this.jobListener;
  try {
    capacitySemaphore.acquire();
  }
 catch (  InterruptedException e) {
    LOG.error("Unable to acquire semaphore capacity before submitting job",e);
    return;
  }
  final Timer.Context timer=jobTimer.time();
  ListenableFuture<Void> future=service.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      LOG.debug("Starting the job with job id {}",execution.getJobId());
      runCounter.inc();
      execution.start(maxFailCount);
      if (execution.getStatus() == Status.DEAD) {
        try {
          job.dead(execution);
          jobAccessor.save(execution);
        }
 catch (        Exception t) {
          LOG.error("Unable to invoke dead event on job",t);
        }
        return null;
      }
      jobAccessor.save(execution);
      LOG.info("Starting job {} with execution data {}",job,execution);
      job.execute(execution);
      if (currentListener != null) {
        currentListener.onSubmit(execution);
      }
      return null;
    }
  }
);
  Futures.addCallback(future,new FutureCallback<Void>(){
    @Override public void onSuccess(    Void param){
      LOG.debug("Job succeeded with the job id {}",execution.getJobId());
      capacitySemaphore.release();
      timer.stop();
      runCounter.dec();
      successCounter.inc();
      if (execution.getStatus() == Status.IN_PROGRESS) {
        LOG.info("Successful completion of bulkJob {}",execution);
        execution.completed();
      }
      jobAccessor.save(execution);
      if (currentListener != null) {
        currentListener.onSuccess(execution);
      }
    }
    @Override public void onFailure(    Throwable throwable){
      LOG.error("Job failed with the job id {}",execution.getJobId());
      capacitySemaphore.release();
      timer.stop();
      runCounter.dec();
      failCounter.inc();
      LOG.error("Failed execution for bulkJob",throwable);
      if (execution.getStatus() == Status.IN_PROGRESS) {
        execution.failed();
      }
      jobAccessor.save(execution);
      if (currentListener != null) {
        currentListener.onFailure(execution);
      }
    }
  }
);
}
