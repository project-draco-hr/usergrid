{
  String rand1=RandomStringUtils.randomAlphanumeric(10);
  String rand2=RandomStringUtils.randomAlphanumeric(10);
  String rand3=RandomStringUtils.randomAlphanumeric(10);
  UUID user_uuid_1=UUIDUtils.newTimeUUID();
  UUID user_uuid_2=UUIDUtils.newTimeUUID();
  UUID user_uuid_3=UUIDUtils.newTimeUUID();
  UUID org_uuid_1=UUIDUtils.newTimeUUID();
  UUID org_uuid_2=UUIDUtils.newTimeUUID();
  UUID org_uuid_3=UUIDUtils.newTimeUUID();
  String user_name_1="user1_" + rand1;
  String user_name_2="user2_" + rand2;
  String user_name_3="user3_" + rand3;
  String org_name_1="org1_" + rand1;
  String org_name_2="org2_" + rand2;
  String org_name_3="org3_" + rand3;
  File resourcesDir=new File("./target/test-classes");
  String[] fileNames=resourcesDir.list();
  File tempDir=Files.createTempDir();
  for (  String fileName : fileNames) {
    if (fileName.startsWith("admin-user")) {
      String fileContent=IOUtils.toString(new FileInputStream(resourcesDir.getAbsolutePath() + File.separator + fileName));
      fileContent=fileContent.replaceAll("USER_UUID_1",user_uuid_1.toString());
      fileContent=fileContent.replaceAll("USER_UUID_2",user_uuid_2.toString());
      fileContent=fileContent.replaceAll("USER_UUID_3",user_uuid_3.toString());
      fileContent=fileContent.replaceAll("ORG_UUID_1",org_uuid_1.toString());
      fileContent=fileContent.replaceAll("ORG_UUID_2",org_uuid_2.toString());
      fileContent=fileContent.replaceAll("ORG_UUID_3",org_uuid_3.toString());
      fileContent=fileContent.replaceAll("USER_NAME_1",user_name_1);
      fileContent=fileContent.replaceAll("USER_NAME_2",user_name_2);
      fileContent=fileContent.replaceAll("USER_NAME_3",user_name_3);
      fileContent=fileContent.replaceAll("ORG_NAME_1",org_name_1);
      fileContent=fileContent.replaceAll("ORG_NAME_2",org_name_2);
      fileContent=fileContent.replaceAll("ORG_NAME_3",org_name_3);
      FileOutputStream os=new FileOutputStream(tempDir.getAbsolutePath() + File.separator + fileName);
      IOUtils.write(fileContent,os);
      os.close();
    }
  }
  ImportAdmins importAdmins=new ImportAdmins();
  importAdmins.startTool(new String[]{"-host","localhost:9160","-eshost","localhost:9200","-escuster","usergrid","-inputDir",tempDir.getAbsolutePath()},false);
  OrganizationInfo orgInfo1=setup.getMgmtSvc().getOrganizationByUuid(org_uuid_1);
  assertNotNull("org 1 exists",orgInfo1);
  List<UserInfo> org1_users=setup.getMgmtSvc().getAdminUsersForOrganization(org_uuid_1);
  assertEquals("org1 has one user",1,org1_users.size());
  OrganizationInfo orgInfo2=setup.getMgmtSvc().getOrganizationByUuid(org_uuid_2);
  assertNotNull("org 2 exists",orgInfo2);
  List<UserInfo> org2_users=setup.getMgmtSvc().getAdminUsersForOrganization(org_uuid_2);
  assertEquals("org2 has two users",2,org2_users.size());
  OrganizationInfo orgInfo3=setup.getMgmtSvc().getOrganizationByUuid(org_uuid_3);
  assertNotNull("org 3 exists",orgInfo3);
  List<UserInfo> org3_users=setup.getMgmtSvc().getAdminUsersForOrganization(org_uuid_3);
  assertEquals("org 3 has 1 users",1,org3_users.size());
  BiMap<UUID,String> user1_orgs=setup.getMgmtSvc().getOrganizationsForAdminUser(user_uuid_1);
  assertEquals("user 1 has 2 orgs",2,user1_orgs.size());
  BiMap<UUID,String> user2_orgs=setup.getMgmtSvc().getOrganizationsForAdminUser(user_uuid_2);
  assertEquals("user 2 has two orgs gained one from duplicate",2,user2_orgs.size());
  try {
    BiMap<UUID,String> user3_orgs=setup.getMgmtSvc().getOrganizationsForAdminUser(user_uuid_3);
    fail("fetch user 3 should have thrown exception");
  }
 catch (  Exception expected) {
    logger.info("EXCEPTION EXPECTED");
  }
  EntityManager em=setup.getEmf().getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
  Entity user3=em.get(user_uuid_3);
  assertNull("duplicate user does not exist",user3);
}
