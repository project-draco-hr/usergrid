{
  File targetFolderFile=new File(targetFolder);
  for (Iterator it=project.getArtifacts().iterator(); it.hasNext(); ) {
    Artifact artifact=(Artifact)it.next();
    File f=artifact.getFile();
    LOG.info("Artifact {} found.",f.getAbsolutePath());
    if (f == null) {
      throw new MojoExecutionException("Cannot locate artifact file of " + artifact.getArtifactId());
    }
    try {
      List<String> existing=FileUtils.getFileNames(targetFolderFile,artifact.getArtifactId() + "-*.jar",null,false);
      if (existing.size() != 0) {
        String version=existing.get(0).split("(" + artifact.getArtifactId() + "-)")[1].split("(.jar)")[0];
        DefaultArtifactVersion existingVersion=new DefaultArtifactVersion(version);
        DefaultArtifactVersion artifactVersion=new DefaultArtifactVersion(artifact.getVersion());
        if (existingVersion.compareTo(artifactVersion) < 0) {
          FileUtils.forceDelete(targetFolder + existing.get(0));
        }
 else {
          LOG.info("Artifact " + artifact.getArtifactId() + " with the same or higher "+ "version already exists in lib folder, skipping copy");
          continue;
        }
      }
      LOG.info("Copying {} to {}",f.getName(),targetFolder);
      FileUtils.copyFileToDirectory(f.getAbsolutePath(),targetFolder);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Error while copying artifact file of " + artifact.getArtifactId(),e);
    }
  }
}
