{
  File applicationFile=new File(importDir,applicationName);
  logger.info("Loading application file: " + applicationFile.getAbsolutePath());
  JsonParser jp=getJsonParserForFile(applicationFile);
  JsonToken token=jp.nextToken();
  validateStartArray(token);
  token=jp.nextValue();
  Application application=jp.readValueAs(Application.class);
  @SuppressWarnings("unchecked") String orgName=((Map<String,String>)application.getMetadata("organization")).get("value");
  OrganizationInfo info=managementService.getOrganizationByName(orgName);
  if (info == null) {
    logger.error("Unable to import application '{}' for organisation with name '{}'",application.getName(),orgName);
    return;
  }
  UUID appId=null;
  try {
    appId=managementService.importApplication(info.getUuid(),application);
  }
 catch (  ApplicationAlreadyExistsException aaee) {
    ApplicationInfo appInfo=managementService.getApplicationInfo(orgName + "/" + application.getName());
    if (appInfo != null) {
      appId=appInfo.getId();
    }
  }
  echo(application);
  EntityManager em=emf.getEntityManager(appId);
  for (  Entry<String,String> entry : em.getRoles().entrySet()) {
    em.deleteRole(entry.getKey());
  }
  @SuppressWarnings("unchecked") Map<String,Object> dictionaries=(Map<String,Object>)application.getMetadata("dictionaries");
  if (dictionaries != null) {
    EntityManager rootEm=emf.getEntityManager(emf.getManagementAppId());
    Entity appEntity=rootEm.get(new SimpleEntityRef("application",appId));
    for (    Entry<String,Object> dictionary : dictionaries.entrySet()) {
      @SuppressWarnings("unchecked") Map<Object,Object> value=(Map<Object,Object>)dictionary.getValue();
      em.addMapToDictionary(appEntity,dictionary.getKey(),value);
    }
  }
  @SuppressWarnings("unchecked") List<String> collections=(List<String>)application.getMetadata("collections");
  for (  String collectionName : collections) {
    em.createApplicationCollection(collectionName);
  }
  while (jp.nextValue() != JsonToken.END_ARRAY) {
    @SuppressWarnings("unchecked") Map<String,Object> entityProps=jp.readValueAs(HashMap.class);
    UUID uuid=getId(entityProps);
    String type=getType(entityProps);
    try {
      em.create(uuid,type,entityProps);
    }
 catch (    DuplicateUniquePropertyExistsException de) {
      logger.error("Unable to create entity.  It appears to be a duplicate",de);
      continue;
    }
    if (em.get(new SimpleEntityRef(type,uuid)) == null) {
      logger.error("Holy hell, we wrote an entity and it's missing.  " + "Entity Id was {} and type is {}",uuid,type);
      System.exit(1);
    }
    logger.info("Counts {}",JsonUtils.mapToFormattedJsonString(em.getApplicationCounters()));
    echo(entityProps);
  }
  logger.info("----- End of application:" + application.getName());
  jp.close();
}
