{
  Map<String,Object> payload=loadJsonFromResourceFile(CollectionsResourceTest.class,Map.class,"cat-schema.json");
  assertNotNull(payload);
  JsonNode node=resource().path("/test-organization/test-app/cats/schema").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).put(JsonNode.class,payload);
  try {
    payload=loadJsonFromResourceFile(CollectionsResourceTest.class,Map.class,"bad-schema.json");
    assertNotNull(payload);
    node=resource().path("/test-organization/test-app/cats/schema").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).put(JsonNode.class,payload);
    Assert.fail();
  }
 catch (  UniformInterfaceException iae) {
    logger.error("\n" + mapToFormattedJsonString(iae.getResponse().getEntity(JsonNode.class)));
  }
  try {
    payload=new LinkedHashMap<String,Object>();
    properties.put("name","Tom");
    node=resource().path("/test-organization/test-app/cats").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).put(JsonNode.class,payload);
    Assert.fail();
  }
 catch (  UniformInterfaceException iae) {
    logger.error("\n" + mapToFormattedJsonString(iae.getResponse().getEntity(JsonNode.class)));
  }
  payload=new LinkedHashMap<String,Object>();
  payload.put("name","Tom");
  payload.put("color","tabby");
  node=resource().path("/test-organization/test-app/cats").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).put(JsonNode.class,payload);
  assertNotNull(node);
  node=resource().path("/test-organization/test-app/cats/schema").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertNotNull(node);
  assertEquals("http://json-schema.org/draft-04/schema#",node.get("data").get("$schema").asText());
  assertEquals("object",node.get("data").get("type").asText());
  logger.info("\n" + JsonUtils.mapToFormattedJsonString(node));
}
