{
  Map<String,String> params=buildOrgAppParams();
  OrganizationOwnerInfo orgs=managementService.createOwnerAndOrganization(params.get("orgName"),params.get("username"),"noname",params.get("email"),params.get("password"),true,false);
  ApplicationInfo appInfo=managementService.createApplication(orgs.getOrganization().getUuid(),params.get("appName"));
  assertNotNull(appInfo);
  String adminToken=managementService.getAccessTokenForAdminUser(orgs.getOwner().getUuid(),0);
  JsonNode node=resource().path(String.format("/%s/%s/roles/default",params.get("orgName"),params.get("appName"))).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  Map<String,String> data=hashMap("name","reviewer");
  node=resource().path(String.format("/%s/%s/roles",params.get("orgName"),params.get("appName"))).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,data);
  assertNull(getError(node));
  addPermission(params.get("orgName"),params.get("appName"),adminToken,"reviewer","get,put,post:/reviews/**");
  addPermission(params.get("orgName"),params.get("appName"),adminToken,"reviewer","get,put,post:/users/${user}/**");
  addPermission(params.get("orgName"),params.get("appName"),adminToken,"reviewer","get,put,post:/books/*/review/*");
  assertNull(getError(node));
  UUID userOneId=createRoleUser(orgs.getOrganization().getUuid(),appInfo.getId(),adminToken,"wildcardpermuserone","wildcardpermuserone@apigee.com");
  assertNotNull(userOneId);
  UUID userTwoId=createRoleUser(orgs.getOrganization().getUuid(),appInfo.getId(),adminToken,"wildcardpermusertwo","wildcardpermusertwo@apigee.com");
  assertNotNull(userTwoId);
  node=resource().path(String.format("/%s/%s/users/%s/roles/reviewer",params.get("orgName"),params.get("appName"),userOneId.toString())).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  Map<String,String> book=hashMap("title","Ready Player One").map("author","Earnest Cline");
  node=resource().path(String.format("/%s/%s/books",params.get("orgName"),params.get("appName"))).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,book);
  logNode(node);
  assertEquals("Ready Player One",getEntity(node,0).get("title").getTextValue());
  String bookId=getEntity(node,0).get("uuid").getTextValue();
  String userOneToken=managementService.getAccessTokenForAppUser(appInfo.getId(),userOneId,0);
  Map<String,String> review=hashMap("heading","Loved It").map("body","80s Awesomeness set in the future");
  node=resource().path(String.format("/%s/%s/reviews",params.get("orgName"),params.get("appName"))).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,review);
  String reviewId=getEntity(node,0).get("uuid").getTextValue();
  node=resource().path(String.format("/%s/%s/users/me/wrote/review/%s",params.get("orgName"),params.get("appName"),reviewId)).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  node=resource().path(String.format("/%s/%s/users/me/reviewed/books/%s",params.get("orgName"),params.get("appName"),bookId)).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  logNode(node);
  node=resource().path(String.format("/%s/%s/books/%s/review/%s",params.get("orgName"),params.get("appName"),bookId,reviewId)).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  logNode(node);
  node=resource().path(String.format("/%s/%s/users/me/reviewed/books",params.get("orgName"),params.get("appName"))).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(node);
  node=resource().path(String.format("/%s/%s/reviews/%s",params.get("orgName"),params.get("appName"),reviewId)).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(node);
  node=resource().path(String.format("/%s/%s/users/me/wrote",params.get("orgName"),params.get("appName"))).queryParam("access_token",userOneToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(node);
}
