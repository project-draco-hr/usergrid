{
  UUID id=UUIDUtils.newTimeUUID();
  String applicationName="test";
  String orgname="applicationpermissions";
  String username="permissionadmin" + id;
  String password="password";
  String email=String.format("email%s@usergrid.com",id);
  OrganizationOwnerInfo orgs=managementService.createOwnerAndOrganization(orgname,username,"noname",email,password,true,false);
  ApplicationInfo appInfo=managementService.createApplication(orgs.getOrganization().getUuid(),applicationName);
  Map<String,String> data=hashMap("name","reviewer");
  String adminToken=managementService.getAccessTokenForAdminUser(orgs.getOwner().getUuid(),0);
  JsonNode node=resource().path(String.format("/%s/%s/roles",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,data);
  assertNull(getError(node));
  node=resource().path(String.format("/%s/%s/roles/default",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  assertNull(getError(node));
  addPermission(orgname,applicationName,adminToken,"reviewer","get,put,post:/reviews/**");
  addPermission(orgname,applicationName,adminToken,"guest","get:/reviews/**");
  UUID userId=createRoleUser(orgs.getOrganization().getUuid(),appInfo.getId(),adminToken,"reviewer1","reviewer1@usergrid.com");
  node=resource().path(String.format("/%s/%s/users/reviewer1/roles/reviewer",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  assertNull(getError(node));
  String reviewer1Token=managementService.getAccessTokenForAppUser(appInfo.getId(),userId,0);
  Map<String,String> review=hashMap("rating","4").map("name","noca").map("review","Excellent service and food");
  resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",reviewer1Token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,review);
  review=hashMap("rating","4").map("name","4peaks").map("review","Huge beer selection");
  resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",reviewer1Token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).put(JsonNode.class,review);
  node=resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",reviewer1Token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals("noca",getEntity(node,0).get("name").asText());
  assertEquals("4peaks",getEntity(node,1).get("name").asText());
  ClientResponse.Status status=null;
  try {
    resource().path(String.format("/%s/%s/reviews/noca",orgname,applicationName)).queryParam("access_token",reviewer1Token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  status=null;
  try {
    resource().path(String.format("/%s/%s/reviews/4peaks",orgname,applicationName)).queryParam("access_token",reviewer1Token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  UUID secondUserId=createRoleUser(orgs.getOrganization().getUuid(),appInfo.getId(),adminToken,"reviewer2","reviewer2@usergrid.com");
  Map<String,String> group=hashMap("path","reviewergroup");
  resource().path(String.format("/%s/%s/groups",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,group);
  resource().path(String.format("/%s/%s/groups/reviewergroup/roles/reviewer",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,group);
  resource().path(String.format("/%s/%s/users/reviewer2/groups/reviewergroup",orgname,applicationName)).queryParam("access_token",adminToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  String secondUserToken=managementService.getAccessTokenForAppUser(appInfo.getId(),secondUserId,0);
  review=hashMap("rating","4").map("name","cowboyciao").map("review","Great atmosphoere");
  resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",secondUserToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,review);
  review=hashMap("rating","4").map("name","currycorner").map("review","Authentic");
  resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",secondUserToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,review);
  node=resource().path(String.format("/%s/%s/reviews",orgname,applicationName)).queryParam("access_token",secondUserToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals("noca",getEntity(node,0).get("name").asText());
  assertEquals("4peaks",getEntity(node,1).get("name").asText());
  assertEquals("cowboyciao",getEntity(node,2).get("name").asText());
  assertEquals("currycorner",getEntity(node,3).get("name").asText());
  status=null;
  try {
    resource().path(String.format("/%s/%s/reviews/cowboyciao",orgname,applicationName)).queryParam("access_token",secondUserToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  status=null;
  try {
    resource().path(String.format("/%s/%s/reviews/currycorner",orgname,applicationName)).queryParam("access_token",secondUserToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
}
