{
  io.doSetup();
  int size=10;
  int queryLimit=Query.MAX_LIMIT;
  Set<Entity> sortedResults=new TreeSet<Entity>(new Comparator<Entity>(){
    @Override public int compare(    Entity o1,    Entity o2){
      boolean o1Boolean=(Boolean)o1.getProperty("boolean");
      boolean o2Boolean=(Boolean)o2.getProperty("boolean");
      if (o1Boolean != o2Boolean) {
        if (o1Boolean) {
          return -1;
        }
        return 1;
      }
      int o1Index=(Integer)o1.getProperty("index");
      int o2Index=(Integer)o2.getProperty("index");
      if (o1Index > o2Index) {
        return 1;
      }
 else       if (o2Index > o1Index) {
        return -1;
      }
      return 0;
    }
  }
);
  long start=System.currentTimeMillis();
  LOG.info("Writing {} entities.",size);
  for (int i=0; i < size; i++) {
    Map<String,Object> entity=new HashMap<String,Object>();
    String name=String.valueOf(i);
    boolean bool=i % 2 == 0;
    entity.put("name",name);
    entity.put("boolean",bool);
    entity.put("index",i);
    Entity saved=io.writeEntity(entity);
    sortedResults.add(saved);
  }
  long stop=System.currentTimeMillis();
  LOG.info("Writes took {} ms",stop - start);
  app.refreshIndex();
  Query query=Query.fromQL("select * order by boolean desc, index asc");
  query.setLimit(queryLimit);
  int count=0;
  Results results;
  start=System.currentTimeMillis();
  Iterator<Entity> itr=sortedResults.iterator();
  do {
    results=io.getResults(query);
    for (int i=0; i < results.size(); i++) {
      Entity expected=itr.next();
      Entity returned=results.getEntities().get(i);
      assertEquals("Order incorrect",expected.getName(),returned.getName());
      count++;
    }
    query.setCursor(results.getCursor());
  }
 while (results.getCursor() != null);
  stop=System.currentTimeMillis();
  LOG.info("Query took {} ms to return {} entities",stop - start,count);
  assertEquals(sortedResults.size(),count);
}
