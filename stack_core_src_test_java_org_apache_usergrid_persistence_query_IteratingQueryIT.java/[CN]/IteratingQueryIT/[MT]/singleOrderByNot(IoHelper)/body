{
  io.doSetup();
  int size=20;
  int queryLimit=Query.MAX_LIMIT;
  int intersectIncrement=5;
  int secondIncrement=9;
  long start=System.currentTimeMillis();
  LOG.info("Writing {} entities.",size);
  List<String> expectedResults=new ArrayList<String>(size / secondIncrement);
  for (int i=0; i < size; i++) {
    Map<String,Object> entity=new HashMap<String,Object>();
    String name=String.valueOf(i);
    boolean intersect1=i % intersectIncrement == 0;
    boolean intersect2=i % secondIncrement == 0;
    entity.put("name",name);
    entity.put("intersect",intersect1);
    entity.put("intersect2",intersect2);
    io.writeEntity(entity);
    if (!(intersect1 && intersect2)) {
      expectedResults.add(name);
    }
  }
  app.refreshIndex();
  long stop=System.currentTimeMillis();
  LOG.info("Writes took {} ms",stop - start);
  Query query=Query.fromQL("select * where NOT (intersect = true AND intersect2 = true) order by created");
  query.setLimit(queryLimit);
  int count=0;
  Results results;
  start=System.currentTimeMillis();
  do {
    results=io.getResults(query);
    for (int i=0; i < results.size(); i++) {
      assertEquals(expectedResults.get(count),results.getEntities().get(i).getName());
      count++;
    }
    query.setCursor(results.getCursor());
  }
 while (results.getCursor() != null);
  stop=System.currentTimeMillis();
  LOG.info("Query took {} ms to return {} entities",stop - start,count);
  assertEquals(expectedResults.size(),count);
}
