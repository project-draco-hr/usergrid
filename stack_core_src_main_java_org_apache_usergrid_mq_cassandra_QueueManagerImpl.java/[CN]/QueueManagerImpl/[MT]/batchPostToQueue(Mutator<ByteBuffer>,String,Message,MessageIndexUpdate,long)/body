{
  queuePath=normalizeQueuePath(queuePath);
  UUID queueId=getQueueId(queuePath);
  message.sync();
  addMessageToMutator(batch,message,timestamp);
  long shard_ts=roundLong(message.getTimestamp(),QUEUE_SHARD_INTERVAL);
  final UUID messageUuid=message.getUuid();
  logger.debug("Adding message with id '{}' to queue '{}'",messageUuid,queueId);
  batch.addInsertion(getQueueShardRowKey(queueId,shard_ts),QUEUE_INBOX.getColumnFamily(),createColumn(messageUuid,ByteBuffer.allocate(0),timestamp,ue,be));
  long oldest_ts=Long.MAX_VALUE - getTimestampInMicros(messageUuid);
  batch.addInsertion(bytebuffer(queueId),QUEUE_PROPERTIES.getColumnFamily(),createColumn(QUEUE_OLDEST,messageUuid,oldest_ts,se,ue));
  long newest_ts=getTimestampInMicros(messageUuid);
  batch.addInsertion(bytebuffer(queueId),QUEUE_PROPERTIES.getColumnFamily(),createColumn(QUEUE_NEWEST,messageUuid,newest_ts,se,ue));
  logger.debug("Writing UUID {} with oldest timestamp {} and newest with timestamp {}",new Object[]{messageUuid,oldest_ts,newest_ts});
  batch.addInsertion(bytebuffer(getQueueId("/")),QUEUE_SUBSCRIBERS.getColumnFamily(),createColumn(queuePath,queueId,timestamp,se,ue));
  counterUtils.batchIncrementQueueCounter(batch,getQueueId("/"),queuePath,1L,timestamp,applicationId);
  if (indexUpdate == null) {
    indexUpdate=new MessageIndexUpdate(message);
  }
  indexUpdate.addToMutation(batch,queueId,shard_ts,timestamp);
  counterUtils.addMessageCounterMutations(batch,applicationId,queueId,message,timestamp);
  batch.addInsertion(bytebuffer(queueId),QUEUE_PROPERTIES.getColumnFamily(),createColumn(QUEUE_CREATED,timestamp / 1000,Long.MAX_VALUE - timestamp,se,le));
  batch.addInsertion(bytebuffer(queueId),QUEUE_PROPERTIES.getColumnFamily(),createColumn(QUEUE_MODIFIED,timestamp / 1000,timestamp,se,le));
  return message;
}
