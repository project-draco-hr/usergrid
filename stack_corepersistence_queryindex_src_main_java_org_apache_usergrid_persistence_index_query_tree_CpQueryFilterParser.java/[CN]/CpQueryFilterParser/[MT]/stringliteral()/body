{
  CpQueryFilterParser.stringliteral_return retval=new CpQueryFilterParser.stringliteral_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING7=null;
  Object STRING7_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      STRING7=(Token)match(input,STRING,FOLLOW_STRING_in_stringliteral1065);
      STRING7_tree=new StringLiteral(STRING7);
      adaptor.addChild(root_0,STRING7_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
  finally {
  }
  return retval;
}
