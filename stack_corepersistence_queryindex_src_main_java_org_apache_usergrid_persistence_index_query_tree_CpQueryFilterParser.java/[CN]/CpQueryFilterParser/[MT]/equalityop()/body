{
  CpQueryFilterParser.equalityop_return retval=new CpQueryFilterParser.equalityop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LT15=null;
  Token LTE18=null;
  Token EQ21=null;
  Token GT24=null;
  Token GTE27=null;
  CpQueryFilterParser.property_return property14=null;
  CpQueryFilterParser.value_return value16=null;
  CpQueryFilterParser.property_return property17=null;
  CpQueryFilterParser.value_return value19=null;
  CpQueryFilterParser.property_return property20=null;
  CpQueryFilterParser.value_return value22=null;
  CpQueryFilterParser.property_return property23=null;
  CpQueryFilterParser.value_return value25=null;
  CpQueryFilterParser.property_return property26=null;
  CpQueryFilterParser.value_return value28=null;
  Object LT15_tree=null;
  Object LTE18_tree=null;
  Object EQ21_tree=null;
  Object GT24_tree=null;
  Object GTE27_tree=null;
  try {
    int alt2=5;
switch (input.LA(1)) {
case ID:
{
switch (input.LA(2)) {
case LT:
{
            alt2=1;
          }
        break;
case LTE:
{
        alt2=2;
      }
    break;
case EQ:
{
    alt2=3;
  }
break;
case GT:
{
alt2=4;
}
break;
case GTE:
{
alt2=5;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,1,input);
throw nvae;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop1145);
property14=property();
state._fsp--;
adaptor.addChild(root_0,property14.getTree());
LT15=(Token)match(input,LT,FOLLOW_LT_in_equalityop1147);
LT15_tree=new LessThan(LT15);
root_0=(Object)adaptor.becomeRoot(LT15_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop1153);
value16=value();
state._fsp--;
adaptor.addChild(root_0,value16.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop1158);
property17=property();
state._fsp--;
adaptor.addChild(root_0,property17.getTree());
LTE18=(Token)match(input,LTE,FOLLOW_LTE_in_equalityop1160);
LTE18_tree=new LessThanEqual(LTE18);
root_0=(Object)adaptor.becomeRoot(LTE18_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop1166);
value19=value();
state._fsp--;
adaptor.addChild(root_0,value19.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop1171);
property20=property();
state._fsp--;
adaptor.addChild(root_0,property20.getTree());
EQ21=(Token)match(input,EQ,FOLLOW_EQ_in_equalityop1173);
EQ21_tree=new Equal(EQ21);
root_0=(Object)adaptor.becomeRoot(EQ21_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop1179);
value22=value();
state._fsp--;
adaptor.addChild(root_0,value22.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop1184);
property23=property();
state._fsp--;
adaptor.addChild(root_0,property23.getTree());
GT24=(Token)match(input,GT,FOLLOW_GT_in_equalityop1186);
GT24_tree=new GreaterThan(GT24);
root_0=(Object)adaptor.becomeRoot(GT24_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop1192);
value25=value();
state._fsp--;
adaptor.addChild(root_0,value25.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop1197);
property26=property();
state._fsp--;
adaptor.addChild(root_0,property26.getTree());
GTE27=(Token)match(input,GTE,FOLLOW_GTE_in_equalityop1199);
GTE27_tree=new GreaterThanEqual(GTE27);
root_0=(Object)adaptor.becomeRoot(GTE27_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop1205);
value28=value();
state._fsp--;
adaptor.addChild(root_0,value28.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
