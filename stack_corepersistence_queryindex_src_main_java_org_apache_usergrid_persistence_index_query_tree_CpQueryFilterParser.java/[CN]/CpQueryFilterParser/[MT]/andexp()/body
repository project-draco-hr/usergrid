{
  CpQueryFilterParser.andexp_return retval=new CpQueryFilterParser.andexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AND52=null;
  CpQueryFilterParser.notexp_return notexp51=null;
  CpQueryFilterParser.notexp_return notexp53=null;
  Object AND52_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_notexp_in_andexp1352);
      notexp51=notexp();
      state._fsp--;
      adaptor.addChild(root_0,notexp51.getTree());
      loop8:       do {
        int alt8=2;
switch (input.LA(1)) {
case AND:
{
            alt8=1;
          }
        break;
    }
switch (alt8) {
case 1:
{
        AND52=(Token)match(input,AND,FOLLOW_AND_in_andexp1355);
        AND52_tree=new AndOperand(AND52);
        root_0=(Object)adaptor.becomeRoot(AND52_tree,root_0);
        pushFollow(FOLLOW_notexp_in_andexp1361);
        notexp53=notexp();
        state._fsp--;
        adaptor.addChild(root_0,notexp53.getTree());
      }
    break;
default :
  break loop8;
}
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
