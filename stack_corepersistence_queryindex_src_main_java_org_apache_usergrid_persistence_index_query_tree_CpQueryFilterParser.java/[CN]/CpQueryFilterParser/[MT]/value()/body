{
  CpQueryFilterParser.value_return retval=new CpQueryFilterParser.value_return();
  retval.start=input.LT(1);
  Object root_0=null;
  CpQueryFilterParser.booleanliteral_return booleanliteral9=null;
  CpQueryFilterParser.longliteral_return longliteral10=null;
  CpQueryFilterParser.uuidliteral_return uuidliteral11=null;
  CpQueryFilterParser.stringliteral_return stringliteral12=null;
  CpQueryFilterParser.floatliteral_return floatliteral13=null;
  try {
    int alt1=5;
switch (input.LA(1)) {
case BOOLEAN:
{
        alt1=1;
      }
    break;
case LONG:
{
    alt1=2;
  }
break;
case UUID:
{
alt1=3;
}
break;
case STRING:
{
alt1=4;
}
break;
case FLOAT:
{
alt1=5;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_booleanliteral_in_value1096);
booleanliteral9=booleanliteral();
state._fsp--;
adaptor.addChild(root_0,booleanliteral9.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_longliteral_in_value1102);
longliteral10=longliteral();
state._fsp--;
adaptor.addChild(root_0,longliteral10.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_uuidliteral_in_value1108);
uuidliteral11=uuidliteral();
state._fsp--;
adaptor.addChild(root_0,uuidliteral11.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_stringliteral_in_value1114);
stringliteral12=stringliteral();
state._fsp--;
adaptor.addChild(root_0,stringliteral12.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_floatliteral_in_value1120);
floatliteral13=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral13.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
