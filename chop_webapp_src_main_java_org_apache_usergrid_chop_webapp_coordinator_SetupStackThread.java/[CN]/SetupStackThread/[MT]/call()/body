{
  String keyFile;
  LinkedList<String> launchedInstances=new LinkedList<String>();
  providerParamsDao=InjectorFactory.getInstance(ProviderParamsDao.class);
  chopUiFig=InjectorFactory.getInstance(ChopUiFig.class);
  ProviderParams providerParams=providerParamsDao.getByUser(stack.getUser().getUsername());
  AmazonFig amazonFig=InjectorFactory.getInstance(AmazonFig.class);
  amazonFig.bypass(AmazonFig.AWS_ACCESS_KEY,providerParams.getAccessKey());
  amazonFig.bypass(AmazonFig.AWS_SECRET_KEY,providerParams.getSecretKey());
  InstanceManager instanceManager=InjectorFactory.getInstance(InstanceManager.class);
  IpRuleManager ipRuleManager=InjectorFactory.getInstance(IpRuleManager.class);
  File runnerJar=CoordinatorUtils.getRunnerJar(chopUiFig.getContextPath(),stack);
  ipRuleManager.setDataCenter(stack.getDataCenter());
  ipRuleManager.applyIpRuleSet(stack.getIpRuleSet());
  for (  ICoordinatedCluster cluster : stack.getClusters()) {
    keyFile=providerParams.getKeys().get(cluster.getInstanceSpec().getKeyName());
    if (keyFile == null) {
      errorMessage="No key found with name " + cluster.getInstanceSpec().getKeyName() + " for cluster "+ cluster.getName();
      LOG.warn(errorMessage + ", aborting and terminating launched instances...");
      instanceManager.terminateInstances(launchedInstances);
      stack.setSetupState(SetupStackState.SetupFailed);
      return null;
    }
    if (!(new File(keyFile)).exists()) {
      errorMessage="Key file " + keyFile + " for cluster "+ cluster.getName()+ " not found";
      LOG.warn(errorMessage + ", aborting and terminating launched instances...");
      instanceManager.terminateInstances(launchedInstances);
      stack.setSetupState(SetupStackState.SetupFailed);
      return null;
    }
    LaunchResult result=instanceManager.launchCluster(stack,cluster,chopUiFig.getLaunchClusterTimeout());
    for (    Instance instance : result.getInstances()) {
      launchedInstances.add(instance.getId());
      cluster.add(instance);
    }
    boolean success=false;
    try {
      success=CoordinatorUtils.executeSSHCommands(cluster,runnerJar,keyFile);
    }
 catch (    Exception e) {
      LOG.warn("Error while executing SSH commands",e);
    }
    if (!success) {
      errorMessage="SSH commands have failed, will not continue";
      instanceManager.terminateInstances(launchedInstances);
      stack.setSetupState(SetupStackState.SetupFailed);
      return null;
    }
    LOG.info("Cluster {} is ready, moving on...",cluster.getName());
  }
  keyFile=providerParams.getKeys().get(providerParams.getKeyName());
  if (keyFile == null) {
    errorMessage="No key found with name " + providerParams.getKeyName() + " for runners";
    LOG.warn(errorMessage + ", aborting and terminating launched instances...");
    instanceManager.terminateInstances(launchedInstances);
    stack.setSetupState(SetupStackState.SetupFailed);
    return null;
  }
  if (!(new File(keyFile)).exists()) {
    errorMessage="Key file " + keyFile + " for runners not found";
    LOG.warn(errorMessage + ", aborting and terminating launched instances...");
    instanceManager.terminateInstances(launchedInstances);
    stack.setSetupState(SetupStackState.SetupFailed);
    return null;
  }
  BasicInstanceSpec runnerSpec=new BasicInstanceSpec();
  runnerSpec.setImageId(providerParams.getImageId());
  runnerSpec.setType(providerParams.getInstanceType());
  runnerSpec.setKeyName(providerParams.getKeyName());
  LaunchResult result=instanceManager.launchRunners(stack,runnerSpec,chopUiFig.getLaunchClusterTimeout());
  for (  Instance instance : result.getInstances()) {
    stack.addRunnerInstance(instance);
  }
  stack.setSetupState(SetupStackState.SetUp);
  return stack;
}
