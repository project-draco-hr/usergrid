{
  long now=System.currentTimeMillis();
  if (query == null) {
    query=new QueueQuery();
  }
  UUID queueId=getQueueId(queuePath);
  UUID consumerId=getConsumerId(queueId,query);
  ByteBuffer key=getQueueClientTransactionKey(queueId,consumerId);
  SliceQuery<ByteBuffer,UUID,UUID> q=createSliceQuery(ko,be,ue,ue);
  q.setColumnFamily(CONSUMER_QUEUE_TIMEOUTS.getColumnFamily());
  q.setKey(key);
  q.setColumnNames(transactionId);
  HColumn<UUID,UUID> col=q.execute().get().getColumnByName(transactionId);
  if (col == null) {
    throw new TransactionNotFoundException(String.format("No transaction with id %s exists",transactionId));
  }
  UUID origTrans=col.getName();
  UUID messageId=col.getValue();
  UUID expirationId=UUIDUtils.newTimeUUID(now + query.getTimeout());
  if (logger.isDebugEnabled()) {
    logger.debug("Writing new timeout at '{}' for message '{}'",expirationId,messageId);
  }
  Mutator<ByteBuffer> mutator=CountingMutator.createFlushingMutator(ko,be);
  mutator.addInsertion(key,CONSUMER_QUEUE_TIMEOUTS.getColumnFamily(),createColumn(expirationId,messageId,cass.createTimestamp(),ue,ue));
  mutator.execute();
  deleteTransaction(queueId,consumerId,origTrans);
  return expirationId;
}
