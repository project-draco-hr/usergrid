{
  if (notification.getCanceled() == Boolean.TRUE) {
    LOG.info("notification " + notification.getUuid() + " canceled");
    if (jobExecution != null) {
      jobExecution.killed();
    }
    return;
  }
  long startTime=System.currentTimeMillis();
  LOG.info("notification {} start queuing",notification.getUuid());
  final PathQuery<Device> pathQuery=notification.getPathQuery();
  final AtomicInteger deviceCount=new AtomicInteger();
  final AtomicInteger batchCount=new AtomicInteger();
  final int numCurrentBatchesConfig=getNumConcurrentBatches();
  final ConcurrentLinkedQueue<String> errorMessages=new ConcurrentLinkedQueue<String>();
  if (pathQuery != null) {
    final Iterator<Device> iterator=pathQuery.iterator(em);
    if (iterator instanceof ResultsIterator && ((ResultsIterator)iterator).hasPages() && jobExecution == null) {
      jobScheduler.scheduleQueueJob(notification,true);
      return;
    }
    final CountMinSketch sketch=new CountMinSketch(0.0001,.99,7364181);
    rx.Observable.create(new IteratorObservable<Entity>(iterator)).parallel(new Func1<rx.Observable<Entity>,rx.Observable<Entity>>(){
      @Override public rx.Observable<Entity> call(      rx.Observable<Entity> deviceObservable){
        return deviceObservable.map(new Func1<Entity,Entity>(){
          @Override public Entity call(          Entity entity){
            try {
              List<EntityRef> devicesRef=getDevices(entity);
              String queueName=getJobQueueName(notification);
              boolean maySchedule=false;
              for (              EntityRef deviceRef : devicesRef) {
                long hash=MurmurHash.hash(deviceRef.getUuid());
                if (sketch.estimateCount(hash) > 0) {
                  LOG.debug("Maybe Found duplicate device: {}",deviceRef.getUuid());
                  continue;
                }
 else {
                  sketch.add(hash,1);
                }
                maySchedule|=deviceCount.incrementAndGet() % BATCH_SIZE == 0;
                QueueMessage message=new QueueMessage(deviceRef);
                qm.postToQueue(queueName,message);
                if (notification.getQueued() == null) {
                  notification.setQueued(System.currentTimeMillis());
                  em.update(notification);
                }
              }
              if (maySchedule && numCurrentBatchesConfig >= batchCount.incrementAndGet()) {
                processBatchAndReschedule(notification,null);
              }
              if (devicesRef.size() <= 0) {
                errorMessages.add("Could not find devices for entity: " + entity.getUuid());
              }
            }
 catch (            Exception deviceLoopException) {
              LOG.error("Failed to add devices",deviceLoopException);
              errorMessages.add("Failed to add devices for entity: " + entity.getUuid() + " error:"+ deviceLoopException);
            }
            return entity;
          }
        }
);
      }
    }
,Schedulers.io()).toBlocking().lastOrDefault(null);
  }
  batchCount.set(Math.min(numCurrentBatchesConfig,batchCount.get()));
  Map<String,Object> properties=new HashMap<String,Object>(2);
  properties.put("queued",notification.getQueued());
  properties.put("state",notification.getState());
  if (deviceCount.get() > 0) {
    if (batchCount.get() <= 0) {
      processBatchAndReschedule(notification,jobExecution);
    }
  }
 else {
    if (!IS_TEST) {
      finishedBatch(notification,0,0);
      errorMessages.add("No devices for notification " + notification.getUuid());
    }
  }
  if (!IS_TEST && errorMessages.size() > 0) {
    properties.put("deliveryErrors",errorMessages.toArray());
    if (notification.getErrorMessage() == null) {
      notification.setErrorMessage("There was a problem delivering all of your notifications. See deliveryErrors in properties");
    }
  }
  notification.addProperties(properties);
  em.update(notification);
  if (LOG.isInfoEnabled()) {
    long elapsed=notification.getQueued() != null ? notification.getQueued() - startTime : 0;
    StringBuilder sb=new StringBuilder();
    sb.append("notification ").append(notification.getUuid());
    sb.append(" done queuing to ").append(deviceCount);
    sb.append(" devices in ").append(elapsed).append(" ms");
    LOG.info(sb.toString());
  }
}
