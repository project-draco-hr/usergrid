{
  UUID id=UUIDUtils.newTimeUUID();
  String name="name1" + id;
  String email="email1" + id + "@usergrid.org";
  ApiResponse response=client.createUser(email,name,email,"password");
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  UUID userId=response.getEntities().get(0).getUuid();
  Entity role=new Entity("role");
  role.setProperty("name","connectionQuerybyEmail1");
  response=client.createEntity(role);
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  UUID roleId1=response.getEntities().get(0).getUuid();
  Map<String,String> perms=new HashMap<String,String>();
  perms.put("permission","get:/stuff/**");
  String path=String.format("/test-organization/test-app/roles/%s/permissions",roleId1);
  JsonNode node=resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,perms);
  role=new Entity("role");
  role.setProperty("name","connectionQuerybyEmail2");
  response=client.createEntity(role);
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  UUID roleId2=response.getEntities().get(0).getUuid();
  perms=new HashMap<String,String>();
  perms.put("permission","get:/stuff/**");
  path=String.format("/test-organization/test-app/roles/%s/permissions",roleId2);
  node=resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,perms);
  path=String.format("/test-organization/test-app/roles/%s/users/%s",roleId1,userId);
  node=resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/roles/%s/users/%s",roleId2,userId);
  node=resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/roles/%s/users",roleId2);
  node=resource().path(path).queryParam("access_token",access_token).queryParam("ql","select%20*%20where%20username%20=%20'" + email + "'").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/roles/%s/users",roleId1);
  node=resource().path(path).queryParam("access_token",access_token).queryParam("ql","select%20*%20where%20username%20=%20'" + email + "'").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/roles/%s",roleId1);
  node=resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(JsonNode.class);
  path=String.format("/test-organization/test-app/roles/%s/users",roleId1);
  try {
    node=resource().path(path).queryParam("access_token",access_token).queryParam("ql","select%20*%20where%20username%20=%20'" + email + "'").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  }
 catch (  UniformInterfaceException e) {
    assertEquals(Status.NOT_FOUND,e.getResponse().getClientResponseStatus());
  }
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/roles/%s/users",roleId2);
  node=resource().path(path).queryParam("access_token",access_token).queryParam("ql","select%20*%20where%20username%20=%20'" + email + "'").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals(userId.toString(),getEntity(node,0).get("uuid").asText());
}
