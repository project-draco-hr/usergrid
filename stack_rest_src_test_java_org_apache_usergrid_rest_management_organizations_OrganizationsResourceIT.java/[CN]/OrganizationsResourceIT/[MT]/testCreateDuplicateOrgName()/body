{
  Map<String,String> payload=hashMap("email","create-duplicate-org@mockserver.com").map("password","password").map("organization","create-duplicate-orgname-org");
  JsonNode node=mapper.readTree(resource().path("/management/organizations").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  logNode(node);
  assertNotNull(node);
  payload=hashMap("email","create-duplicate-org2@mockserver.com").map("username","create-dupe-orgname2").map("password","password").map("organization","create-duplicate-orgname-org");
  try {
    node=mapper.readTree(resource().path("/management/organizations").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  }
 catch (  Exception ex) {
  }
  payload=hashMap("grant_type","password").map("username","create-dupe-orgname2").map("password","password");
  try {
    node=mapper.readTree(resource().path("/management/token").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
    fail("Should not have created user");
  }
 catch (  Exception ex) {
  }
  logNode(node);
  payload=hashMap("username","create-duplicate-org@mockserver.com").map("grant_type","password").map("password","password");
  node=mapper.readTree(resource().path("/management/token").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  logNode(node);
}
