{
  Map<String,String> payload=hashMap("email","duplicate-email@mockserver.com").map("password","password").map("organization","very-nice-org");
  JsonNode node=resource().path("/management/organizations").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  logNode(node);
  assertNotNull(node);
  payload=hashMap("email","duplicate-email@mockserver.com").map("username","anotheruser").map("password","password").map("organization","not-so-nice-org");
  boolean failed=false;
  try {
    node=resource().path("/management/organizations").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  }
 catch (  UniformInterfaceException ex) {
    Assert.assertEquals(400,ex.getResponse().getStatus());
    JsonNode errorJson=ex.getResponse().getEntity(JsonNode.class);
    Assert.assertEquals("duplicate_unique_property_exists",errorJson.get("error").asText());
    failed=true;
  }
  Assert.assertTrue(failed);
  payload=hashMap("grant_type","password").map("username","create-dupe-orgname2").map("password","password");
  try {
    node=resource().path("/management/token").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
    fail("Should not have created user");
  }
 catch (  Exception ex) {
  }
  logNode(node);
  payload=hashMap("username","duplicate-email@mockserver.com").map("grant_type","password").map("password","password");
  node=resource().path("/management/token").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  logNode(node);
}
