{
  final MarkedEdge edge=delete.getData();
  final ApplicationScope scope=delete.getApplicationScope();
  final long maxTimestamp=edge.getTimestamp();
  return edgeDeleteRepair.repair(scope,edge,delete.getTimestamp()).flatMap(new Func1<MarkedEdge,Observable<Integer>>(){
    @Override public Observable<Integer> call(    final MarkedEdge markedEdge){
      Observable<Integer> sourceDelete=edgeMetaRepair.repairSources(scope,edge.getSourceNode(),edge.getType(),maxTimestamp);
      Observable<Integer> targetDelete=edgeMetaRepair.repairTargets(scope,edge.getTargetNode(),edge.getType(),maxTimestamp);
      return Observable.zip(sourceDelete,targetDelete,new Func2<Integer,Integer,Integer>(){
        @Override public Integer call(        final Integer sourceCount,        final Integer targetCount){
          return sourceCount + targetCount;
        }
      }
);
    }
  }
).map(new Func1<Integer,EdgeDeleteEvent>(){
    @Override public EdgeDeleteEvent call(    final Integer integer){
      return delete;
    }
  }
);
}
