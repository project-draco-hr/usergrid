{
  final Id id=createId("test");
  final long shard=1000l;
  final String[] types={"type","subtype"};
  final long toWrite=1000l;
  final int workerCount=2;
  final int iterations=1000;
  ExecutorService executors=Executors.newFixedThreadPool(workerCount);
  Stack<Future<Void>> futures=new Stack<Future<Void>>();
  for (int i=0; i < workerCount; i++) {
    final Future<Void> future=executors.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        for (int i=0; i < iterations; i++) {
          edgeShardCounterSerialization.writeMetaDataLog(scope,id,shard,toWrite,types).execute();
        }
        return null;
      }
    }
);
    futures.push(future);
  }
  for (  Future<Void> future : futures) {
    future.get();
  }
  final long count=edgeShardCounterSerialization.getCount(scope,id,shard,types);
  final long expected=toWrite * iterations * workerCount;
  assertEquals("Correct amount returned",expected,count);
}
