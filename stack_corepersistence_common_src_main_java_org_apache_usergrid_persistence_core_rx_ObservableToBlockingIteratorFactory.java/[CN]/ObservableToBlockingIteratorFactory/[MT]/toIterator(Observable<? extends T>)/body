{
  final BlockingQueue<Notification<? extends T>> notifications=new SynchronousQueue<>(true);
  final Subscription subscription=source.materialize().subscribe(new Subscriber<Notification<? extends T>>(){
    @Override public void onCompleted(){
    }
    @Override public void onError(    Throwable e){
      boolean offerFinished=false;
      try {
        do {
          offerFinished=notifications.offer(Notification.<T>createOnError(e),1000,TimeUnit.MILLISECONDS);
        }
 while (!offerFinished && !this.isUnsubscribed());
      }
 catch (      InterruptedException t) {
      }
    }
    @Override public void onNext(    Notification<? extends T> args){
      boolean offerFinished=false;
      try {
        do {
          offerFinished=notifications.offer(args,1000,TimeUnit.MILLISECONDS);
        }
 while (!offerFinished && !this.isUnsubscribed());
      }
 catch (      InterruptedException t) {
      }
    }
    @Override protected void finalize() throws Throwable {
      super.finalize();
    }
  }
);
  return new ObservableBlockingIterator<T>(notifications,subscription);
}
