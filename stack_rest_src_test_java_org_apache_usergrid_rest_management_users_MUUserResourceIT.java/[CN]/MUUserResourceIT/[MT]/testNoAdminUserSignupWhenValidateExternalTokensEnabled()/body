{
  String suToken=superAdminToken();
  Map<String,String> props=new HashMap<String,String>();
  props.put(USERGRID_CENTRAL_URL,getBaseURI().toURL().toExternalForm());
  resource().path("/testproperties").queryParam("access_token",suToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(props);
  try {
    final String rand=RandomStringUtils.randomAlphanumeric(10);
    MultivaluedMap<String,String> payload=new MultivaluedMapImpl(){
{
        putSingle("username","user_" + rand);
        putSingle("name","Joe Userperson");
        putSingle("email","joe_" + rand + "@example.com");
        putSingle("password","wigglestone");
      }
    }
;
    JsonNode node=resource().path("/management/users").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_FORM_URLENCODED).post(JsonNode.class,payload);
    fail("Create admin user should fail");
  }
 catch (  Exception actual) {
    assertTrue(actual instanceof UniformInterfaceException);
    UniformInterfaceException uie=(UniformInterfaceException)actual;
    assertEquals(400,uie.getResponse().getStatus());
    String errorMsg=uie.getResponse().getEntity(JsonNode.class).get("error_description").toString();
    assertTrue(errorMsg.contains("Admin Users must signup via"));
  }
  try {
    final String rand=RandomStringUtils.randomAlphanumeric(10);
    Map<String,String> payload=new HashMap<String,String>(){
{
        put("organization","org_" + rand);
        put("username","user_" + rand);
        put("name","Joe Userperson");
        put("email","joe_" + rand + "@example.com");
        put("password","wigglestone");
      }
    }
;
    JsonNode node=resource().path("/management/organizations/").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(JsonNode.class,payload);
    fail("Create org and admin user should fail");
  }
 catch (  Exception actual) {
    assertTrue(actual instanceof UniformInterfaceException);
    UniformInterfaceException uie=(UniformInterfaceException)actual;
    assertEquals(400,uie.getResponse().getStatus());
    String errorMsg=uie.getResponse().getEntity(JsonNode.class).get("error_description").toString();
    assertTrue(errorMsg.contains("Organization / Admin Users must be created via"));
  }
  props.put(USERGRID_CENTRAL_URL,"");
  resource().path("/testproperties").queryParam("access_token",suToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(props);
}
