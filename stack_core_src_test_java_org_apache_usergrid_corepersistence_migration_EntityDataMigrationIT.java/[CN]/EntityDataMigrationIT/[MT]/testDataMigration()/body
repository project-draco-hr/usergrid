{
  assertEquals("version 3 expected",3,entityDataMigration.getVersion());
  assertEquals("Previous version expected",2,dataMigrationManager.getCurrentVersion());
  final EntityManager newAppEm=app.getEntityManager();
  final String type1="type1thing";
  final String type2="type2thing";
  final int size=10;
  final Set<Id> type1Identities=EntityWriteHelper.createTypes(newAppEm,type1,size);
  final Set<Id> type2Identities=EntityWriteHelper.createTypes(newAppEm,type2,size);
  final Set<Id> createdEntityIds=new HashSet<>();
  createdEntityIds.addAll(type1Identities);
  createdEntityIds.addAll(type2Identities);
  final TestProgressObserver progressObserver=new TestProgressObserver();
  final Set<MvccEntity> savedEntities=new HashSet<>(10000);
  final Set<Id> entityIds=new HashSet<>(10000);
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup<CollectionScope>>(){
    @Override public void call(    final ApplicationEntityGroup<CollectionScope> entity){
      for (      final EntityIdScope id : entity.entityIds) {
        CollectionScope scope=CpNamingUtils.getCollectionScopeNameFromEntityType(entity.applicationScope.getApplication(),id.getId().getType());
        final Iterator<MvccEntity> versions=v1Strategy.loadDescendingHistory(scope,id.getId(),UUIDGenerator.newTimeUUID(),100);
        while (versions.hasNext()) {
          final MvccEntity mvccEntity=versions.next();
          savedEntities.add(mvccEntity);
          createdEntityIds.remove(mvccEntity.getId());
          entityIds.add(id.getId());
        }
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("Newly saved entities encountered",0,createdEntityIds.size());
  assertTrue("Saved new entities",savedEntities.size() > 0);
  rx.Observable<ApplicationEntityGroup> oRx=allEntitiesInSystemObservable.getAllEntitiesInSystem(applicationObservable.getAllApplicationScopes(),1000);
  entityDataMigration.migrate(oRx,progressObserver).toBlocking().last();
  assertFalse("Progress observer should not have failed",progressObserver.getFailed());
  assertTrue("Progress observer should have update messages",progressObserver.getUpdates().size() > 0);
  migrationInfoSerialization.setStatusCode(DataMigrationManagerImpl.StatusCode.COMPLETE.status);
  migrationInfoSerialization.setVersion(entityDataMigration.getVersion());
  dataMigrationManager.invalidate();
  assertEquals("New version saved, and we should get new implementation",entityDataMigration.getVersion(),dataMigrationManager.getCurrentVersion());
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup<CollectionScope>>(){
    @Override public void call(    final ApplicationEntityGroup<CollectionScope> entity){
      for (      final EntityIdScope<CollectionScope> id : entity.entityIds) {
        CollectionScope scope=CpNamingUtils.getCollectionScopeNameFromEntityType(entity.applicationScope.getApplication(),id.getId().getType());
        final Iterator<MvccEntity> versions=v2Strategy.loadDescendingHistory(scope,id.getId(),UUIDGenerator.newTimeUUID(),100);
        while (versions.hasNext()) {
          final MvccEntity mvccEntity=versions.next();
          savedEntities.remove(mvccEntity);
        }
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("All entities migrated",0,savedEntities.size());
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup<CollectionScope>>(){
    @Override public void call(    final ApplicationEntityGroup<CollectionScope> entity){
      final EntityManager em=emf.getEntityManager(entity.applicationScope.getApplication().getUuid());
      for (      final EntityIdScope<CollectionScope> id : entity.entityIds) {
        try {
          final Entity emEntity=em.get(SimpleEntityRef.fromId(id.getId()));
          if (emEntity != null) {
            entityIds.remove(id.getId());
          }
        }
 catch (        Exception e) {
          throw new RuntimeException("Error loading entity",e);
        }
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("All entities could be loaded by the entity manager",0,entityIds.size());
}
