{
  this.entityCollectionManagerFactory=entityCollectionManagerFactory;
  this.indexLocationStrategyFactory=indexLocationStrategyFactory;
  this.entityIndexFactory=entityIndexFactory;
  this.eventBuilder=eventBuilder;
  this.rxTaskScheduler=rxTaskScheduler;
  this.queueScope=new QueueScopeImpl(QUEUE_NAME,QueueScope.RegionImplementation.ALL);
  this.queue=queueManagerFactory.getQueueManager(queueScope);
  this.indexProcessorFig=indexProcessorFig;
  this.writeTimer=metricsFactory.getTimer(AmazonAsyncEventService.class,"async_event.write");
  this.readTimer=metricsFactory.getTimer(AmazonAsyncEventService.class,"async_event.read");
  this.ackTimer=metricsFactory.getTimer(AmazonAsyncEventService.class,"async_event.ack");
  this.indexErrorCounter=metricsFactory.getCounter(AmazonAsyncEventService.class,"async_event.error");
  this.messageCycle=metricsFactory.getHistogram(AmazonAsyncEventService.class,"async_event.message_cycle");
  metricsFactory.addGauge(AmazonAsyncEventService.class,"async-event.inflight",new Gauge<Long>(){
    @Override public Long getValue(){
      return inFlight.longValue();
    }
  }
);
  start();
}
