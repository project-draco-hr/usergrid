{
  logger.info("Started rebuildIndex()");
  String rand=RandomStringUtils.randomAlphanumeric(5);
  final UUID appId=setup.createApplication("org_" + rand,"app_" + rand);
  final EntityManager em=setup.getEmf().getEntityManager(appId);
  final ReIndexService reIndexService=setup.getInjector().getInstance(ReIndexService.class);
  Map<String,Object> entityData=new HashMap<String,Object>(){
{
      put("key1",1000);
    }
  }
;
  final Entity firstEntity=em.create("thing",entityData);
  final Entity secondEntity=em.create("thing",entityData);
  app.refreshIndex();
  logger.debug("Read the data");
  final String collectionName="things";
  countEntities(em,collectionName,2);
  logger.debug("Deleting app index");
  deleteIndex(em.getApplicationId());
  if (logger.isDebugEnabled()) {
    logger.debug("Reading data, should fail this time ");
  }
  countEntities(em,collectionName,0);
  final long firstUpdatedTimestamp=firstEntity.getModified();
  final long secondUpdatedTimestamp=secondEntity.getModified();
  assertTrue("second should be updated after second",firstUpdatedTimestamp < secondUpdatedTimestamp);
  try {
    final long updatedTimestamp=secondEntity.getModified();
    if (logger.isDebugEnabled()) {
      logger.debug("Preparing to rebuild all indexes with timestamp {}",updatedTimestamp);
    }
    final ReIndexRequestBuilder builder=reIndexService.getBuilder().withApplicationId(em.getApplicationId()).withStartTimestamp(updatedTimestamp);
    ReIndexService.ReIndexStatus status=reIndexService.rebuildIndex(builder);
    assertNotNull(status.getJobId(),"JobId is present");
    logger.info("Rebuilt index");
    waitForRebuild(status,reIndexService);
    logger.info("Rebuilt index");
    app.refreshIndex();
  }
 catch (  Exception ex) {
    logger.error("Error rebuilding index",ex);
    fail();
  }
  Thread.sleep(2000);
  countEntities(em,collectionName,1);
}
