{
  logger.info("Started rebuildIndex()");
  String rand=RandomStringUtils.randomAlphanumeric(5);
  final UUID appId=setup.createApplication("org_" + rand,"app_" + rand);
  final EntityManager em=setup.getEmf().getEntityManager(appId);
  final ReIndexService reIndexService=setup.getInjector().getInstance(ReIndexService.class);
  Map<String,Object> cat1map=new HashMap<String,Object>(){
{
      put("name","enzo");
      put("color","grey");
      put("location",new LinkedHashMap<String,Object>(){
{
          put("latitude",-35.746369);
          put("longitude",150.952183);
        }
      }
);
    }
  }
;
  final double lat=-34.746369;
  final double lon=152.952183;
  Map<String,Object> cat2map=new HashMap<String,Object>(){
{
      put("name","marquee");
      put("color","grey");
      put("location",new LinkedHashMap<String,Object>(){
{
          put("latitude",lat);
          put("longitude",lon);
        }
      }
);
    }
  }
;
  Map<String,Object> cat3map=new HashMap<String,Object>(){
{
      put("name","bertha");
      put("color","grey");
      put("location",new LinkedHashMap<String,Object>(){
{
          put("latitude",-33.746369);
          put("longitude",150.952183);
        }
      }
);
    }
  }
;
  Entity cat1=em.create("cat",cat1map);
  Entity cat2=em.create("cat",cat2map);
  Entity cat3=em.create("cat",cat3map);
  logger.info("Created {} entities",ENTITIES_TO_INDEX);
  app.refreshIndex();
  logger.debug("Read the data");
  final String collectionName="cats";
  Query q=Query.fromQL("select * where color='grey'").withLimit(1000);
  Results results=em.searchCollectionConsistent(em.getApplicationRef(),collectionName,q,3);
  assertEquals(3,results.size());
  logger.debug("Deleting app index");
  deleteIndex(em.getApplicationId());
  logger.debug("Reading data, should fail this time ");
  results=em.searchCollectionConsistent(em.getApplicationRef(),collectionName,q,0);
  assertEquals(results.size(),0);
  logger.debug("Preparing to rebuild all indexes");
  try {
    final ReIndexRequestBuilder builder=reIndexService.getBuilder().withApplicationId(em.getApplicationId());
    ReIndexService.ReIndexStatus status=reIndexService.rebuildIndex(builder);
    assertNotNull(status.getJobId(),"JobId is present");
    logger.info("Rebuilt index");
    waitForRebuild(status,reIndexService);
    logger.info("Rebuilt index");
    app.refreshIndex();
  }
 catch (  Exception ex) {
    logger.error("Error rebuilding index",ex);
    fail();
  }
  Thread.sleep(2000);
  results=em.searchCollectionConsistent(em.getApplicationRef(),collectionName,q,3);
  assertEquals(results.size(),3);
  q=Query.fromQL("select * where location within 100 of " + lat + ", "+ lon);
  results=em.searchCollectionConsistent(em.getApplicationRef(),collectionName,q,1);
  assertEquals(results.size(),1);
}
