{
  Set<Character> block=findCharactersInUnicodeBlock(unicodeBlock);
  final int totalCount=100000;
  final int delta=block.size();
  final int lengthToTest=totalCount / delta;
  final Set<HashEdge> hashed=new HashSet(totalCount);
  logger.info("Testing hash collision on unicode block {}",unicodeBlock);
  final Character first=block.iterator().next();
  HashEdge edgeHash;
  int count=0;
  StringBuilder builder=new StringBuilder();
  for (int index=0; index < lengthToTest; index++) {
    builder.append(first);
    for (    Character currentChar : block) {
      builder.setCharAt(index,currentChar);
      final String sourceString=builder.toString();
      edgeHash=new HashEdge(EdgeHasher.createEdgeHash(sourceString));
      count++;
      if (hashed.contains(edgeHash)) {
        fail(String.format("Expected hash of '%s' to be unique, but hash of '%s' already exists in unicode block " + "'%s'.",sourceString,edgeHash,unicodeBlock));
      }
      hashed.add(edgeHash);
    }
  }
  assertEquals("Check the sizes are equal",count,hashed.size());
  hashed.clear();
}
