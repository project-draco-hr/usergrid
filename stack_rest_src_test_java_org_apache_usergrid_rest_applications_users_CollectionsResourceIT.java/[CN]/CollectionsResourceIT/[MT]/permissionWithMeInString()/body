{
  createUser("sumeet.agarwal@usergrid.com","sumeet.agarwal@usergrid.com","secret","Sumeet Agarwal");
  String token=userToken("sumeet.agarwal@usergrid.com","secret");
  Map<String,String> data=new HashMap<String,String>();
  data.put("permission","get,post,put,delete:/users/sumeet.agarwal@usergrid.com/**");
  String path="/test-organization/test-app/users/sumeet.agarwal@usergrid.com/permissions";
  JsonNode posted=mapper.readTree(resource().path(path).queryParam("access_token",token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,data));
  data=new HashMap<String,String>();
  data.put("name","profile-sumeet");
  data.put("firstname","sumeet");
  data.put("lastname","agarwal");
  data.put("mobile","122");
  posted=mapper.readTree(resource().path("/test-organization/test-app/nestprofiles").queryParam("access_token",token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,data));
  JsonNode response=mapper.readTree(resource().path("/test-organization/test-app/nestprofiles").queryParam("access_token",token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  assertNotNull(response.get("count"));
}
