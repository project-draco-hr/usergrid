{
  startSpring();
  logger.info("Starting entity cleanup");
  Results results=null;
  List<UUID> ids=null;
  Query query=new Query();
  query.setLimit(PAGE_SIZE);
  String lastCursor=null;
  for (  Entry<String,UUID> app : emf.getApplications().entrySet()) {
    logger.info("Starting cleanup for app {}",app.getKey());
    UUID applicationId=app.getValue();
    EntityManagerImpl em=(EntityManagerImpl)emf.getEntityManager(applicationId);
    CassandraService cass=em.getCass();
    IndexBucketLocator indexBucketLocator=em.getIndexBucketLocator();
    UUID timestampUuid=newTimeUUID();
    long timestamp=getTimestampInMicros(timestampUuid);
    Set<String> collectionNames=em.getApplicationCollections();
    for (    String collectionName : collectionNames) {
      lastCursor=null;
      do {
        query.setCursor(lastCursor);
        ids=cass.getIdList(cass.getApplicationKeyspace(applicationId),key(applicationId,DICTIONARY_COLLECTIONS,collectionName),query.getStartResult(),null,query.getLimit() + 1,false,indexBucketLocator,applicationId,collectionName);
        CollectionInfo collection=getDefaultSchema().getCollection("application",collectionName);
        Results tempResults=Results.fromIdList(ids,collection.getType());
        if (tempResults != null) {
          tempResults.setQuery(query);
        }
        results=em.loadEntities(tempResults,query.getResultsLevel(),query.getLimit());
        lastCursor=results.getCursor();
        if (ids.size() == results.size()) {
          continue;
        }
        for (        Entity returned : results.getEntities()) {
          ids.remove(returned.getUuid());
        }
        logger.info("Cleaning up {} orphaned entities for app {}",ids.size(),app.getValue());
        Keyspace ko=cass.getApplicationKeyspace(applicationId);
        Mutator<ByteBuffer> m=createMutator(ko,be);
        for (        UUID id : ids) {
          Object collections_key=key(applicationId,Schema.DICTIONARY_COLLECTIONS,collectionName,indexBucketLocator.getBucket(applicationId,IndexType.COLLECTION,id,collectionName));
          addDeleteToMutator(m,ENTITY_ID_SETS,collections_key,id,timestamp);
          logger.info("Deleting entity with id '{}' from collection '{}'",id,collectionName);
        }
        m.execute();
      }
 while (ids.size() == PAGE_SIZE);
    }
  }
}
