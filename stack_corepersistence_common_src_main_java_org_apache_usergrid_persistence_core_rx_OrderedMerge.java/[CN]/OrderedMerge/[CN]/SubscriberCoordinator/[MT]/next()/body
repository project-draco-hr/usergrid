{
synchronized (this) {
    while (!toProduce.isEmpty()) {
      InnerObserver<T> inner=toProduce.pop();
      if (inner.drained) {
        continue;
      }
      final T nextKey=inner.peek();
      if (nextKey == null) {
        toProduce.push(inner);
        return;
      }
      nextValues.put(nextKey,inner);
    }
    while (!nextValues.isEmpty()) {
      final T lowestKey=nextValues.keySet().first();
      NavigableSet<InnerObserver<T>> nextObservers=nextValues.get(lowestKey);
      while (!nextObservers.isEmpty()) {
        final InnerObserver<T> inner=nextObservers.pollFirst();
        nextValues.remove(lowestKey,inner);
        final T value=inner.pop();
        log.trace("Emitting value {}",value);
        subscriber.onNext(value);
        final T nextKey=inner.peek();
        if (nextKey == null) {
          if (inner.drained) {
            continue;
          }
          toProduce.push(inner);
          return;
        }
        nextValues.put(nextKey,inner);
      }
    }
  }
}
