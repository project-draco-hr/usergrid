{
  if (!populateTreeMap())   return;
  int currentVersion=migrationInfoSerialization.getCurrentVersion();
  if (currentVersion <= 0) {
    currentVersion=resetToHighestVersion();
  }
  LOG.info("Saved schema version is {}, max migration version is {}",currentVersion,migrationTreeMap.lastKey());
  final NavigableMap<Integer,DataMigration> migrationsToRun=migrationTreeMap.tailMap(currentVersion,false);
  final CassandraProgressObserver observer=new CassandraProgressObserver();
  Observable<DataMigration> migrations=Observable.from(migrationsToRun.values()).subscribeOn(Schedulers.io());
  Observable entityMigrations=migrations.filter(new Func1<DataMigration,Boolean>(){
    @Override public Boolean call(    DataMigration dataMigration){
      return dataMigration.getType() == DataMigration.MigrationType.Entities;
    }
  }
).flatMap(new Func1<DataMigration,Observable<ApplicationEntityGroup>>(){
    @Override public Observable<ApplicationEntityGroup> call(    final DataMigration dataMigration){
      return allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup>(){
        @Override public void call(        ApplicationEntityGroup entityGroup){
          runMigration(dataMigration,observer,entityGroup);
        }
      }
);
    }
  }
);
  Observable otherMigrations=migrations.filter(new Func1<DataMigration,Boolean>(){
    @Override public Boolean call(    DataMigration dataMigration){
      return dataMigration.getType() != DataMigration.MigrationType.Entities;
    }
  }
).flatMap(new Func1<DataMigration,Observable<?>>(){
    @Override public Observable call(    final DataMigration dataMigration){
      return applicationObservable.getAllApplicationIds().doOnNext(new Action1<Id>(){
        @Override public void call(        Id id){
          ApplicationScope scope=new ApplicationScopeImpl(id);
          runMigration(dataMigration,observer,new ApplicationEntityGroup(scope,null));
        }
      }
);
    }
  }
);
  try {
    Observable.merge(entityMigrations,otherMigrations).toBlocking().lastOrDefault(null);
    migrationInfoSerialization.setStatusCode(StatusCode.COMPLETE.status);
  }
 catch (  Exception e) {
    LOG.error("Migration Failed");
  }
}
