def main():
    args = parse_args()
    queue_name = args.get('queue_name')
    print ('queue_name=%s' % queue_name)
    start_time = datetime.datetime.utcnow()
    first_start_time = start_time
    print ('first start: %s' % first_start_time)
    with open(args.get('config'), 'r') as f:
        config = json.load(f)
    sqs_config = config.get('sqs')
    last_time = datetime.datetime.utcnow()
    sqs_conn = boto.sqs.connect_to_region(**sqs_config)
    queue = sqs_conn.get_queue(queue_name)
    last_size = queue.count()
    first_size = last_size
    print ('Starting Size: %s' % last_size)
    sleep = 10
    time.sleep(sleep)
    rate_sum = 0
    rate_count = 0
    while True:
        size = queue.count()
        time_stop = datetime.datetime.utcnow()
        time_delta = total_seconds((time_stop - last_time))
        agg_time_delta = total_seconds((time_stop - first_start_time))
        agg_size_delta = (first_size - size)
        agg_messages_rate = ((1.0 * agg_size_delta) / agg_time_delta)
        size_delta = (last_size - size)
        messages_rate = ((1.0 * size_delta) / time_delta)
        rate_sum += messages_rate
        rate_count += 1
        print ('%s | %s | Size: %s | Processed: %s | Last: %s | Avg: %s | Count: %s | agg rate: %s | Remaining: %s' % (datetime.datetime.utcnow(), queue_name, size, size_delta, round(messages_rate, 2), round((rate_sum / rate_count), 2), rate_count, round(agg_messages_rate, 2), get_time_remaining(size, agg_messages_rate)))
        last_size = size
        last_time = time_stop
        time.sleep(sleep)
