{
  User user=new User("shawn","shawn","shawn@email.com","aliensquirrel");
  this.app().collection("users").post(user);
  Token token=this.app().token().post(new Token("shawn","aliensquirrel"));
  Map<String,String> data=hashMap("name","bar");
  String json=JsonUtils.mapToFormattedJsonString(data);
  DefaultHttpClient client=new DefaultHttpClient();
  HttpHost host=new HttpHost(super.getBaseURI().getHost(),super.getBaseURI().getPort());
  HttpPost post=new HttpPost(String.format("/%s/%s/games",this.clientSetup.getOrganization().getName(),this.clientSetup.getAppName()));
  post.setEntity(new StringEntity(json));
  post.setHeader(HttpHeaders.AUTHORIZATION,"Bearer " + token.getAccessToken());
  post.setHeader(HttpHeaders.ACCEPT,MediaType.APPLICATION_JSON);
  post.setHeader(HttpHeaders.CONTENT_TYPE,"*/*");
  HttpResponse rsp=client.execute(host,post);
  Invocation.Builder builder=app().collection("games").getTarget().queryParam("access_token",this.getAdminToken().getAccessToken()).request();
  Response clientResponse=builder.post(javax.ws.rs.client.Entity.json(new HashMap(){
{
      put("name","bar2");
    }
  }
),Response.class);
  assertEquals(200,clientResponse.getStatus());
  MultivaluedMap<String,Object> headers=clientResponse.getHeaders();
  List contentType=headers.get("Content-Type");
  assertEquals(1,contentType.size());
  assertEquals(MediaType.APPLICATION_JSON,contentType.get(0));
  builder=app().collection("games").getTarget().queryParam("access_token",this.getAdminToken().getAccessToken()).request();
  HttpGet get=new HttpGet(String.format("/%s/%s/games",this.clientSetup.getOrganization().getName(),this.clientSetup.getAppName()));
  get.setHeader(HttpHeaders.AUTHORIZATION,"Bearer " + token.getAccessToken());
  clientResponse=builder.get(Response.class);
  assertEquals(200,clientResponse.getStatus());
  headers=clientResponse.getHeaders();
  contentType=headers.get("Content-Type");
  assertEquals(1,contentType.size());
  assertEquals(MediaType.APPLICATION_JSON,contentType.get(0));
}
