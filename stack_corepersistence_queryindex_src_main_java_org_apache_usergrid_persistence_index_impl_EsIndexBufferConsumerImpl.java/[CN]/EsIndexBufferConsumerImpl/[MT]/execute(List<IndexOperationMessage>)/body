{
  if (operationMessages == null || operationMessages.size() == 0) {
    return;
  }
  Observable<ShardReplicationOperationRequestBuilder> flattenMessages=Observable.from(operationMessages).subscribeOn(Schedulers.io()).flatMap(new Func1<IndexOperationMessage,Observable<ShardReplicationOperationRequestBuilder>>(){
    @Override public Observable<ShardReplicationOperationRequestBuilder> call(    IndexOperationMessage operationMessage){
      return Observable.from(operationMessage.getBuilder()).map(new Func1<ShardReplicationOperationRequestBuilder,ShardReplicationOperationRequestBuilder>(){
        @Override public ShardReplicationOperationRequestBuilder call(        ShardReplicationOperationRequestBuilder builder){
          return builder;
        }
      }
);
    }
  }
);
  flattenMessages.buffer(config.getIndexBatchSize()).doOnNext(new Action1<List<ShardReplicationOperationRequestBuilder>>(){
    @Override public void call(    List<ShardReplicationOperationRequestBuilder> builders){
      final BulkRequestBuilder bulkRequest=initRequest();
      for (      ShardReplicationOperationRequestBuilder builder : builders) {
        indexSizeCounter.dec();
        if (builder instanceof IndexRequestBuilder) {
          bulkRequest.add((IndexRequestBuilder)builder);
        }
        if (builder instanceof DeleteRequestBuilder) {
          bulkRequest.add((DeleteRequestBuilder)builder);
        }
      }
      sendRequest(bulkRequest);
    }
  }
).toBlocking().lastOrDefault(null);
  Observable.from(operationMessages).subscribeOn(Schedulers.io()).doOnNext(new Action1<IndexOperationMessage>(){
    @Override public void call(    IndexOperationMessage operationMessage){
      operationMessage.getFuture().done();
    }
  }
).toBlocking().lastOrDefault(null);
}
