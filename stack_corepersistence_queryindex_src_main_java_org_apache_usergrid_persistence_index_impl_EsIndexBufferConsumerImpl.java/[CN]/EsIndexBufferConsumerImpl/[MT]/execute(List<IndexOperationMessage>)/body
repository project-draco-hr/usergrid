{
  if (operationMessages == null || operationMessages.size() == 0) {
    return;
  }
  Observable<IndexOperationMessage> flattenMessages=Observable.from(operationMessages);
  flattenMessages.flatMap(new Func1<IndexOperationMessage,Observable<BatchRequest>>(){
    @Override public Observable<BatchRequest> call(    final IndexOperationMessage indexOperationMessage){
      final Observable<IndexRequest> index=Observable.from(indexOperationMessage.getIndexRequests());
      final Observable<DeIndexRequest> deIndex=Observable.from(indexOperationMessage.getDeIndexRequests());
      return Observable.merge(index,deIndex);
    }
  }
).collect(initRequest(),new Action2<BulkRequestBuilder,BatchRequest>(){
    @Override public void call(    final BulkRequestBuilder bulkRequestBuilder,    final BatchRequest batchRequest){
      batchRequest.doOperation(client,bulkRequestBuilder);
    }
  }
).doOnNext(new Action1<BulkRequestBuilder>(){
    @Override public void call(    final BulkRequestBuilder bulkRequestBuilder){
      sendRequest(bulkRequestBuilder);
    }
  }
).toBlocking().last();
  Observable.from(operationMessages).doOnNext(new Action1<IndexOperationMessage>(){
    @Override public void call(    IndexOperationMessage operationMessage){
      operationMessage.getFuture().done();
    }
  }
).toBlocking().lastOrDefault(null);
}
