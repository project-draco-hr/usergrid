{
  startSpring();
  setVerbose(line);
  applyOrgId(line);
  prepareBaseOutputFileName(line);
  outputDir=createOutputParentDir();
  logger.info("Export directory: " + outputDir.getAbsolutePath());
  if (StringUtils.isNotEmpty(line.getOptionValue(READ_THREAD_COUNT))) {
    try {
      readThreadCount=Integer.parseInt(line.getOptionValue(READ_THREAD_COUNT));
    }
 catch (    NumberFormatException nfe) {
      logger.error("-" + READ_THREAD_COUNT + " must be specified as an integer. Aborting...");
      return;
    }
  }
 else {
    readThreadCount=20;
  }
  buildOrgMap();
  BlockingQueue<AdminUserWriteTask> writeQueue=new LinkedBlockingQueue<AdminUserWriteTask>();
  AdminUserWriter adminUserWriter=new AdminUserWriter(writeQueue);
  Thread writeThread=new Thread(adminUserWriter);
  writeThread.start();
  logger.debug("Write thread started");
  BlockingQueue<UUID> readQueue=new LinkedBlockingQueue<UUID>();
  List<AdminUserReader> readers=new ArrayList<AdminUserReader>();
  for (int i=0; i < readThreadCount; i++) {
    AdminUserReader worker=new AdminUserReader(readQueue,writeQueue);
    Thread readerThread=new Thread(worker,"AdminUserReader-" + i);
    readerThread.start();
    readers.add(worker);
  }
  logger.debug(readThreadCount + " read worker threads started");
  Query query=new Query();
  query.setLimit(MAX_ENTITY_FETCH);
  query.setResultsLevel(Query.Level.IDS);
  EntityManager em=emf.getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
  Results ids=em.searchCollection(em.getApplicationRef(),"users",query);
  while (ids.size() > 0) {
    for (    UUID uuid : ids.getIds()) {
      readQueue.add(uuid);
    }
    if (ids.getCursor() == null) {
      break;
    }
    query.setCursor(ids.getCursor());
    ids=em.searchCollection(em.getApplicationRef(),"users",query);
  }
  logger.debug("Waiting for write thread to complete");
  boolean done=false;
  while (!done) {
    writeThread.join(10000,0);
    done=!writeThread.isAlive();
    logger.info("Wrote {} users",count.get());
  }
}
