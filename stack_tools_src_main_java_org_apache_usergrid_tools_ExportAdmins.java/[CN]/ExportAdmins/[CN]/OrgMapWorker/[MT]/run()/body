{
  try {
    final String orgName=orgEntity.getProperty("path").toString();
    final UUID orgId=orgEntity.getUuid();
    for (    UserInfo user : managementService.getAdminUsersForOrganization(orgEntity.getUuid())) {
      try {
        Entity admin=managementService.getAdminUserEntityByUuid(user.getUuid());
        Org org=new Org(orgId,orgName);
synchronized (userToOrgsMap) {
          List<Org> userOrgs=userToOrgsMap.get(admin.getUuid());
          if (userOrgs == null) {
            userOrgs=new ArrayList<Org>();
            userToOrgsMap.put(admin.getUuid(),userOrgs);
          }
          userOrgs.add(org);
        }
synchronized (orgNameToUUID) {
          UUID existingOrgId=orgNameToUUID.get(orgName);
          ;
          if (existingOrgId != null && !orgId.equals(existingOrgId)) {
            if (!duplicateOrgs.contains(orgId)) {
              logger.info("Org {}:{} is a duplicate",orgId,orgName);
              duplicateOrgs.add(orgId);
            }
          }
 else {
            orgNameToUUID.put(orgName,orgId);
          }
        }
      }
 catch (      Exception e) {
        logger.warn("Cannot get orgs for userId {}",user.getUuid());
      }
    }
  }
 catch (  Exception e) {
    logger.error("Error getting users for org {}:{}",orgEntity.getName(),orgEntity.getUuid());
  }
}
