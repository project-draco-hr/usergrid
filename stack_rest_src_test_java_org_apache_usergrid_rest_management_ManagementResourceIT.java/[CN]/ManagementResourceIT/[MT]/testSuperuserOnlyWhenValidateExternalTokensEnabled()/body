{
  String rand=RandomStringUtils.randomAlphanumeric(10);
  final String username="user_" + rand;
  management().orgs().post(new Organization(username,username,username + "@example.com",username,"password",null));
  String suToken=clientSetup.getSuperuserToken().getAccessToken();
  Map<String,String> props=new HashMap<String,String>();
  props.put(USERGRID_CENTRAL_URL,getBaseURI().toURL().toExternalForm());
  resource().path("/testproperties").queryParam("access_token",suToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(props);
  try {
    try {
      Map<String,Object> loginInfo=new HashMap<String,Object>(){
{
          put("username",username);
          put("password","password");
          put("grant_type","password");
        }
      }
;
      JsonNode accessInfoNode=resource().path("/management/token").type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,loginInfo);
      fail("Login as Admin User must fail when validate external tokens is enabled");
    }
 catch (    UniformInterfaceException actual) {
      assertEquals(400,actual.getResponse().getStatus());
      String errorMsg=actual.getResponse().getEntity(JsonNode.class).get("error_description").toString();
      logger.error("ERROR: " + errorMsg);
      assertTrue(errorMsg.contains("Admin Users must login via"));
    }
catch (    Exception e) {
      fail("We expected a UniformInterfaceException");
    }
    Map<String,Object> loginInfo=new HashMap<String,Object>(){
{
        put("username","superuser");
        put("password","superpassword");
        put("grant_type","password");
      }
    }
;
    JsonNode accessInfoNode=resource().path("/management/token").type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,loginInfo);
    String accessToken=accessInfoNode.get("access_token").textValue();
    assertNotNull(accessToken);
  }
  finally {
    props.put(USERGRID_CENTRAL_URL,"");
    resource().path("/testproperties").queryParam("access_token",suToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(props);
  }
}
