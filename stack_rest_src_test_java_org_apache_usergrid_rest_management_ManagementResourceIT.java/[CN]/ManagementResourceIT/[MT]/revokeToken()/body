{
  Token token1=management.token().get(clientSetup.getUsername(),clientSetup.getPassword());
  Entity response=management.users().user(clientSetup.getUsername()).get();
  assertNotNull(response.get("email").toString());
  response=management.users().user(clientSetup.getUsername()).get();
  assertNotNull(response.get("email").toString());
  response=management.users().user(clientSetup.getUsername()).revokeTokens().post(true,Entity.class,null,null,false);
  Response.Status status=null;
  try {
    response=management.users().user(clientSetup.getUsername()).get();
  }
 catch (  ResponseProcessingException uie) {
    status=Response.Status.fromStatusCode(uie.getResponse().getStatus());
  }
  assertEquals(Response.Status.UNAUTHORIZED,status);
  Token token3=management.token().get(clientSetup.getUsername(),clientSetup.getPassword());
  response=management.users().user(clientSetup.getUsername()).get();
  assertNotNull(response.get("email").toString());
  QueryParameters queryParameters=new QueryParameters();
  queryParameters.addParam("token",token3.getAccessToken());
  management.users().user(clientSetup.getUsername()).revokeToken().post(false,Entity.class,null,queryParameters);
  status=null;
  try {
    management.users().user(clientSetup.getUsername()).get();
  }
 catch (  ResponseProcessingException uie) {
    status=Response.Status.fromStatusCode(uie.getResponse().getStatus());
  }
  assertEquals(Response.Status.UNAUTHORIZED,status);
}
