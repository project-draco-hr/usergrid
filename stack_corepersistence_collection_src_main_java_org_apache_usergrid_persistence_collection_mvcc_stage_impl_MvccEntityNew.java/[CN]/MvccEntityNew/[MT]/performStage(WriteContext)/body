{
  final Entity entity=writeContext.getMessage(Entity.class);
  Preconditions.checkNotNull(entity,"Entity is required in the new stage of the mvcc write");
  final UUID entityId=uuidService.newTimeUUID();
  final UUID version=entityId;
  final long created=timeService.getTime();
  try {
    FieldUtils.writeDeclaredField(entity,"uuid",entityId);
  }
 catch (  Throwable t) {
    LOG.error("Unable to set uuid.  See nested exception",t);
    throw new CollectionRuntimeException("Unable to set uuid.  See nested exception",t);
  }
  entity.setVersion(version);
  entity.setCreated(created);
  entity.setUpdated(created);
  final CollectionContext collectionContext=writeContext.getCollectionContext();
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.ACTIVE);
  MutationBatch write=logStrategy.write(collectionContext,startEntry);
  ListenableFuture<OperationResult<Void>> future;
  try {
    future=write.executeAsync();
  }
 catch (  ConnectionException e) {
    LOG.error("Failed to execute write asynchronously ",e);
    throw new CollectionRuntimeException("Failed to execute write asynchronously ",e);
  }
  MvccEntityImpl nextStage=new MvccEntityImpl(entityId,version,entity);
  writeContext.setMessage(nextStage);
  WriteContextCallback.createCallback(future,writeContext);
}
