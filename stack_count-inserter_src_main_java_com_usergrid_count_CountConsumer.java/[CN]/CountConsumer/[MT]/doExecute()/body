{
  Map<String,List<KafkaMessageStream<String>>> topicMessageStreams=consumerConnector.createMessageStreams(ImmutableMap.of(topicName,consumerCount),new StringDecoder());
  List<KafkaMessageStream<String>> streams=topicMessageStreams.get(topicName);
  for (  final KafkaMessageStream<String> stream : streams) {
    pollingExecutor.submit(new Runnable(){
      List<Count> counts=new ArrayList<Count>(batchInsertSize);
      public void run(){
        log.debug("run() invoked for stream processing");
        try {
          for (          String message : stream) {
            Count count=CountSerDeUtils.deserialize(message);
            counts.add(count);
            log.debug("Processing {} from wire",count);
            if (counts.size() >= batchInsertSize) {
              log.debug("batchInsertSize triggered, invoking counterStore#save");
              counterStore.save(counts);
              consumerConnector.commitOffsets();
              counts.clear();
            }
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
 finally {
          if (counts != null && counts.size() > 0) {
            counterStore.save(counts);
          }
        }
      }
    }
);
  }
}
