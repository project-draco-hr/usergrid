{
  if (passphrase == null) {
    passphrase="changeit".toCharArray();
  }
  File file;
  if (certStore != null) {
    file=certStore;
  }
 else {
    file=new File("jssecacerts");
  }
  if (!file.isFile()) {
    char SEP=File.separatorChar;
    File dir=new File(System.getProperty("java.home") + SEP + "lib"+ SEP+ "security");
    file=new File(dir,"jssecacerts");
    if (!file.isFile()) {
      file=new File(dir,"cacerts");
    }
  }
  certStore=file;
  LOG.debug("Loading KeyStore {}",file);
  InputStream in=new FileInputStream(file);
  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
  ks.load(in,passphrase);
  in.close();
  SSLContext context=SSLContext.getInstance("TLS");
  TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  tmf.init(ks);
  X509TrustManager defaultTrustManager=(X509TrustManager)tmf.getTrustManagers()[0];
  SavingTrustManager tm=new SavingTrustManager(defaultTrustManager);
  context.init(null,new TrustManager[]{tm},null);
  SSLSocketFactory factory=context.getSocketFactory();
  SSLSocket socket=null;
  int trial=0;
  boolean success=false;
  ConnectException connectException=null;
  do {
    try {
      LOG.info("Opening connection to {}:{}",host,port);
      socket=(SSLSocket)factory.createSocket(host,port);
      socket.setSoTimeout(10000);
      success=true;
    }
 catch (    ConnectException e) {
      connectException=e;
      Thread.sleep(1500);
    }
  }
 while (!success && trial++ < 10);
  if (!success) {
    throw connectException;
  }
  try {
    LOG.debug("Starting SSL handshake...");
    socket.startHandshake();
    socket.close();
    LOG.debug("No errors, certificate is already trusted");
  }
 catch (  SSLException e) {
    LOG.debug("Cert is NOT trusted: {}",e.getMessage());
  }
  X509Certificate[] chain=tm.chain;
  if (chain == null) {
    LOG.warn("Could not obtain server certificate chain");
    return;
  }
  LOG.debug("Server sent " + chain.length + " certificate(s):");
  MessageDigest sha1=MessageDigest.getInstance("SHA1");
  MessageDigest md5=MessageDigest.getInstance("MD5");
  for (int i=0; i < chain.length; i++) {
    X509Certificate cert=chain[i];
    LOG.debug(" " + (i + 1) + " Subject "+ cert.getSubjectDN());
    LOG.debug("   Issuer  " + cert.getIssuerDN());
    sha1.update(cert.getEncoded());
    LOG.debug("   sha1    " + toHexString(sha1.digest()));
    md5.update(cert.getEncoded());
    LOG.debug("   md5     " + toHexString(md5.digest()));
  }
  int k=0;
  X509Certificate cert=chain[k];
  ks.setCertificateEntry(host,cert);
  OutputStream out=new FileOutputStream("jssecacerts");
  ks.store(out,passphrase);
  out.close();
  LOG.debug("cert = {}",cert);
  LOG.debug("Added certificate to keystore 'jssecacerts' using alias '" + host + "'");
}
