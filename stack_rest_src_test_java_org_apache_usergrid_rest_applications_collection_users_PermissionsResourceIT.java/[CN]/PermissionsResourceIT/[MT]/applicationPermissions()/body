{
  createRoleUser("reviewer1","reviewer1@usergrid.com");
  createRoleUser("reviewer2","reviewer2@usergrid.com");
  Entity data=new Entity().chainPut("name","reviewer");
  Entity node=this.app().collection("roles").post(data);
  assertNull(node.getError());
  refreshIndex();
  ApiResponse response=this.app().collection("roles").entity("default").delete();
  assertNull(response.getError());
  refreshIndex();
  addPermission("reviewer","get,put,post:/reviews/**");
  addPermission("guest","get:/reviews/**");
  Entity group=new Entity().chainPut("path","reviewergroup").chainPut("name","reviewergroup");
  this.app().collection("groups").post(group);
  refreshIndex();
  this.app().collection("groups").entity("reviewergroup").collection("roles").entity("reviewer").post();
  refreshIndex();
  this.app().collection("users").entity("reviewer2").collection("groups").entity("reviewergroup").post();
  refreshIndex();
  this.app().collection("users").entity("reviewer1").collection("roles").entity("reviewer").post();
  refreshIndex();
  this.app().token().post(new Token("reviewer1","password"));
  Entity review=new Entity().chainPut("rating","4").chainPut("name","noca").chainPut("review","Excellent service and food");
  this.app().collection("reviews").post(review);
  review=new Entity().chainPut("rating","4").chainPut("name","4peaks").chainPut("review","Huge beer selection");
  this.app().collection("reviews").post(review);
  refreshIndex();
  QueryParameters queryParameters=new QueryParameters();
  queryParameters.setQuery("select * ORDER BY created");
  Collection reviews=this.app().collection("reviews").get(queryParameters);
  assertEquals("noca",reviews.next().get("name"));
  assertEquals("4peaks",reviews.next().get("name"));
  int status=0;
  try {
    this.app().collection("reviews").entity("noca").delete();
    fail("this should have failed due to having insufficient permissions");
  }
 catch (  ResponseProcessingException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  status=0;
  try {
    this.app().collection("reviews").entity("4peaks").delete();
    fail("this should have failed due to having insufficient permissions");
  }
 catch (  ResponseProcessingException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  refreshIndex();
  this.app().token().post(new Token("reviewer2","password"));
  review=new Entity().chainPut("rating","4").chainPut("name","cowboyciao").chainPut("review","Great atmosphoere");
  this.app().collection("reviews").post(review);
  review=new Entity().chainPut("rating","4").chainPut("name","currycorner").chainPut("review","Authentic");
  this.app().collection("reviews").post(review);
  refreshIndex();
  queryParameters=new QueryParameters();
  queryParameters.setQuery("select * ORDER BY created");
  reviews=this.app().collection("reviews").get(queryParameters);
  assertEquals("noca",reviews.next().get("name").toString());
  assertEquals("4peaks",reviews.next().get("name").toString());
  assertEquals("cowboyciao",reviews.next().get("name").toString());
  assertEquals("currycorner",reviews.next().get("name").toString());
  status=0;
  try {
    this.app().collection("reviews").entity("cowboyciao").delete();
    fail("this should have failed due to having insufficient permissions");
  }
 catch (  ResponseProcessingException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  refreshIndex();
  status=0;
  try {
    this.app().collection("reviews").entity("currycorner").delete();
    fail("this should have failed due to having insufficient permissions");
  }
 catch (  ResponseProcessingException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
}
