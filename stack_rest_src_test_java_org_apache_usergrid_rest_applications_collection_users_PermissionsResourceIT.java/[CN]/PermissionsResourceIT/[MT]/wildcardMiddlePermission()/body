{
  this.app().collection("roles").entity("default").delete();
  Entity data=new Entity().chainPut("name","reviewer");
  this.app().collection("roles").post(data);
  refreshIndex();
  addPermission("reviewer","get,put,post:/reviews/**");
  addPermission("reviewer","get,put,post:/users/me/**");
  addPermission("reviewer","get,put,post:/books/*/review/*");
  UUID userOneId=createRoleUser("wildcardpermuserone","wildcardpermuserone@apigee.com");
  assertNotNull(userOneId);
  UUID userTwoId=createRoleUser("wildcardpermusertwo","wildcardpermusertwo@apigee.com");
  assertNotNull(userTwoId);
  refreshIndex();
  this.app().collection("users").entity(userOneId).collection("roles").entity("reviewer").post();
  refreshIndex();
  Entity book=new Entity().chainPut("title","Ready Player One").chainPut("author","Earnest Cline");
  book=this.app().collection("books").post(book);
  assertEquals("Ready Player One",book.get("title").toString());
  String bookId=book.get("uuid").toString();
  refreshIndex();
  this.app().token().post(new Token("wildcardpermuserone","password"));
  Entity review=new Entity().chainPut("heading","Loved It").chainPut("body","80s Awesomeness set in the future");
  review=this.app().collection("reviews").post(review);
  String reviewId=review.get("uuid").toString();
  refreshIndex();
  this.app().collection("users").entity("me").connection("wrote").collection("review").entity(reviewId).post();
  this.app().collection("users").entity("me").connection("reviewed").collection("books").entity(bookId).post();
  refreshIndex();
  this.app().collection("books").entity(bookId).collection("review").entity(reviewId).post();
  refreshIndex();
  int status=0;
  try {
    this.app().collection("books").post(book);
  }
 catch (  ClientErrorException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  this.app().collection("users").entity("me").connection("reviewed").collection("books").get();
  this.app().collection("reviews").entity(reviewId).get();
  this.app().collection("users").entity("me").connection("wrote").get();
}
