{
  UsersCollection users=context.users();
  Map user1=hashMap("username","user1").map("email","testuser1@usergrid.com").map("fullname","Bob Smith");
  users.create(user1);
  Map user2=hashMap("username","user2").map("email","testuser2@usergrid.com").map("fullname","Fred Smith");
  users.create(user2);
  Map user3=hashMap("username","user3").map("email","testuser3@usergrid.com").map("fullname","Frank Grimes");
  users.create(user3);
  CustomCollection restaurants=context.collection("restaurants");
  Map restaurant1=hashMap("name","Old Major");
  UUID restaurant1Id=getEntityId(restaurants.create(restaurant1),0);
  Map restaurant2=hashMap("name","tag");
  UUID restaurant2Id=getEntityId(restaurants.create(restaurant2),0);
  Map restaurant3=hashMap("name","Squeaky Bean");
  UUID restaurant3Id=getEntityId(restaurants.create(restaurant3),0);
  Map restaurant4=hashMap("name","Lola");
  UUID restaurant4Id=getEntityId(restaurants.create(restaurant4),0);
  users.user("user1").connection("likes").entity(restaurant1Id).post();
  users.user("user1").connection("likes").entity(restaurant2Id).post();
  users.user("user2").connection("likes").entity(restaurant2Id).post();
  users.user("user2").connection("likes").entity(restaurant3Id).post();
  users.user("user3").connection("likes").entity(restaurant4Id).post();
  JsonNode testGetUsers=context.collection("users").get().get("entities");
  JsonNode likesNode=context.collection("users").entity("user1").connection("likes").get().get("entities");
  JsonNode queryResponse=context.collection("users").withMatrix(hashMap("ql","where fullname contains 'Smith'").map("limit","1000")).connection("likes").get();
  assertEquals("Old Major",getEntityName(queryResponse,0));
  assertEquals("tag",getEntityName(queryResponse,1));
  assertEquals("Squeaky Bean",getEntityName(queryResponse,2));
  assertNull(getEntity(queryResponse,3));
}
