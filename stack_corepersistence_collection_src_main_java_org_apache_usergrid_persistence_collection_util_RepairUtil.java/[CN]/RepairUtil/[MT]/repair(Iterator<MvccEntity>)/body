{
  if (!results.hasNext()) {
    return null;
  }
  org.apache.commons.collections4.iterators.PushbackIterator<MvccEntity> iter=new PushbackIterator<>(results);
  MvccEntity mvccEntity=iter.next();
  final Optional<Entity> targetVersion=mvccEntity.getEntity();
  List<MvccEntity> partialEntities=new ArrayList<>();
  if (!targetVersion.isPresent() && (mvccEntity.getStatus() == MvccEntity.Status.DELETED || mvccEntity.getStatus() == MvccEntity.Status.COMPLETE)) {
    return null;
  }
  if (mvccEntity.getStatus() == MvccEntity.Status.COMPLETE) {
    return targetVersion.get();
  }
  iter.pushback(mvccEntity);
  while (iter.hasNext()) {
    mvccEntity=iter.next();
    partialEntities.add(mvccEntity);
    if (mvccEntity.getStatus() == MvccEntity.Status.PARTIAL) {
      continue;
    }
 else {
      Collections.reverse(partialEntities);
      List<ChangeLogEntry> chgPersist=new ArrayList<>();
      List<MvccEntity> subEntList=new ArrayList<>();
      for (int chg=1; chg <= partialEntities.size() - 1; chg++) {
        subEntList.clear();
        chgPersist.clear();
        subEntList.add(mvccEntity);
        subEntList.add(partialEntities.get(chg));
        chgPersist.addAll(changeLogGenerator.getChangeLog(subEntList.iterator(),subEntList.get(subEntList.size() - 1).getVersion()));
        mvccEntity=entityRepair(chgPersist,subEntList,mvccEntity);
      }
      return mvccEntity.getEntity().get();
    }
  }
  return null;
}
