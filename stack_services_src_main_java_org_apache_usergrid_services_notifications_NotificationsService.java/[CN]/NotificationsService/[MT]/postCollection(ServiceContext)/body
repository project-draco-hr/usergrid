{
  if (logger.isTraceEnabled()) {
    logger.trace("NotificationService: start request.");
  }
  Timer.Context timer=postTimer.time();
  postMeter.mark();
  try {
    validate(null,context.getPayload());
    Notification.PathTokens pathTokens=getPathTokens(context.getRequest().getOriginalParameters());
    context.getProperties().put("saveReceipts",true);
    context.getProperties().put("processingFinished",0L);
    context.getProperties().put("state",Notification.State.CREATED);
    context.getProperties().put("pathQuery",pathTokens);
    context.setOwner(sm.getApplication());
    ServiceResults results=super.postCollection(context);
    Notification notification=(Notification)results.getEntity();
    if (notification.getStarted() == null || notification.getStarted() == 0) {
      long now=System.currentTimeMillis();
      notification.setStarted(System.currentTimeMillis());
      Map<String,Object> properties=new HashMap<String,Object>(2);
      properties.put("started",notification.getStarted());
      properties.put("state",notification.getState());
      notification.addProperties(properties);
      if (logger.isTraceEnabled()) {
        logger.trace("ApplicationQueueMessage: notification {} properties updated in duration {} ms",notification.getUuid(),System.currentTimeMillis() - now);
      }
    }
    long now=System.currentTimeMillis();
    notificationQueueManager.queueNotification(notification,null);
    if (logger.isTraceEnabled()) {
      logger.trace("NotificationService: notification {} post queue duration {} ms ",notification.getUuid(),System.currentTimeMillis() - now);
    }
    return results;
  }
 catch (  Exception e) {
    logger.error("serialization failed",e);
    throw e;
  }
 finally {
    timer.stop();
  }
}
