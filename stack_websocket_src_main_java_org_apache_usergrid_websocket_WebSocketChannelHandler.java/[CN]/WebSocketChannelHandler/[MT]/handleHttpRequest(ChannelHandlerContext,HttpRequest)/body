{
  if (req.getMethod() != GET) {
    sendHttpResponse(ctx,req,FORBIDDEN);
    return;
  }
  boolean is_ws_request=Values.UPGRADE.equalsIgnoreCase(req.getHeader(CONNECTION)) && WEBSOCKET.equalsIgnoreCase(req.getHeader(Names.UPGRADE));
  if (!is_ws_request && req.getUri().equals("/")) {
    HttpResponse res=new DefaultHttpResponse(HTTP_1_1,OK);
    ChannelBuffer content=WebSocketServerIndexPage.getContent(getWebSocketLocation(req));
    res.setHeader(CONTENT_TYPE,"text/html; charset=UTF-8");
    setContentLength(res,content.readableBytes());
    res.setContent(content);
    sendHttpResponse(ctx,req,res);
    return;
  }
 else   if (is_ws_request) {
    logger.info("Starting new websocket connection...");
    websocket=true;
    HttpResponse res=new DefaultHttpResponse(HTTP_1_1,new HttpResponseStatus(101,"Web Socket Protocol Handshake"));
    res.addHeader(Names.UPGRADE,WEBSOCKET);
    res.addHeader(CONNECTION,Values.UPGRADE);
    QueryStringDecoder qs=new QueryStringDecoder(req.getUri());
    String path=qs.getPath();
    logger.info(path);
    if (req.containsHeader(SEC_WEBSOCKET_KEY1) && req.containsHeader(SEC_WEBSOCKET_KEY2)) {
      String[] segments=split(path,'/');
      if (segments.length != 3) {
        logger.info("Wrong number of path segments, expected 3, found " + segments.length);
        sendHttpResponse(ctx,req,FORBIDDEN);
        return;
      }
      String nsStr=segments[0];
      String collStr=segments[1];
      String idStr=segments[2];
      logger.info(nsStr + "/" + collStr+ "/"+ idStr);
      if (isEmpty(nsStr) || isEmpty(collStr) || isEmpty(idStr)) {
        sendHttpResponse(ctx,req,FORBIDDEN);
        return;
      }
      res.addHeader(SEC_WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(SEC_WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(SEC_WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(SEC_WEBSOCKET_PROTOCOL,protocol);
      }
      String key1=req.getHeader(SEC_WEBSOCKET_KEY1);
      String key2=req.getHeader(SEC_WEBSOCKET_KEY2);
      int a=(int)(Long.parseLong(key1.replaceAll("[^0-9]","")) / key1.replaceAll("[^ ]","").length());
      int b=(int)(Long.parseLong(key2.replaceAll("[^0-9]","")) / key2.replaceAll("[^ ]","").length());
      long c=req.getContent().readLong();
      ChannelBuffer input=ChannelBuffers.buffer(16);
      input.writeInt(a);
      input.writeInt(b);
      input.writeLong(c);
      ChannelBuffer output=ChannelBuffers.wrappedBuffer(MessageDigest.getInstance("MD5").digest(input.array()));
      res.setContent(output);
    }
 else {
      res.addHeader(WEBSOCKET_ORIGIN,req.getHeader(ORIGIN));
      res.addHeader(WEBSOCKET_LOCATION,getWebSocketLocation(req));
      String protocol=req.getHeader(WEBSOCKET_PROTOCOL);
      if (protocol != null) {
        res.addHeader(WEBSOCKET_PROTOCOL,protocol);
      }
    }
    ChannelPipeline p=ctx.getChannel().getPipeline();
    p.remove("aggregator");
    p.replace("decoder","wsdecoder",new WebSocketFrameDecoder());
    ctx.getChannel().write(res);
    p.replace("encoder","wsencoder",new WebSocketFrameEncoder());
    return;
  }
  sendHttpResponse(ctx,req,FORBIDDEN);
}
