{
  ApplicationQueueManager.DEFAULT_QUEUE_NAME="notifications/test/" + UUID.randomUUID().toString() + ";"+ "notifications/test/"+ UUID.randomUUID().toString();
  super.before();
  app.clear();
  app.put("name","gcm");
  app.put("provider",PROVIDER);
  app.put("environment","development");
  app.put("apiKey",API_KEY);
  notifier=(Notifier)app.testRequest(ServiceAction.POST,1,"notifiers").getEntity().toTypedEntity();
  String key=notifier.getName() + NOTIFIER_ID_POSTFIX;
  app.clear();
  app.put(key,PUSH_TOKEN);
  Entity e=app.testRequest(ServiceAction.POST,1,"devices").getEntity();
  app.testRequest(ServiceAction.GET,1,"devices",e.getUuid());
  device1=app.getEm().get(e.getUuid(),Device.class);
  assertEquals(device1.getProperty(key),PUSH_TOKEN);
  app.put(key,PUSH_TOKEN);
  e=app.testRequest(ServiceAction.POST,1,"devices").getEntity();
  device2=app.getEm().get(e.getUuid(),Device.class);
  ns=getNotificationService();
  Query query=new Query();
  query.setLimit(100);
  query.setCollection("devices");
  query.setResultsLevel(Query.Level.ALL_PROPERTIES);
  PathQuery pathQuery=new PathQuery(new SimpleEntityRef(app.getEm().getApplicationRef()),query);
  ns.TEST_PATH_QUERY=pathQuery;
  listener=new QueueListener(ns.getServiceManagerFactory(),ns.getEntityManagerFactory(),ns.getMetricsFactory(),new Properties());
  listener.DEFAULT_SLEEP=200;
  listener.start();
}
