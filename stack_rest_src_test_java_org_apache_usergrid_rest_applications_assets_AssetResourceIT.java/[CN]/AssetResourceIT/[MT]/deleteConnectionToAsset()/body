{
  UserRepo.INSTANCE.load(resource(),access_token);
  final String uuid;
  Map<String,String> payload=hashMap("name","cassandra_eye.jpg");
  JsonNode node=resource().path("/test-organization/test-app/foos").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  JsonNode idNode=node.get("entities").get(0).get("uuid");
  uuid=idNode.getTextValue();
  byte[] data=IOUtils.toByteArray(this.getClass().getResourceAsStream("/cassandra_eye.jpg"));
  resource().path("/test-organization/test-app/foos/" + uuid).queryParam("access_token",access_token).type(MediaType.APPLICATION_OCTET_STREAM_TYPE).put(data);
  Map<String,String> imageGalleryPayload=hashMap("name","my image gallery");
  JsonNode imageGalleryNode=resource().path("/test-organization/test-app/imagegalleries").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,imageGalleryPayload);
  JsonNode imageGalleryIdNode=imageGalleryNode.get("entities").get(0).get("uuid");
  String imageGalleryId=imageGalleryIdNode.getTextValue();
  JsonNode connectNode=resource().path("/test-organization/test-app/imagegalleries/" + imageGalleryId + "/contains/"+ uuid).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class);
  JsonNode listConnectionsNode=resource().path("/test-organization/test-app/imagegalleries/" + imageGalleryId + "/contains/").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertEquals(uuid,listConnectionsNode.get("entities").get(0).get("uuid").getTextValue());
  resource().path("/test-organization/test-app/imagegalleries/" + imageGalleryId + "/contains/"+ uuid).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete();
  listConnectionsNode=resource().path("/test-organization/test-app/imagegalleries/" + imageGalleryId + "/contains/").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertFalse(listConnectionsNode.get("entities").getElements().hasNext());
  JsonNode assetNode=resource().path("/test-organization/test-app/foos/" + uuid).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(assetNode);
  Assert.assertEquals("image/jpeg",assetNode.findValue(AssetUtils.CONTENT_TYPE).getTextValue());
  Assert.assertEquals(7979,assetNode.findValue("content-length").getIntValue());
  JsonNode assetIdNode=assetNode.get("entities").get(0).get("uuid");
  assertEquals(uuid,assetIdNode.getTextValue());
  InputStream assetIs=resource().path("/test-organization/test-app/foos/" + uuid).queryParam("access_token",access_token).accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).get(InputStream.class);
  byte[] foundData=IOUtils.toByteArray(assetIs);
  assertEquals(7979,foundData.length);
}
