{
  userRepo.load();
  this.refreshIndex();
  UUID userId=userRepo.getByUserName("user1");
  Map<String,String> payload=hashMap("path","my/clean/path").map("owner",userId.toString()).map("someprop","somevalue");
  String orgAppPath=clientSetup.getOrganizationName() + "/" + clientSetup.getAppName();
  JsonNode node=mapper.readTree(resource().path(orgAppPath + "/assets").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  JsonNode idNode=node.get("entities").get(0).get("uuid");
  UUID id=UUID.fromString(idNode.textValue());
  assertNotNull(idNode.textValue());
  byte[] data=IOUtils.toByteArray(this.getClass().getResourceAsStream("/cassandra_eye.jpg"));
  resource().path(orgAppPath + "/assets/" + id.toString()+ "/data").queryParam("access_token",access_token).type(MediaType.APPLICATION_OCTET_STREAM_TYPE).put(data);
  InputStream is=resource().path(orgAppPath + "/assets/" + id.toString()+ "/data").queryParam("access_token",access_token).get(InputStream.class);
  byte[] foundData=IOUtils.toByteArray(is);
  assertEquals(7979,foundData.length);
  refreshIndex();
  node=mapper.readTree(resource().path(orgAppPath + "/assets/my/clean/path").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  idNode=node.get("entities").get(0).get("uuid");
  assertEquals(id.toString(),idNode.textValue());
}
