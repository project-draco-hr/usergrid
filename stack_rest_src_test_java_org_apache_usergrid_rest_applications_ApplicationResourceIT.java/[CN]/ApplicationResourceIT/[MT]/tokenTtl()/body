{
  long ttl=2000;
  String orgName=clientSetup.getOrganizationName().toLowerCase();
  String appName=clientSetup.getAppName().toLowerCase();
  String username="username";
  String name="name";
  User user=new User(username,name,username + "@usergrid.org","password");
  Entity entity=this.app().collection("users").post(user);
  assertNotNull(entity);
  refreshIndex();
  Token apiResponse=resource().path(String.format("/%s/%s/token",orgName,appName)).queryParam("grant_type","password").queryParam("username",username).queryParam("password","password").queryParam("ttl",String.valueOf(ttl)).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(Token.class);
  long startTime=System.currentTimeMillis();
  String token=apiResponse.getAccessToken();
  assertNotNull(token);
  long expires_in=apiResponse.getExpirationDate();
  assertEquals(ttl,expires_in * 1000);
  entity=this.app().collection("users").entity(entity).get(new QueryParameters().addParam("access_token",token),false);
  assertEquals(username + "@usergrid.org",entity.get("email"));
  Thread.sleep(ttl - (System.currentTimeMillis() - startTime) + 1000);
  try {
    this.app().collection("users").entity(entity).get(new QueryParameters().addParam("access_token",token),false);
    fail("The expired token should cause an exception");
  }
 catch (  UniformInterfaceException uie) {
    assertEquals(Status.UNAUTHORIZED.getStatusCode(),uie.getResponse().getStatus());
  }
}
