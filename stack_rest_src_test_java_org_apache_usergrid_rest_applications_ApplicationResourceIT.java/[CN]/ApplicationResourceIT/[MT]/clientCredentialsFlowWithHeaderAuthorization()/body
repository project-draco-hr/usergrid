{
  Credentials appCredentials=getAppCredentials();
  String clientId=appCredentials.getClientId();
  String clientSecret=appCredentials.getClientSecret();
  Token token=clientSetup.getRestClient().management().token().post(Token.class,new Token("client_credentials",clientId,clientSecret));
  String clientCredentials=clientId + ":" + clientSecret;
  String encodedToken=Base64.encodeToString(clientCredentials.getBytes());
  Map<String,String> payload=hashMap("grant_type","client_credentials");
  Token apiResponse=this.app().token().getTarget(false).request().header("Authorization","Basic " + encodedToken).accept(MediaType.APPLICATION_JSON).post(javax.ws.rs.client.Entity.entity(payload,MediaType.APPLICATION_JSON_TYPE),Token.class);
  assertNotNull("A valid response was returned.",apiResponse);
  assertNull("There is no error.",apiResponse.getError());
  assertNotNull("It has access_token.",apiResponse.getAccessToken());
  assertNotNull("It has expires_in.",apiResponse.getExpirationDate());
}
