{
  QueueQuery query=new QueueQuery();
  query.setTimeout(jobTimeout);
  query.setLimit(size);
  QueueResults jobs=getQm().getFromQueue(jobQueueName,query);
  List<JobDescriptor> results=new ArrayList<JobDescriptor>(jobs.size());
  for (  Message job : jobs.getMessages()) {
    Object jo=job.getStringProperty(JOB_ID);
    UUID jobUuid=UUID.fromString(job.getStringProperty(JOB_ID));
    UUID statsUuid=UUID.fromString(job.getStringProperty(STATS_ID));
    String jobName=job.getStringProperty(JOB_NAME);
    try {
      JobData data=getEm().get(jobUuid,JobData.class);
      JobStat stats=getEm().get(statsUuid,JobStat.class);
      if (data == null || stats == null) {
        logger.info("Received job with data id '{}' from the queue, but no data was found.  Dropping job",jobUuid);
        getQm().deleteTransaction(jobQueueName,job.getTransaction(),null);
        if (data != null) {
          getEm().delete(data);
        }
        if (stats != null) {
          getEm().delete(stats);
        }
        continue;
      }
      results.add(new JobDescriptor(jobName,job.getUuid(),job.getTransaction(),data,stats,this));
    }
 catch (    Exception e) {
      logger.error("Unable to retrieve job data for jobname {}, job id {}, stats id {}.  Skipping to avoid job " + "loss",new Object[]{jobName,jobUuid,statsUuid,e});
    }
  }
  return results;
}
