{
  assertEquals("version 2 expected",2,graphShardVersionMigration.getVersion());
  assertEquals("Previous version expected",1,dataMigrationManager.getCurrentVersion());
  final EntityManager newAppEm=app.getEntityManager();
  final String type1="type1thing";
  final String type2="type2thing";
  final int size=10;
  final Set<Id> type1Identities=EntityWriteHelper.createTypes(newAppEm,type1,size);
  final Set<Id> type2Identities=EntityWriteHelper.createTypes(newAppEm,type2,size);
  final Set<Id> allEntities=new HashSet<>();
  allEntities.addAll(type1Identities);
  allEntities.addAll(type2Identities);
  final TestProgressObserver progressObserver=new TestProgressObserver();
  final Multimap<Id,String> sourceTypes=HashMultimap.create(10000,10);
  final Multimap<Id,String> targetTypes=HashMultimap.create(10000,10);
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup<CollectionScope>>(){
    @Override public void call(    final ApplicationEntityGroup<CollectionScope> entity){
      final GraphManager gm=managerCache.getGraphManager(entity.applicationScope);
      for (      final EntityIdScope<CollectionScope> idScope : entity.entityIds) {
        gm.getEdgeTypesFromSource(new SimpleSearchEdgeType(idScope.getId(),null,null)).doOnNext(new Action1<String>(){
          @Override public void call(          final String s){
            sourceTypes.put(idScope.getId(),s);
          }
        }
).toBlocking().lastOrDefault(null);
        gm.getEdgeTypesToTarget(new SimpleSearchEdgeType(idScope.getId(),null,null)).doOnNext(new Action1<String>(){
          @Override public void call(          final String s){
            targetTypes.put(idScope.getId(),s);
          }
        }
).toBlocking().lastOrDefault(null);
        allEntities.remove(idScope.getId());
      }
    }
  }
).toBlocking().lastOrDefault(null);
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup>(){
    @Override public void call(    final ApplicationEntityGroup entity){
      try {
        graphShardVersionMigration.migrate(entity,progressObserver).toBlocking().last();
      }
 catch (      Throwable e) {
        throw new RuntimeException(e);
      }
    }
  }
).toBlocking().last();
  assertEquals("Newly saved entities encounterd",0,allEntities.size());
  assertFalse("Progress observer should not have failed",progressObserver.getFailed());
  assertTrue("Progress observer should have update messages",progressObserver.getUpdates().size() > 0);
  migrationInfoSerialization.setStatusCode(DataMigrationManagerImpl.StatusCode.COMPLETE.status);
  migrationInfoSerialization.setVersion(graphShardVersionMigration.getVersion());
  dataMigrationManager.invalidate();
  assertEquals("New version saved, and we should get new implementation",graphShardVersionMigration.getVersion(),dataMigrationManager.getCurrentVersion());
  allEntitiesInSystemObservable.getAllEntitiesInSystem(1000).doOnNext(new Action1<ApplicationEntityGroup<CollectionScope>>(){
    @Override public void call(    final ApplicationEntityGroup<CollectionScope> entity){
      final GraphManager gm=managerCache.getGraphManager(entity.applicationScope);
      for (      final EntityIdScope<CollectionScope> idScope : entity.entityIds) {
        gm.getEdgeTypesFromSource(new SimpleSearchEdgeType(idScope.getId(),null,null)).doOnNext(new Action1<String>(){
          @Override public void call(          final String s){
            sourceTypes.remove(idScope.getId(),s);
          }
        }
).toBlocking().lastOrDefault(null);
        gm.getEdgeTypesToTarget(new SimpleSearchEdgeType(idScope.getId(),null,null)).doOnNext(new Action1<String>(){
          @Override public void call(          final String s){
            targetTypes.remove(idScope.getId(),s);
          }
        }
).toBlocking().lastOrDefault(null);
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("All source types migrated",0,sourceTypes.size());
  assertEquals("All target types migrated",0,targetTypes.size());
}
