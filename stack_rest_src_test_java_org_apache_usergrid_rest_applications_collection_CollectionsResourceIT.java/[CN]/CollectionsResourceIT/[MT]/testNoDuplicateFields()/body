{
{
    Map<String,String> payload=hashMap("type","app_user").map("name","fred");
    JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/app_users").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
    String uuidString=node.get("entities").get(0).get("uuid").asText();
    UUID entityId=UUIDUtils.tryGetUUID(uuidString);
    Assert.assertNotNull(entityId);
  }
  refreshIndex("test-organization","test-app");
{
    String s=resource().path("/test-organization/test-app/app_users/fred").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class);
    int firstFred=s.indexOf("fred");
    int secondFred=s.indexOf("fred",firstFred + 4);
    Assert.assertEquals("Should not be more than one name property",-1,secondFred);
  }
}
