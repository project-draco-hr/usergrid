{
  ArrayList<String> indexingArray=new ArrayList<>();
  indexingArray.add("*");
  indexingArray.add("one");
  indexingArray.add("two");
  Entity payload=new Entity();
  payload.put("fields",indexingArray);
  Entity thing=this.app().collection("testCollection").collection("_settings").post(payload);
  refreshIndex();
  Collection collection=this.app().collection("testCollection").collection("_index").get();
  LinkedHashMap testCollectionSchema=(LinkedHashMap)collection.getResponse().getData();
  ArrayList<String> schema=(ArrayList<String>)testCollectionSchema.get("fields");
  assertTrue(schema.contains("*"));
  assertFalse(schema.contains("one"));
  assertFalse(schema.contains("two"));
  Entity testEntity=new Entity();
  testEntity.put("one","helper");
  testEntity.put("two","query");
  this.app().collection("testCollection").post(testEntity);
  refreshIndex();
  String query="two ='query'";
  QueryParameters queryParameters=new QueryParameters().setQuery(query);
  Collection tempEntity=this.app().collection("testCollection").get(queryParameters,true);
  Entity reindexedEntity=tempEntity.getResponse().getEntity();
  assertEquals("helper",reindexedEntity.get("one"));
  query="one = 'helper'";
  queryParameters=new QueryParameters().setQuery(query);
  tempEntity=this.app().collection("testCollection").get(queryParameters,true);
  assertEquals(1,tempEntity.getResponse().getEntities().size());
}
