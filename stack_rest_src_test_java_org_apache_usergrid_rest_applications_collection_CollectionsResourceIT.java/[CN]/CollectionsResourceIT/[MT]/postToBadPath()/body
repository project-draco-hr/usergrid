{
  String app="fakeapp";
  String org=this.clientSetup.getOrganizationName();
  String entity="fakeentity";
  try {
    this.clientSetup.getRestClient().org(org).app(app).collection("cities").get();
    fail("Call to bad path exists, but it should not");
  }
 catch (  UniformInterfaceException e) {
    JsonNode node=mapper.readTree(e.getResponse().getEntity(String.class));
    assertEquals("organization_application_not_found",node.get("error").textValue());
  }
  Entity payload=new Entity();
  payload.put("name","Austin");
  payload.put("state","TX");
  try {
    this.clientSetup.getRestClient().org(org).app(app).collection("cities").post(payload);
    fail("Call to bad path exists, but it should not");
  }
 catch (  UniformInterfaceException e) {
    JsonNode node=mapper.readTree(e.getResponse().getEntity(String.class));
    assertEquals("organization_application_not_found",node.get("error").textValue());
  }
  try {
    this.clientSetup.getRestClient().org(org).app(app).collection("cities").entity(entity).put(payload);
    fail("Call to bad path exists, but it should not");
  }
 catch (  UniformInterfaceException e) {
    JsonNode node=mapper.readTree(e.getResponse().getEntity(String.class));
    assertEquals("organization_application_not_found",node.get("error").textValue());
  }
  try {
    this.clientSetup.getRestClient().org(org).app(app).collection("cities").entity(entity).delete();
    fail("Call to bad path exists, but it should not");
  }
 catch (  UniformInterfaceException e) {
    JsonNode node=mapper.readTree(e.getResponse().getEntity(String.class));
    assertEquals("organization_application_not_found",node.get("error").textValue());
  }
}
