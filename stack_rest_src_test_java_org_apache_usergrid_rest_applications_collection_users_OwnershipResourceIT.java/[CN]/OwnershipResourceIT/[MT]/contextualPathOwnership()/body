{
  this.app().token().clearToken();
  this.app().token().post(new Token(user1.getUsername(),"password"));
  usersResource.entity("me").collection("devices").post(new Entity().chainPut("name","device1").chainPut("number","5551112222"));
  refreshIndex();
  this.app().token().clearToken();
  Token token=this.app().token().post(new Token(user2.getUsername(),"password"));
  usersResource.entity("me").collection("devices").post(new Entity().chainPut("name","device2").chainPut("number","5552223333"));
  refreshIndex();
  token=this.app().token().post(new Token(user1.getUsername(),"password"));
  CollectionEndpoint devices=usersResource.entity(user1).collection("devices");
  Entity data=devices.entity("device1").get();
  assertNotNull(data);
  assertEquals("device1",data.get("name").toString());
  int status=0;
  try {
    data=devices.entity("device2").get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  Collection devicesData=devices.get();
  assertEquals("device1",devicesData.next().get("name").toString());
  assertTrue(!devicesData.hasNext());
  token=this.app().token().post(new Token(user2.getUsername(),"password"));
  devices=usersResource.entity("me").collection("devices");
  data=devices.entity("device2").get();
  assertNotNull(data);
  assertEquals("device2",data.get("name").toString());
  status=0;
  try {
    data=devices.entity("device1").get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  devicesData=devices.get();
  assertEquals("device2",devicesData.next().get("name").toString());
  assertTrue(!devicesData.hasNext());
  devices=this.app().collection("devices");
  token=this.app().token().post(new Token(user1.getUsername(),"password"));
  data=devices.entity("device1").get();
  assertNotNull(data);
  assertEquals("device1",data.get("name").toString());
  data=devices.entity("device2").get();
  assertNotNull(data);
  assertEquals("device2",data.get("name").toString());
  token=this.app().token().post(new Token(user2.getUsername(),"password"));
  data=devices.entity("device1").get();
  assertNotNull(data);
  assertEquals("device1",data.get("name").toString());
  data=devices.entity("device2").get();
  assertNotNull(data);
  assertEquals("device2",data.get("name").toString());
}
