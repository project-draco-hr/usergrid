{
  this.app().token().clearToken();
  this.app().token().post(new Token(user1.getUsername(),"password"));
  Entity data=this.app().collection("restaurants").post(new Entity().chainPut("name","4peaks"));
  refreshIndex();
  data=usersResource.entity("me").connection("likes").collection("restaurants").entity("4peaks").post();
  refreshIndex();
  this.app().token().clearToken();
  this.app().token().post(new Token(user2.getUsername(),"password"));
  data=this.app().collection("restaurants").post(new Entity().chainPut("name","arrogantbutcher"));
  refreshIndex();
  data=usersResource.entity("me").connection("likes").collection("restaurants").entity("arrogantbutcher").post();
  refreshIndex();
  String arrogantButcherId=data.getUuid().toString();
  this.app().token().post(new Token(user1.getUsername(),"password"));
  CollectionEndpoint likeRestaurants=usersResource.entity("me").connection("likes").collection("restaurants");
  String peaksId=data.getUuid().toString();
  data=likeRestaurants.entity(peaksId).get();
  assertNotNull(data);
  assertEquals("4peaks",data.get("name").toString());
  data=likeRestaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",data.get("name").toString());
  int status=200;
  try {
    likeRestaurants.entity("arrogantbutcher").get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  status=200;
  try {
    likeRestaurants.entity(arrogantButcherId).get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  Collection collectionData=likeRestaurants.get();
  assertEquals("4peaks",collectionData.next().get("name").toString());
  assertTrue(!collectionData.hasNext());
  this.app().token().post(new Token(user2.getUsername(),"password"));
  likeRestaurants=usersResource.entity("me").connection("likes").collection("restaurants");
  data=likeRestaurants.entity(arrogantButcherId).get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",data.get("name").toString());
  data=likeRestaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",data.get("name").toString());
  status=200;
  try {
    data=likeRestaurants.entity("4peaks").get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  status=200;
  try {
    likeRestaurants.entity(peaksId).get();
  }
 catch (  UniformInterfaceException e) {
    status=e.getResponse().getStatus();
  }
  assertEquals(status,404);
  collectionData=likeRestaurants.get();
  assertEquals("arrogantbutcher",collectionData.next().get("name").toString());
  assertTrue(!collectionData.hasNext());
  this.app().token().post(new Token(user1.getUsername(),"password"));
  CollectionEndpoint restaurants=this.app().collection("restaurants");
  data=restaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",data.get("name").toString());
  data=restaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",data.get("name").toString());
  this.app().token().post(new Token(user2.getUsername(),"password"));
  restaurants=this.app().collection("restaurants");
  data=restaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",data.get("name").toString());
  data=restaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",data.get("name").toString());
}
