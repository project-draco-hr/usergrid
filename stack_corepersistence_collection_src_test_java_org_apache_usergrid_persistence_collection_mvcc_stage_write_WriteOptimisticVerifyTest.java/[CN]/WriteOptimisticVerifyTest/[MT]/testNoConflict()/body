{
  final CollectionScope collectionScope=mock(CollectionScope.class);
  when(collectionScope.getOrganization()).thenReturn(new SimpleId(UUIDGenerator.newTimeUUID(),"organization"));
  when(collectionScope.getOwner()).thenReturn(new SimpleId(UUIDGenerator.newTimeUUID(),"owner"));
  final Entity entity=generateEntity();
  final MvccEntity mvccEntity=fromEntity(entity);
  List<MvccLogEntry> logEntries=new ArrayList<MvccLogEntry>();
  logEntries.add(new MvccLogEntryImpl(entity.getId(),UUIDGenerator.newTimeUUID(),Stage.ACTIVE));
  logEntries.add(new MvccLogEntryImpl(entity.getId(),UUIDGenerator.newTimeUUID(),Stage.COMMITTED));
  MvccLogEntrySerializationStrategy noConflictLog=mock(MvccLogEntrySerializationStrategy.class);
  when(noConflictLog.load(collectionScope,entity.getId(),entity.getVersion(),2)).thenReturn(logEntries);
  WriteOptimisticVerify newStage=new WriteOptimisticVerify(noConflictLog);
  CollectionIoEvent<MvccEntity> result;
  result=newStage.call(new CollectionIoEvent<MvccEntity>(collectionScope,mvccEntity));
  assertSame("Context was correct",collectionScope,result.getEntityCollection());
  MvccEntity entry=result.getEvent();
  assertSame("Id correct",entity.getId(),entry.getId());
  assertSame("Version did not not match entityId",entity.getVersion(),entry.getVersion());
  assertSame("Entity correct",entity,entry.getEntity().get());
}
