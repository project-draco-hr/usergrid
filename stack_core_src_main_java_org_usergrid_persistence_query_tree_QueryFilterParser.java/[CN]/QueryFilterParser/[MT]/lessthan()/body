{
  QueryFilterParser.lessthan_return retval=new QueryFilterParser.lessthan_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LT4=null;
  QueryFilterParser.property_return property3=null;
  QueryFilterParser.value_return value5=null;
  Object LT4_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_lessthan737);
      property3=property();
      state._fsp--;
      adaptor.addChild(root_0,property3.getTree());
      LT4=(Token)match(input,LT,FOLLOW_LT_in_lessthan739);
      LT4_tree=new LessThan(LT4);
      root_0=(Object)adaptor.becomeRoot(LT4_tree,root_0);
      pushFollow(FOLLOW_value_in_lessthan745);
      value5=value();
      state._fsp--;
      adaptor.addChild(root_0,value5.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
