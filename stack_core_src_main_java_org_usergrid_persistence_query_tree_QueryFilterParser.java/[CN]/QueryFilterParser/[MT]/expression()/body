{
  QueryFilterParser.expression_return retval=new QueryFilterParser.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal53=null;
  QueryFilterParser.andexp_return andexp52=null;
  QueryFilterParser.andexp_return andexp54=null;
  Object string_literal53_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andexp_in_expression1044);
      andexp52=andexp();
      state._fsp--;
      adaptor.addChild(root_0,andexp52.getTree());
      loop9:       do {
        int alt9=2;
switch (input.LA(1)) {
case 32:
{
            alt9=1;
          }
        break;
    }
switch (alt9) {
case 1:
{
        string_literal53=(Token)match(input,32,FOLLOW_32_in_expression1047);
        string_literal53_tree=new OrOperand(string_literal53);
        root_0=(Object)adaptor.becomeRoot(string_literal53_tree,root_0);
        pushFollow(FOLLOW_andexp_in_expression1053);
        andexp54=andexp();
        state._fsp--;
        adaptor.addChild(root_0,andexp54.getTree());
      }
    break;
default :
  break loop9;
}
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
