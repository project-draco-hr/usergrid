{
  QueryFilterParser.expression_return retval=new QueryFilterParser.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OR55=null;
  QueryFilterParser.andexp_return andexp54=null;
  QueryFilterParser.andexp_return andexp56=null;
  Object OR55_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andexp_in_expression1378);
      andexp54=andexp();
      state._fsp--;
      adaptor.addChild(root_0,andexp54.getTree());
      loop9:       do {
        int alt9=2;
switch (input.LA(1)) {
case OR:
{
            alt9=1;
          }
        break;
    }
switch (alt9) {
case 1:
{
        OR55=(Token)match(input,OR,FOLLOW_OR_in_expression1381);
        OR55_tree=new OrOperand(OR55);
        root_0=(Object)adaptor.becomeRoot(OR55_tree,root_0);
        pushFollow(FOLLOW_andexp_in_expression1387);
        andexp56=andexp();
        state._fsp--;
        adaptor.addChild(root_0,andexp56.getTree());
      }
    break;
default :
  break loop9;
}
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
