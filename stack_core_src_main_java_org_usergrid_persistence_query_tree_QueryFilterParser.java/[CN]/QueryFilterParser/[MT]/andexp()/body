{
  QueryFilterParser.andexp_return retval=new QueryFilterParser.andexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal47=null;
  QueryFilterParser.notexp_return notexp46=null;
  QueryFilterParser.notexp_return notexp48=null;
  Object string_literal47_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_notexp_in_andexp1006);
      notexp46=notexp();
      state._fsp--;
      adaptor.addChild(root_0,notexp46.getTree());
      loop5:       do {
        int alt5=2;
switch (input.LA(1)) {
case 26:
{
            alt5=1;
          }
        break;
    }
switch (alt5) {
case 1:
{
        string_literal47=(Token)match(input,26,FOLLOW_26_in_andexp1009);
        string_literal47_tree=new AndOperand(string_literal47);
        root_0=(Object)adaptor.becomeRoot(string_literal47_tree,root_0);
        pushFollow(FOLLOW_notexp_in_andexp1015);
        notexp48=notexp();
        state._fsp--;
        adaptor.addChild(root_0,notexp48.getTree());
      }
    break;
default :
  break loop5;
}
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
