{
  QueryFilterParser.andexp_return retval=new QueryFilterParser.andexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal27=null;
  QueryFilterParser.notexp_return notexp26=null;
  QueryFilterParser.notexp_return notexp28=null;
  Object string_literal27_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_notexp_in_andexp874);
      notexp26=notexp();
      state._fsp--;
      adaptor.addChild(root_0,notexp26.getTree());
      loop3:       do {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == 28)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            string_literal27=(Token)match(input,28,FOLLOW_28_in_andexp877);
            string_literal27_tree=(Object)adaptor.create(string_literal27);
            root_0=(Object)adaptor.becomeRoot(string_literal27_tree,root_0);
            pushFollow(FOLLOW_notexp_in_andexp880);
            notexp28=notexp();
            state._fsp--;
            adaptor.addChild(root_0,notexp28.getTree());
          }
        break;
default :
      break loop3;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
