{
  QueryFilterParser.equalityop_return retval=new QueryFilterParser.equalityop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LT12=null;
  Token LTE13=null;
  Token EQ14=null;
  Token GT15=null;
  Token GTE16=null;
  QueryFilterParser.property_return p=null;
  QueryFilterParser.value_return v=null;
  Object LT12_tree=null;
  Object LTE13_tree=null;
  Object EQ14_tree=null;
  Object GT15_tree=null;
  Object GTE16_tree=null;
  try {
    int alt2=5;
    int LA2_0=input.LA(1);
    if ((LA2_0 == ID)) {
switch (input.LA(2)) {
case LTE:
{
          alt2=2;
        }
      break;
case GTE:
{
      alt2=5;
    }
  break;
case GT:
{
  alt2=4;
}
break;
case LT:
{
alt2=1;
}
break;
case EQ:
{
alt2=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,1,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop854);
p=property();
state._fsp--;
adaptor.addChild(root_0,p.getTree());
LT12=(Token)match(input,LT,FOLLOW_LT_in_equalityop856);
LT12_tree=(Object)adaptor.create(LT12);
adaptor.addChild(root_0,LT12_tree);
pushFollow(FOLLOW_value_in_equalityop860);
v=value();
state._fsp--;
adaptor.addChild(root_0,v.getTree());
retval.op=new LessThan(p.property,v.value);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop869);
p=property();
state._fsp--;
adaptor.addChild(root_0,p.getTree());
LTE13=(Token)match(input,LTE,FOLLOW_LTE_in_equalityop871);
LTE13_tree=(Object)adaptor.create(LTE13);
adaptor.addChild(root_0,LTE13_tree);
pushFollow(FOLLOW_value_in_equalityop875);
v=value();
state._fsp--;
adaptor.addChild(root_0,v.getTree());
retval.op=new LessThanEqual(p.property,v.value);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop885);
p=property();
state._fsp--;
adaptor.addChild(root_0,p.getTree());
EQ14=(Token)match(input,EQ,FOLLOW_EQ_in_equalityop887);
EQ14_tree=(Object)adaptor.create(EQ14);
adaptor.addChild(root_0,EQ14_tree);
pushFollow(FOLLOW_value_in_equalityop891);
v=value();
state._fsp--;
adaptor.addChild(root_0,v.getTree());
retval.op=new Equal(p.property,v.value);
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop900);
p=property();
state._fsp--;
adaptor.addChild(root_0,p.getTree());
GT15=(Token)match(input,GT,FOLLOW_GT_in_equalityop902);
GT15_tree=(Object)adaptor.create(GT15);
adaptor.addChild(root_0,GT15_tree);
pushFollow(FOLLOW_value_in_equalityop906);
v=value();
state._fsp--;
adaptor.addChild(root_0,v.getTree());
retval.op=new GreaterThan(p.property,v.value);
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop915);
p=property();
state._fsp--;
adaptor.addChild(root_0,p.getTree());
GTE16=(Token)match(input,GTE,FOLLOW_GTE_in_equalityop917);
GTE16_tree=(Object)adaptor.create(GTE16);
adaptor.addChild(root_0,GTE16_tree);
pushFollow(FOLLOW_value_in_equalityop921);
v=value();
state._fsp--;
adaptor.addChild(root_0,v.getTree());
retval.op=new LessThan(p.property,v.value);
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
