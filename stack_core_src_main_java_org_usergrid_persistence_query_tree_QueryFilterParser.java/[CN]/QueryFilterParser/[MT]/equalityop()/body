{
  QueryFilterParser.equalityop_return retval=new QueryFilterParser.equalityop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LT13=null;
  Token LTE16=null;
  Token EQ19=null;
  Token GT22=null;
  Token GTE25=null;
  QueryFilterParser.property_return property12=null;
  QueryFilterParser.value_return value14=null;
  QueryFilterParser.property_return property15=null;
  QueryFilterParser.value_return value17=null;
  QueryFilterParser.property_return property18=null;
  QueryFilterParser.value_return value20=null;
  QueryFilterParser.property_return property21=null;
  QueryFilterParser.value_return value23=null;
  QueryFilterParser.property_return property24=null;
  QueryFilterParser.value_return value26=null;
  Object LT13_tree=null;
  Object LTE16_tree=null;
  Object EQ19_tree=null;
  Object GT22_tree=null;
  Object GTE25_tree=null;
  try {
    int alt2=5;
switch (input.LA(1)) {
case ID:
{
switch (input.LA(2)) {
case LT:
{
            alt2=1;
          }
        break;
case LTE:
{
        alt2=2;
      }
    break;
case EQ:
{
    alt2=3;
  }
break;
case GT:
{
alt2=4;
}
break;
case GTE:
{
alt2=5;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,1,input);
throw nvae;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop812);
property12=property();
state._fsp--;
adaptor.addChild(root_0,property12.getTree());
LT13=(Token)match(input,LT,FOLLOW_LT_in_equalityop814);
LT13_tree=new LessThan(LT13);
root_0=(Object)adaptor.becomeRoot(LT13_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop820);
value14=value();
state._fsp--;
adaptor.addChild(root_0,value14.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop825);
property15=property();
state._fsp--;
adaptor.addChild(root_0,property15.getTree());
LTE16=(Token)match(input,LTE,FOLLOW_LTE_in_equalityop827);
LTE16_tree=new LessThanEqual(LTE16);
root_0=(Object)adaptor.becomeRoot(LTE16_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop833);
value17=value();
state._fsp--;
adaptor.addChild(root_0,value17.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop838);
property18=property();
state._fsp--;
adaptor.addChild(root_0,property18.getTree());
EQ19=(Token)match(input,EQ,FOLLOW_EQ_in_equalityop840);
EQ19_tree=new Equal(EQ19);
root_0=(Object)adaptor.becomeRoot(EQ19_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop846);
value20=value();
state._fsp--;
adaptor.addChild(root_0,value20.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop851);
property21=property();
state._fsp--;
adaptor.addChild(root_0,property21.getTree());
GT22=(Token)match(input,GT,FOLLOW_GT_in_equalityop853);
GT22_tree=new GreaterThan(GT22);
root_0=(Object)adaptor.becomeRoot(GT22_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop859);
value23=value();
state._fsp--;
adaptor.addChild(root_0,value23.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_property_in_equalityop864);
property24=property();
state._fsp--;
adaptor.addChild(root_0,property24.getTree());
GTE25=(Token)match(input,GTE,FOLLOW_GTE_in_equalityop866);
GTE25_tree=new GreaterThanEqual(GTE25);
root_0=(Object)adaptor.becomeRoot(GTE25_tree,root_0);
pushFollow(FOLLOW_value_in_equalityop872);
value26=value();
state._fsp--;
adaptor.addChild(root_0,value26.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
