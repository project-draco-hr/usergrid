{
  QueryFilterParser.equalityop_return retval=new QueryFilterParser.equalityop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LT4=null;
  Token LTE5=null;
  Token EQ6=null;
  Token GT7=null;
  Token GTE8=null;
  QueryFilterParser.property_return property3=null;
  QueryFilterParser.value_return value9=null;
  Object LT4_tree=null;
  Object LTE5_tree=null;
  Object EQ6_tree=null;
  Object GT7_tree=null;
  Object GTE8_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_equalityop739);
      property3=property();
      state._fsp--;
      adaptor.addChild(root_0,property3.getTree());
      int alt1=5;
switch (input.LA(1)) {
case LT:
{
          alt1=1;
        }
      break;
case LTE:
{
      alt1=2;
    }
  break;
case EQ:
{
  alt1=3;
}
break;
case GT:
{
alt1=4;
}
break;
case GTE:
{
alt1=5;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
LT4=(Token)match(input,LT,FOLLOW_LT_in_equalityop743);
LT4_tree=new LessThan(LT4);
root_0=(Object)adaptor.becomeRoot(LT4_tree,root_0);
}
break;
case 2:
{
LTE5=(Token)match(input,LTE,FOLLOW_LTE_in_equalityop752);
LTE5_tree=new LessThanEqual(LTE5);
root_0=(Object)adaptor.becomeRoot(LTE5_tree,root_0);
}
break;
case 3:
{
EQ6=(Token)match(input,EQ,FOLLOW_EQ_in_equalityop762);
EQ6_tree=new Equal(EQ6);
root_0=(Object)adaptor.becomeRoot(EQ6_tree,root_0);
}
break;
case 4:
{
GT7=(Token)match(input,GT,FOLLOW_GT_in_equalityop772);
GT7_tree=new GreaterThan(GT7);
root_0=(Object)adaptor.becomeRoot(GT7_tree,root_0);
}
break;
case 5:
{
GTE8=(Token)match(input,GTE,FOLLOW_GTE_in_equalityop782);
GTE8_tree=new GreaterThanEqual(GTE8);
root_0=(Object)adaptor.becomeRoot(GTE8_tree,root_0);
}
break;
}
pushFollow(FOLLOW_value_in_equalityop790);
value9=value();
state._fsp--;
adaptor.addChild(root_0,value9.getTree());
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
