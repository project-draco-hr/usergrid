{
  QueryFilterParser.intliteral_return retval=new QueryFilterParser.intliteral_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INT3=null;
  Object INT3_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      INT3=(Token)match(input,INT,FOLLOW_INT_in_intliteral701);
      INT3_tree=new IntegerLiteral(INT3);
      adaptor.addChild(root_0,INT3_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
