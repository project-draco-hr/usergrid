{
  QueryFilterParser.notexp_return retval=new QueryFilterParser.notexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal23=null;
  QueryFilterParser.operation_return operation24=null;
  QueryFilterParser.operation_return operation25=null;
  Object string_literal23_tree=null;
  try {
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == 27)) {
      alt2=1;
    }
 else     if ((LA2_0 == ID || LA2_0 == 25)) {
      alt2=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",2,0,input);
      throw nvae;
    }
switch (alt2) {
case 1:
{
        root_0=(Object)adaptor.nil();
        string_literal23=(Token)match(input,27,FOLLOW_27_in_notexp853);
        string_literal23_tree=(Object)adaptor.create(string_literal23);
        root_0=(Object)adaptor.becomeRoot(string_literal23_tree,root_0);
        pushFollow(FOLLOW_operation_in_notexp856);
        operation24=operation();
        state._fsp--;
        adaptor.addChild(root_0,operation24.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_operation_in_notexp858);
    operation25=operation();
    state._fsp--;
    adaptor.addChild(root_0,operation25.getTree());
  }
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
