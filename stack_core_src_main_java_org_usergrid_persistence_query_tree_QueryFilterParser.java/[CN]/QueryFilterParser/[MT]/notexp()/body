{
  QueryFilterParser.notexp_return retval=new QueryFilterParser.notexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal43=null;
  QueryFilterParser.operation_return operation44=null;
  QueryFilterParser.operation_return operation45=null;
  Object string_literal43_tree=null;
  try {
    int alt4=2;
switch (input.LA(1)) {
case 30:
{
        alt4=1;
      }
    break;
case ID:
case 21:
{
    alt4=2;
  }
break;
default :
NoViableAltException nvae=new NoViableAltException("",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
root_0=(Object)adaptor.nil();
string_literal43=(Token)match(input,30,FOLLOW_30_in_notexp974);
string_literal43_tree=new NotOperand(string_literal43);
root_0=(Object)adaptor.becomeRoot(string_literal43_tree,root_0);
pushFollow(FOLLOW_operation_in_notexp980);
operation44=operation();
state._fsp--;
adaptor.addChild(root_0,operation44.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_operation_in_notexp986);
operation45=operation();
state._fsp--;
adaptor.addChild(root_0,operation45.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
