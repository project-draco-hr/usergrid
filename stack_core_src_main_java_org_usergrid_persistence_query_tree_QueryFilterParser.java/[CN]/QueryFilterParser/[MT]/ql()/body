{
  QueryFilterParser.ql_return retval=new QueryFilterParser.ql_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal66=null;
  Token string_literal68=null;
  Token string_literal70=null;
  Token char_literal72=null;
  QueryFilterParser.select_expr_return select_expr67=null;
  QueryFilterParser.expression_return expression69=null;
  QueryFilterParser.order_return order71=null;
  QueryFilterParser.order_return order73=null;
  Object string_literal66_tree=null;
  Object string_literal68_tree=null;
  Object string_literal70_tree=null;
  Object char_literal72_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      string_literal66=(Token)match(input,34,FOLLOW_34_in_ql1180);
      pushFollow(FOLLOW_select_expr_in_ql1183);
      select_expr67=select_expr();
      state._fsp--;
      int alt11=2;
switch (input.LA(1)) {
case 35:
{
          alt11=1;
        }
      break;
  }
switch (alt11) {
case 1:
{
      string_literal68=(Token)match(input,35,FOLLOW_35_in_ql1187);
      pushFollow(FOLLOW_expression_in_ql1190);
      expression69=expression();
      state._fsp--;
      adaptor.addChild(root_0,expression69.getTree());
    }
  break;
}
int alt13=2;
switch (input.LA(1)) {
case 33:
{
  alt13=1;
}
break;
}
switch (alt13) {
case 1:
{
string_literal70=(Token)match(input,33,FOLLOW_33_in_ql1196);
pushFollow(FOLLOW_order_in_ql1199);
order71=order();
state._fsp--;
loop12: do {
int alt12=2;
switch (input.LA(1)) {
case 24:
{
    alt12=1;
  }
break;
}
switch (alt12) {
case 1:
{
char_literal72=(Token)match(input,24,FOLLOW_24_in_ql1203);
pushFollow(FOLLOW_order_in_ql1206);
order73=order();
state._fsp--;
}
break;
default :
break loop12;
}
}
 while (true);
}
break;
}
query.setRootOperand((Operand)(expression69 != null ? ((Object)expression69.tree) : null));
retval.query=query;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
