{
  QueryFilterParser.select_expr_return retval=new QueryFilterParser.select_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal42=null;
  Token char_literal44=null;
  Token char_literal46=null;
  Token char_literal48=null;
  Token char_literal50=null;
  QueryFilterParser.select_subject_return select_subject43=null;
  QueryFilterParser.select_subject_return select_subject45=null;
  QueryFilterParser.select_assign_return select_assign47=null;
  QueryFilterParser.select_assign_return select_assign49=null;
  Object char_literal42_tree=null;
  Object char_literal44_tree=null;
  Object char_literal46_tree=null;
  Object char_literal48_tree=null;
  Object char_literal50_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt8=3;
switch (input.LA(1)) {
case 33:
{
          alt8=1;
        }
      break;
case ID:
{
      alt8=2;
    }
  break;
case 34:
{
  alt8=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",8,0,input);
throw nvae;
}
switch (alt8) {
case 1:
{
char_literal42=(Token)match(input,33,FOLLOW_33_in_select_expr1021);
char_literal42_tree=(Object)adaptor.create(char_literal42);
adaptor.addChild(root_0,char_literal42_tree);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr1025);
select_subject43=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject43.getTree());
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 == 23)) {
alt6=1;
}
switch (alt6) {
case 1:
{
char_literal44=(Token)match(input,23,FOLLOW_23_in_select_expr1028);
char_literal44_tree=(Object)adaptor.create(char_literal44);
adaptor.addChild(root_0,char_literal44_tree);
pushFollow(FOLLOW_select_subject_in_select_expr1030);
select_subject45=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject45.getTree());
}
break;
default :
break loop6;
}
}
 while (true);
}
break;
case 3:
{
char_literal46=(Token)match(input,34,FOLLOW_34_in_select_expr1037);
char_literal46_tree=(Object)adaptor.create(char_literal46);
adaptor.addChild(root_0,char_literal46_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1039);
select_assign47=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign47.getTree());
loop7: do {
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == 23)) {
alt7=1;
}
switch (alt7) {
case 1:
{
char_literal48=(Token)match(input,23,FOLLOW_23_in_select_expr1042);
char_literal48_tree=(Object)adaptor.create(char_literal48);
adaptor.addChild(root_0,char_literal48_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1044);
select_assign49=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign49.getTree());
}
break;
default :
break loop7;
}
}
 while (true);
char_literal50=(Token)match(input,35,FOLLOW_35_in_select_expr1049);
char_literal50_tree=(Object)adaptor.create(char_literal50);
adaptor.addChild(root_0,char_literal50_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
