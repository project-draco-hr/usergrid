{
  QueryFilterParser.select_expr_return retval=new QueryFilterParser.select_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal60=null;
  Token char_literal62=null;
  Token char_literal64=null;
  Token char_literal66=null;
  Token char_literal68=null;
  QueryFilterParser.select_subject_return select_subject61=null;
  QueryFilterParser.select_subject_return select_subject63=null;
  QueryFilterParser.select_assign_return select_assign65=null;
  QueryFilterParser.select_assign_return select_assign67=null;
  Object char_literal60_tree=null;
  Object char_literal62_tree=null;
  Object char_literal64_tree=null;
  Object char_literal66_tree=null;
  Object char_literal68_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt13=3;
switch (input.LA(1)) {
case 23:
{
          alt13=1;
        }
      break;
case ID:
{
      alt13=2;
    }
  break;
case 37:
{
  alt13=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",13,0,input);
throw nvae;
}
switch (alt13) {
case 1:
{
char_literal60=(Token)match(input,23,FOLLOW_23_in_select_expr1148);
char_literal60_tree=(Object)adaptor.create(char_literal60);
adaptor.addChild(root_0,char_literal60_tree);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr1152);
select_subject61=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject61.getTree());
loop11: do {
int alt11=2;
switch (input.LA(1)) {
case 24:
{
alt11=1;
}
break;
}
switch (alt11) {
case 1:
{
char_literal62=(Token)match(input,24,FOLLOW_24_in_select_expr1155);
char_literal62_tree=(Object)adaptor.create(char_literal62);
adaptor.addChild(root_0,char_literal62_tree);
pushFollow(FOLLOW_select_subject_in_select_expr1157);
select_subject63=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject63.getTree());
}
break;
default :
break loop11;
}
}
 while (true);
}
break;
case 3:
{
char_literal64=(Token)match(input,37,FOLLOW_37_in_select_expr1164);
char_literal64_tree=(Object)adaptor.create(char_literal64);
adaptor.addChild(root_0,char_literal64_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1166);
select_assign65=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign65.getTree());
loop12: do {
int alt12=2;
switch (input.LA(1)) {
case 24:
{
alt12=1;
}
break;
}
switch (alt12) {
case 1:
{
char_literal66=(Token)match(input,24,FOLLOW_24_in_select_expr1169);
char_literal66_tree=(Object)adaptor.create(char_literal66);
adaptor.addChild(root_0,char_literal66_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1171);
select_assign67=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign67.getTree());
}
break;
default :
break loop12;
}
}
 while (true);
char_literal68=(Token)match(input,38,FOLLOW_38_in_select_expr1176);
char_literal68_tree=(Object)adaptor.create(char_literal68);
adaptor.addChild(root_0,char_literal68_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
