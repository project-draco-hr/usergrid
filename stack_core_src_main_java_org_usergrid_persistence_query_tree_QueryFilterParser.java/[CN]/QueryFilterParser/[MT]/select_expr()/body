{
  QueryFilterParser.select_expr_return retval=new QueryFilterParser.select_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal45=null;
  Token char_literal47=null;
  Token char_literal49=null;
  Token char_literal51=null;
  Token char_literal53=null;
  QueryFilterParser.select_subject_return select_subject46=null;
  QueryFilterParser.select_subject_return select_subject48=null;
  QueryFilterParser.select_assign_return select_assign50=null;
  QueryFilterParser.select_assign_return select_assign52=null;
  Object char_literal45_tree=null;
  Object char_literal47_tree=null;
  Object char_literal49_tree=null;
  Object char_literal51_tree=null;
  Object char_literal53_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt9=3;
switch (input.LA(1)) {
case 33:
{
          alt9=1;
        }
      break;
case ID:
{
      alt9=2;
    }
  break;
case 34:
{
  alt9=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",9,0,input);
throw nvae;
}
switch (alt9) {
case 1:
{
char_literal45=(Token)match(input,33,FOLLOW_33_in_select_expr1049);
char_literal45_tree=(Object)adaptor.create(char_literal45);
adaptor.addChild(root_0,char_literal45_tree);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr1053);
select_subject46=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject46.getTree());
loop7: do {
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == 23)) {
alt7=1;
}
switch (alt7) {
case 1:
{
char_literal47=(Token)match(input,23,FOLLOW_23_in_select_expr1056);
char_literal47_tree=(Object)adaptor.create(char_literal47);
adaptor.addChild(root_0,char_literal47_tree);
pushFollow(FOLLOW_select_subject_in_select_expr1058);
select_subject48=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject48.getTree());
}
break;
default :
break loop7;
}
}
 while (true);
}
break;
case 3:
{
char_literal49=(Token)match(input,34,FOLLOW_34_in_select_expr1065);
char_literal49_tree=(Object)adaptor.create(char_literal49);
adaptor.addChild(root_0,char_literal49_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1067);
select_assign50=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign50.getTree());
loop8: do {
int alt8=2;
int LA8_0=input.LA(1);
if ((LA8_0 == 23)) {
alt8=1;
}
switch (alt8) {
case 1:
{
char_literal51=(Token)match(input,23,FOLLOW_23_in_select_expr1070);
char_literal51_tree=(Object)adaptor.create(char_literal51);
adaptor.addChild(root_0,char_literal51_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1072);
select_assign52=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign52.getTree());
}
break;
default :
break loop8;
}
}
 while (true);
char_literal53=(Token)match(input,35,FOLLOW_35_in_select_expr1077);
char_literal53_tree=(Object)adaptor.create(char_literal53);
adaptor.addChild(root_0,char_literal53_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
