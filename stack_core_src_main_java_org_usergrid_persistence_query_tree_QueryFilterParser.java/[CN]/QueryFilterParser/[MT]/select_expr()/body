{
  QueryFilterParser.select_expr_return retval=new QueryFilterParser.select_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal57=null;
  Token char_literal59=null;
  Token char_literal61=null;
  Token char_literal63=null;
  Token char_literal65=null;
  QueryFilterParser.select_subject_return select_subject58=null;
  QueryFilterParser.select_subject_return select_subject60=null;
  QueryFilterParser.select_assign_return select_assign62=null;
  QueryFilterParser.select_assign_return select_assign64=null;
  Object char_literal57_tree=null;
  Object char_literal59_tree=null;
  Object char_literal61_tree=null;
  Object char_literal63_tree=null;
  Object char_literal65_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt10=3;
switch (input.LA(1)) {
case 23:
{
          alt10=1;
        }
      break;
case ID:
{
      alt10=2;
    }
  break;
case 37:
{
  alt10=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",10,0,input);
throw nvae;
}
switch (alt10) {
case 1:
{
char_literal57=(Token)match(input,23,FOLLOW_23_in_select_expr1132);
char_literal57_tree=(Object)adaptor.create(char_literal57);
adaptor.addChild(root_0,char_literal57_tree);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr1136);
select_subject58=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject58.getTree());
loop8: do {
int alt8=2;
switch (input.LA(1)) {
case 24:
{
alt8=1;
}
break;
}
switch (alt8) {
case 1:
{
char_literal59=(Token)match(input,24,FOLLOW_24_in_select_expr1139);
char_literal59_tree=(Object)adaptor.create(char_literal59);
adaptor.addChild(root_0,char_literal59_tree);
pushFollow(FOLLOW_select_subject_in_select_expr1141);
select_subject60=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject60.getTree());
}
break;
default :
break loop8;
}
}
 while (true);
}
break;
case 3:
{
char_literal61=(Token)match(input,37,FOLLOW_37_in_select_expr1148);
char_literal61_tree=(Object)adaptor.create(char_literal61);
adaptor.addChild(root_0,char_literal61_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1150);
select_assign62=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign62.getTree());
loop9: do {
int alt9=2;
switch (input.LA(1)) {
case 24:
{
alt9=1;
}
break;
}
switch (alt9) {
case 1:
{
char_literal63=(Token)match(input,24,FOLLOW_24_in_select_expr1153);
char_literal63_tree=(Object)adaptor.create(char_literal63);
adaptor.addChild(root_0,char_literal63_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1155);
select_assign64=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign64.getTree());
}
break;
default :
break loop9;
}
}
 while (true);
char_literal65=(Token)match(input,38,FOLLOW_38_in_select_expr1160);
char_literal65_tree=(Object)adaptor.create(char_literal65);
adaptor.addChild(root_0,char_literal65_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
