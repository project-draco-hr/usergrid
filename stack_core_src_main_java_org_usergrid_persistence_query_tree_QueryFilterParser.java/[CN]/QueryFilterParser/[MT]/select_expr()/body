{
  QueryFilterParser.select_expr_return retval=new QueryFilterParser.select_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal37=null;
  Token char_literal39=null;
  Token char_literal41=null;
  Token char_literal43=null;
  Token char_literal45=null;
  QueryFilterParser.select_subject_return select_subject38=null;
  QueryFilterParser.select_subject_return select_subject40=null;
  QueryFilterParser.select_assign_return select_assign42=null;
  QueryFilterParser.select_assign_return select_assign44=null;
  Object char_literal37_tree=null;
  Object char_literal39_tree=null;
  Object char_literal41_tree=null;
  Object char_literal43_tree=null;
  Object char_literal45_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt10=3;
switch (input.LA(1)) {
case 33:
{
          alt10=1;
        }
      break;
case ID:
{
      alt10=2;
    }
  break;
case 34:
{
  alt10=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",10,0,input);
throw nvae;
}
switch (alt10) {
case 1:
{
char_literal37=(Token)match(input,33,FOLLOW_33_in_select_expr1233);
char_literal37_tree=(Object)adaptor.create(char_literal37);
adaptor.addChild(root_0,char_literal37_tree);
}
break;
case 2:
{
pushFollow(FOLLOW_select_subject_in_select_expr1237);
select_subject38=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject38.getTree());
loop8: do {
int alt8=2;
int LA8_0=input.LA(1);
if ((LA8_0 == 23)) {
alt8=1;
}
switch (alt8) {
case 1:
{
char_literal39=(Token)match(input,23,FOLLOW_23_in_select_expr1240);
char_literal39_tree=(Object)adaptor.create(char_literal39);
adaptor.addChild(root_0,char_literal39_tree);
pushFollow(FOLLOW_select_subject_in_select_expr1242);
select_subject40=select_subject();
state._fsp--;
adaptor.addChild(root_0,select_subject40.getTree());
}
break;
default :
break loop8;
}
}
 while (true);
}
break;
case 3:
{
char_literal41=(Token)match(input,34,FOLLOW_34_in_select_expr1249);
char_literal41_tree=(Object)adaptor.create(char_literal41);
adaptor.addChild(root_0,char_literal41_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1251);
select_assign42=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign42.getTree());
loop9: do {
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == 23)) {
alt9=1;
}
switch (alt9) {
case 1:
{
char_literal43=(Token)match(input,23,FOLLOW_23_in_select_expr1254);
char_literal43_tree=(Object)adaptor.create(char_literal43);
adaptor.addChild(root_0,char_literal43_tree);
pushFollow(FOLLOW_select_assign_in_select_expr1256);
select_assign44=select_assign();
state._fsp--;
adaptor.addChild(root_0,select_assign44.getTree());
}
break;
default :
break loop9;
}
}
 while (true);
char_literal45=(Token)match(input,35,FOLLOW_35_in_select_expr1261);
char_literal45_tree=(Object)adaptor.create(char_literal45);
adaptor.addChild(root_0,char_literal45_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
