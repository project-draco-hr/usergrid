{
  QueryFilterParser.orexp_return retval=new QueryFilterParser.orexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal30=null;
  QueryFilterParser.andexp_return left=null;
  QueryFilterParser.andexp_return right=null;
  Object string_literal30_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andexp_in_orexp1119);
      left=andexp();
      state._fsp--;
      adaptor.addChild(root_0,left.getTree());
      loop6:       do {
        int alt6=2;
        int LA6_0=input.LA(1);
        if ((LA6_0 == 29)) {
          alt6=1;
        }
switch (alt6) {
case 1:
{
            string_literal30=(Token)match(input,29,FOLLOW_29_in_orexp1122);
            string_literal30_tree=(Object)adaptor.create(string_literal30);
            adaptor.addChild(root_0,string_literal30_tree);
            pushFollow(FOLLOW_andexp_in_orexp1126);
            right=andexp();
            state._fsp--;
            adaptor.addChild(root_0,right.getTree());
            retval.op=new OrOperand(left.op,right.op);
          }
        break;
default :
      break loop6;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
