{
  QueryFilterParser.orexp_return retval=new QueryFilterParser.orexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal33=null;
  QueryFilterParser.andexp_return andexp32=null;
  QueryFilterParser.andexp_return andexp34=null;
  Object string_literal33_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andexp_in_orexp921);
      andexp32=andexp();
      state._fsp--;
      adaptor.addChild(root_0,andexp32.getTree());
      loop5:       do {
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 == 29)) {
          alt5=1;
        }
switch (alt5) {
case 1:
{
            string_literal33=(Token)match(input,29,FOLLOW_29_in_orexp924);
            string_literal33_tree=(Object)adaptor.create(string_literal33);
            root_0=(Object)adaptor.becomeRoot(string_literal33_tree,root_0);
            pushFollow(FOLLOW_andexp_in_orexp927);
            andexp34=andexp();
            state._fsp--;
            adaptor.addChild(root_0,andexp34.getTree());
          }
        break;
default :
      break loop5;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
