{
  QueryFilterParser.operation_return retval=new QueryFilterParser.operation_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal20=null;
  Token char_literal22=null;
  QueryFilterParser.expression_return expression21=null;
  QueryFilterParser.equalityop_return equalityop23=null;
  QueryFilterParser.locationop_return locationop24=null;
  QueryFilterParser.containsop_return containsop25=null;
  Object char_literal20_tree=null;
  Object char_literal22_tree=null;
  try {
    int alt2=4;
    int LA2_0=input.LA(1);
    if ((LA2_0 == 25)) {
      alt2=1;
    }
 else     if ((LA2_0 == ID)) {
switch (input.LA(2)) {
case 24:
{
          alt2=4;
        }
      break;
case LT:
case LTE:
case EQ:
case GT:
case GTE:
{
      alt2=2;
    }
  break;
case 21:
{
  alt2=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",2,2,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(Object)adaptor.nil();
char_literal20=(Token)match(input,25,FOLLOW_25_in_operation853);
pushFollow(FOLLOW_expression_in_operation856);
expression21=expression();
state._fsp--;
adaptor.addChild(root_0,expression21.getTree());
char_literal22=(Token)match(input,26,FOLLOW_26_in_operation858);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_equalityop_in_operation863);
equalityop23=equalityop();
state._fsp--;
adaptor.addChild(root_0,equalityop23.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_locationop_in_operation867);
locationop24=locationop();
state._fsp--;
adaptor.addChild(root_0,locationop24.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_containsop_in_operation871);
containsop25=containsop();
state._fsp--;
adaptor.addChild(root_0,containsop25.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
