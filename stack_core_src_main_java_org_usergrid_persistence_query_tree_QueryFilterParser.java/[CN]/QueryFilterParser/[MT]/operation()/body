{
  QueryFilterParser.operation_return retval=new QueryFilterParser.operation_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal40=null;
  Token char_literal42=null;
  QueryFilterParser.expression_return expression41=null;
  QueryFilterParser.equalityop_return equalityop43=null;
  QueryFilterParser.locationop_return locationop44=null;
  QueryFilterParser.containsop_return containsop45=null;
  Object char_literal40_tree=null;
  Object char_literal42_tree=null;
  try {
    int alt6=4;
switch (input.LA(1)) {
case 21:
{
        alt6=1;
      }
    break;
case ID:
{
switch (input.LA(2)) {
case EQ:
case GT:
case GTE:
case LT:
case LTE:
{
        alt6=2;
      }
    break;
case 36:
{
    alt6=3;
  }
break;
case 28:
{
alt6=4;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",6,2,input);
throw nvae;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",6,0,input);
throw nvae;
}
switch (alt6) {
case 1:
{
root_0=(Object)adaptor.nil();
char_literal40=(Token)match(input,21,FOLLOW_21_in_operation947);
pushFollow(FOLLOW_expression_in_operation950);
expression41=expression();
state._fsp--;
adaptor.addChild(root_0,expression41.getTree());
char_literal42=(Token)match(input,22,FOLLOW_22_in_operation952);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_equalityop_in_operation960);
equalityop43=equalityop();
state._fsp--;
adaptor.addChild(root_0,equalityop43.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_locationop_in_operation968);
locationop44=locationop();
state._fsp--;
adaptor.addChild(root_0,locationop44.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_containsop_in_operation976);
containsop45=containsop();
state._fsp--;
adaptor.addChild(root_0,containsop45.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
