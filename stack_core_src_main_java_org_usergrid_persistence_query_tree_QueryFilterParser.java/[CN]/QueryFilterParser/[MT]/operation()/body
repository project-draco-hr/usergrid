{
  QueryFilterParser.operation_return retval=new QueryFilterParser.operation_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal17=null;
  Token char_literal19=null;
  QueryFilterParser.expression_return expression18=null;
  QueryFilterParser.equalityop_return equalityop20=null;
  QueryFilterParser.locationop_return locationop21=null;
  QueryFilterParser.containsop_return containsop22=null;
  Object char_literal17_tree=null;
  Object char_literal19_tree=null;
  try {
    int alt1=4;
    int LA1_0=input.LA(1);
    if ((LA1_0 == 25)) {
      alt1=1;
    }
 else     if ((LA1_0 == ID)) {
switch (input.LA(2)) {
case LT:
{
          alt1=2;
        }
      break;
case 24:
{
      alt1=4;
    }
  break;
case 21:
{
  alt1=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",1,2,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
root_0=(Object)adaptor.nil();
char_literal17=(Token)match(input,25,FOLLOW_25_in_operation825);
pushFollow(FOLLOW_expression_in_operation828);
expression18=expression();
state._fsp--;
adaptor.addChild(root_0,expression18.getTree());
char_literal19=(Token)match(input,26,FOLLOW_26_in_operation830);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_equalityop_in_operation835);
equalityop20=equalityop();
state._fsp--;
adaptor.addChild(root_0,equalityop20.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_locationop_in_operation839);
locationop21=locationop();
state._fsp--;
adaptor.addChild(root_0,locationop21.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_containsop_in_operation843);
containsop22=containsop();
state._fsp--;
adaptor.addChild(root_0,containsop22.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
