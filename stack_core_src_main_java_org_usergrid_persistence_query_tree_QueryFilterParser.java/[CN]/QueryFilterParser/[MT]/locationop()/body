{
  QueryFilterParser.locationop_return retval=new QueryFilterParser.locationop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal8=null;
  Token FLOAT9=null;
  Token string_literal10=null;
  Token FLOAT11=null;
  Token char_literal12=null;
  Token FLOAT13=null;
  QueryFilterParser.property_return property7=null;
  Object string_literal8_tree=null;
  Object FLOAT9_tree=null;
  Object string_literal10_tree=null;
  Object FLOAT11_tree=null;
  Object char_literal12_tree=null;
  Object FLOAT13_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_locationop773);
      property7=property();
      state._fsp--;
      adaptor.addChild(root_0,property7.getTree());
      string_literal8=(Token)match(input,21,FOLLOW_21_in_locationop775);
      string_literal8_tree=new Within(string_literal8);
      root_0=(Object)adaptor.becomeRoot(string_literal8_tree,root_0);
      FLOAT9=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop781);
      FLOAT9_tree=(Object)adaptor.create(FLOAT9);
      adaptor.addChild(root_0,FLOAT9_tree);
      string_literal10=(Token)match(input,22,FOLLOW_22_in_locationop783);
      string_literal10_tree=(Object)adaptor.create(string_literal10);
      adaptor.addChild(root_0,string_literal10_tree);
      FLOAT11=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop785);
      FLOAT11_tree=(Object)adaptor.create(FLOAT11);
      adaptor.addChild(root_0,FLOAT11_tree);
      char_literal12=(Token)match(input,23,FOLLOW_23_in_locationop787);
      char_literal12_tree=(Object)adaptor.create(char_literal12);
      adaptor.addChild(root_0,char_literal12_tree);
      FLOAT13=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop789);
      FLOAT13_tree=(Object)adaptor.create(FLOAT13);
      adaptor.addChild(root_0,FLOAT13_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
