{
  QueryFilterParser.locationop_return retval=new QueryFilterParser.locationop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal17=null;
  Token string_literal18=null;
  Token char_literal19=null;
  QueryFilterParser.property_return p=null;
  QueryFilterParser.floatliteral_return distance=null;
  QueryFilterParser.floatliteral_return lattitude=null;
  QueryFilterParser.floatliteral_return longitude=null;
  Object string_literal17_tree=null;
  Object string_literal18_tree=null;
  Object char_literal19_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_locationop943);
      p=property();
      state._fsp--;
      adaptor.addChild(root_0,p.getTree());
      string_literal17=(Token)match(input,21,FOLLOW_21_in_locationop945);
      string_literal17_tree=(Object)adaptor.create(string_literal17);
      adaptor.addChild(root_0,string_literal17_tree);
      pushFollow(FOLLOW_floatliteral_in_locationop949);
      distance=floatliteral();
      state._fsp--;
      adaptor.addChild(root_0,distance.getTree());
      string_literal18=(Token)match(input,22,FOLLOW_22_in_locationop951);
      string_literal18_tree=(Object)adaptor.create(string_literal18);
      adaptor.addChild(root_0,string_literal18_tree);
      pushFollow(FOLLOW_floatliteral_in_locationop955);
      lattitude=floatliteral();
      state._fsp--;
      adaptor.addChild(root_0,lattitude.getTree());
      char_literal19=(Token)match(input,23,FOLLOW_23_in_locationop957);
      char_literal19_tree=(Object)adaptor.create(char_literal19);
      adaptor.addChild(root_0,char_literal19_tree);
      pushFollow(FOLLOW_floatliteral_in_locationop961);
      longitude=floatliteral();
      state._fsp--;
      adaptor.addChild(root_0,longitude.getTree());
      retval.op=new Within(p.property,distance.value,lattitude.value,longitude.value);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
