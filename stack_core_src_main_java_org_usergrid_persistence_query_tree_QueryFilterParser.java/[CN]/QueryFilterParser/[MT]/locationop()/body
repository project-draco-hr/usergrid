{
  QueryFilterParser.locationop_return retval=new QueryFilterParser.locationop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal28=null;
  Token string_literal31=null;
  Token char_literal34=null;
  QueryFilterParser.property_return property27=null;
  QueryFilterParser.floatliteral_return floatliteral29=null;
  QueryFilterParser.intliteral_return intliteral30=null;
  QueryFilterParser.floatliteral_return floatliteral32=null;
  QueryFilterParser.intliteral_return intliteral33=null;
  QueryFilterParser.floatliteral_return floatliteral35=null;
  QueryFilterParser.intliteral_return intliteral36=null;
  Object string_literal28_tree=null;
  Object string_literal31_tree=null;
  Object char_literal34_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_locationop887);
      property27=property();
      state._fsp--;
      adaptor.addChild(root_0,property27.getTree());
      string_literal28=(Token)match(input,36,FOLLOW_36_in_locationop889);
      string_literal28_tree=new WithinOperand(string_literal28);
      root_0=(Object)adaptor.becomeRoot(string_literal28_tree,root_0);
      int alt3=2;
switch (input.LA(1)) {
case FLOAT:
{
          alt3=1;
        }
      break;
case INT:
{
      alt3=2;
    }
  break;
default :
NoViableAltException nvae=new NoViableAltException("",3,0,input);
throw nvae;
}
switch (alt3) {
case 1:
{
pushFollow(FOLLOW_floatliteral_in_locationop896);
floatliteral29=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral29.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_intliteral_in_locationop898);
intliteral30=intliteral();
state._fsp--;
adaptor.addChild(root_0,intliteral30.getTree());
}
break;
}
string_literal31=(Token)match(input,31,FOLLOW_31_in_locationop901);
int alt4=2;
switch (input.LA(1)) {
case FLOAT:
{
alt4=1;
}
break;
case INT:
{
alt4=2;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_floatliteral_in_locationop905);
floatliteral32=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral32.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_intliteral_in_locationop907);
intliteral33=intliteral();
state._fsp--;
adaptor.addChild(root_0,intliteral33.getTree());
}
break;
}
char_literal34=(Token)match(input,24,FOLLOW_24_in_locationop910);
int alt5=2;
switch (input.LA(1)) {
case FLOAT:
{
alt5=1;
}
break;
case INT:
{
alt5=2;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
pushFollow(FOLLOW_floatliteral_in_locationop914);
floatliteral35=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral35.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_intliteral_in_locationop916);
intliteral36=intliteral();
state._fsp--;
adaptor.addChild(root_0,intliteral36.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
