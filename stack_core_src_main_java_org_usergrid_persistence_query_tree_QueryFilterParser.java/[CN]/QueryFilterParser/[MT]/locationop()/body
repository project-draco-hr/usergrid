{
  QueryFilterParser.locationop_return retval=new QueryFilterParser.locationop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal11=null;
  Token FLOAT12=null;
  Token string_literal13=null;
  Token FLOAT14=null;
  Token char_literal15=null;
  Token FLOAT16=null;
  QueryFilterParser.property_return property10=null;
  Object string_literal11_tree=null;
  Object FLOAT12_tree=null;
  Object string_literal13_tree=null;
  Object FLOAT14_tree=null;
  Object char_literal15_tree=null;
  Object FLOAT16_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_locationop801);
      property10=property();
      state._fsp--;
      adaptor.addChild(root_0,property10.getTree());
      string_literal11=(Token)match(input,21,FOLLOW_21_in_locationop803);
      string_literal11_tree=new Within(string_literal11);
      root_0=(Object)adaptor.becomeRoot(string_literal11_tree,root_0);
      FLOAT12=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop809);
      FLOAT12_tree=(Object)adaptor.create(FLOAT12);
      adaptor.addChild(root_0,FLOAT12_tree);
      string_literal13=(Token)match(input,22,FOLLOW_22_in_locationop811);
      string_literal13_tree=(Object)adaptor.create(string_literal13);
      adaptor.addChild(root_0,string_literal13_tree);
      FLOAT14=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop813);
      FLOAT14_tree=(Object)adaptor.create(FLOAT14);
      adaptor.addChild(root_0,FLOAT14_tree);
      char_literal15=(Token)match(input,23,FOLLOW_23_in_locationop815);
      char_literal15_tree=(Object)adaptor.create(char_literal15);
      adaptor.addChild(root_0,char_literal15_tree);
      FLOAT16=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_locationop817);
      FLOAT16_tree=(Object)adaptor.create(FLOAT16);
      adaptor.addChild(root_0,FLOAT16_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
