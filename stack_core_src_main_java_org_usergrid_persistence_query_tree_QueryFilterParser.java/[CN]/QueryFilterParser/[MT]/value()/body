{
  QueryFilterParser.value_return retval=new QueryFilterParser.value_return();
  retval.start=input.LT(1);
  Object root_0=null;
  QueryFilterParser.booleanliteral_return booleanliteral7=null;
  QueryFilterParser.intliteral_return intliteral8=null;
  QueryFilterParser.uuidliteral_return uuidliteral9=null;
  QueryFilterParser.stringliteral_return stringliteral10=null;
  QueryFilterParser.floatliteral_return floatliteral11=null;
  try {
    int alt1=5;
switch (input.LA(1)) {
case BOOLEAN:
{
        alt1=1;
      }
    break;
case INT:
{
    alt1=2;
  }
break;
case UUID:
{
alt1=3;
}
break;
case STRING:
{
alt1=4;
}
break;
case FLOAT:
{
alt1=5;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_booleanliteral_in_value763);
booleanliteral7=booleanliteral();
state._fsp--;
adaptor.addChild(root_0,booleanliteral7.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_intliteral_in_value769);
intliteral8=intliteral();
state._fsp--;
adaptor.addChild(root_0,intliteral8.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_uuidliteral_in_value775);
uuidliteral9=uuidliteral();
state._fsp--;
adaptor.addChild(root_0,uuidliteral9.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_stringliteral_in_value781);
stringliteral10=stringliteral();
state._fsp--;
adaptor.addChild(root_0,stringliteral10.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_floatliteral_in_value787);
floatliteral11=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral11.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
