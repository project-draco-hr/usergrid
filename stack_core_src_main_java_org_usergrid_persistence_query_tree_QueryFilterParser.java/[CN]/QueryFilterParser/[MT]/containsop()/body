{
  QueryFilterParser.containsop_return retval=new QueryFilterParser.containsop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal15=null;
  Token STRING16=null;
  QueryFilterParser.property_return property14=null;
  Object string_literal15_tree=null;
  Object STRING16_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_containsop804);
      property14=property();
      state._fsp--;
      adaptor.addChild(root_0,property14.getTree());
      string_literal15=(Token)match(input,24,FOLLOW_24_in_containsop806);
      string_literal15_tree=new Contains(string_literal15);
      root_0=(Object)adaptor.becomeRoot(string_literal15_tree,root_0);
      STRING16=(Token)match(input,STRING,FOLLOW_STRING_in_containsop812);
      STRING16_tree=(Object)adaptor.create(STRING16);
      adaptor.addChild(root_0,STRING16_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
