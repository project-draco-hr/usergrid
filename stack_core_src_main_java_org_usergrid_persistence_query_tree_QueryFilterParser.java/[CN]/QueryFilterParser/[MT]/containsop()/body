{
  QueryFilterParser.containsop_return retval=new QueryFilterParser.containsop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal18=null;
  Token STRING19=null;
  QueryFilterParser.property_return property17=null;
  Object string_literal18_tree=null;
  Object STRING19_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_containsop832);
      property17=property();
      state._fsp--;
      adaptor.addChild(root_0,property17.getTree());
      string_literal18=(Token)match(input,24,FOLLOW_24_in_containsop834);
      string_literal18_tree=new Contains(string_literal18);
      root_0=(Object)adaptor.becomeRoot(string_literal18_tree,root_0);
      STRING19=(Token)match(input,STRING,FOLLOW_STRING_in_containsop840);
      STRING19_tree=(Object)adaptor.create(STRING19);
      adaptor.addChild(root_0,STRING19_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
