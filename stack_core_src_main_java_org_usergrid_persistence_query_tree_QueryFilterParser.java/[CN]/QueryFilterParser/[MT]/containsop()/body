{
  QueryFilterParser.containsop_return retval=new QueryFilterParser.containsop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal20=null;
  QueryFilterParser.property_return p=null;
  QueryFilterParser.stringliteral_return s=null;
  Object string_literal20_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_containsop983);
      p=property();
      state._fsp--;
      adaptor.addChild(root_0,p.getTree());
      string_literal20=(Token)match(input,24,FOLLOW_24_in_containsop985);
      string_literal20_tree=(Object)adaptor.create(string_literal20);
      adaptor.addChild(root_0,string_literal20_tree);
      pushFollow(FOLLOW_stringliteral_in_containsop989);
      s=stringliteral();
      state._fsp--;
      adaptor.addChild(root_0,s.getTree());
      retval.op=new Contains(p.property,s.value);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
