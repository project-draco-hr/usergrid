{
  QueryFilterParser.containsop_return retval=new QueryFilterParser.containsop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal35=null;
  QueryFilterParser.property_return property34=null;
  QueryFilterParser.stringliteral_return stringliteral36=null;
  Object string_literal35_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_property_in_containsop918);
      property34=property();
      state._fsp--;
      adaptor.addChild(root_0,property34.getTree());
      string_literal35=(Token)match(input,28,FOLLOW_28_in_containsop920);
      string_literal35_tree=new ContainsOperand(string_literal35);
      root_0=(Object)adaptor.becomeRoot(string_literal35_tree,root_0);
      pushFollow(FOLLOW_stringliteral_in_containsop926);
      stringliteral36=stringliteral();
      state._fsp--;
      adaptor.addChild(root_0,stringliteral36.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
