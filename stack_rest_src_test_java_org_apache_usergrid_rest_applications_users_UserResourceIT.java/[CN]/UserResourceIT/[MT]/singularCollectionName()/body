{
  UUID id=UUIDUtils.newTimeUUID();
  String username="username1" + id;
  String name="name1" + id;
  String email="email1" + id + "@usergrid.org";
  ApiResponse response=client.createUser(username,name,email,"password");
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  reindex("test-organization","test-app");
  UUID firstCreatedId=response.getEntities().get(0).getUuid();
  username="username2" + id;
  name="name2" + id;
  email="email2" + id + "@usergrid.org";
  response=client.createUser(username,name,email,"password");
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  reindex("test-organization","test-app");
  UUID secondCreatedId=response.getEntities().get(0).getUuid();
  String path=String.format("/test-organization/test-app/users/%s/conn1/%s",firstCreatedId,secondCreatedId);
  JsonNode node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
  reindex("test-organization","test-app");
  path=String.format("/test-organization/test-app/user/%s/conn2/%s",firstCreatedId,secondCreatedId);
  node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
  reindex("test-organization","test-app");
  path=String.format("/test-organization/test-app/users/%s/conn1",firstCreatedId);
  node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/user/%s/conn1",firstCreatedId);
  node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/users/%s/conn2",firstCreatedId);
  node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
  path=String.format("/test-organization/test-app/user/%s/conn2",firstCreatedId);
  node=mapper.readTree(resource().path(path).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertEquals(secondCreatedId.toString(),getEntity(node,0).get("uuid").asText());
}
