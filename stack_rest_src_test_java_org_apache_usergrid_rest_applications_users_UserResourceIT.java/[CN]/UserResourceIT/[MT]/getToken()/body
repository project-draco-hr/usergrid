{
  createUser("test_1","test_1@test.com","test123","Test1 User");
  createUser("test_2","test_2@test.com","test123","Test2 User");
  createUser("test_3","test_3@test.com","test123","Test3 User");
  refreshIndex("test-organization","test-app");
  ApplicationInfo appInfo=setup.getMgmtSvc().getApplicationInfo("test-organization/test-app");
  String clientId=setup.getMgmtSvc().getClientIdForApplication(appInfo.getId());
  String clientSecret=setup.getMgmtSvc().getClientSecretForApplication(appInfo.getId());
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/users/test_1/token").queryParam("client_id",clientId).queryParam("client_secret",clientSecret).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  String user_token_from_client_credentials=node.get("access_token").asText();
  UUID userId=UUID.fromString(node.get("user").get("uuid").asText());
  setup.getMgmtSvc().activateAppUser(appInfo.getId(),userId);
  String user_token_from_java=setup.getMgmtSvc().getAccessTokenForAppUser(appInfo.getId(),userId,1000000);
  assertNotNull(user_token_from_client_credentials);
  refreshIndex("test-organization","test-app");
  Status status=null;
  try {
    resource().path("/test-organization/test-app/users/test_1/token").queryParam("access_token","blah").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.UNAUTHORIZED,status);
  try {
    resource().path("/test-organization/test-app/users/test_2/token").queryParam("access_token",user_token_from_client_credentials).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.FORBIDDEN,status);
  JsonNode response=null;
  response=mapper.readTree(resource().path("/test-organization/test-app/users/test_1").queryParam("access_token",user_token_from_client_credentials).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  response=mapper.readTree(resource().path("/test-organization/test-app/users/test_1").queryParam("access_token",user_token_from_java).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  setup.getMgmtSvc().deactivateUser(appInfo.getId(),userId);
  refreshIndex("test-organization","test-app");
  try {
    resource().path("/test-organization/test-app/token").queryParam("grant_type","password").queryParam("username","test_1").queryParam("password","test123").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class);
    fail("request for deactivated user should fail");
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
    JsonNode body=mapper.readTree(uie.getResponse().getEntity(String.class));
    assertEquals("user not activated",body.findPath("error_description").textValue());
  }
}
