{
  final AtomicLong counter=new AtomicLong();
  AllEntitiesInSystemObservable.getAllEntitiesInSystem(managerCache,1000).flatMap(new Func1<AllEntitiesInSystemObservable.ApplicationEntityGroup,Observable<List<Edge>>>(){
    @Override public Observable<List<Edge>> call(    final AllEntitiesInSystemObservable.ApplicationEntityGroup applicationEntityGroup){
      return Observable.from(applicationEntityGroup.entityIds).flatMap(new Func1<Id,Observable<List<Edge>>>(){
        @Override public Observable<List<Edge>> call(        final Id id){
          logger.info("Migrating edges from node {} in scope {}",id,applicationEntityGroup.applicationScope);
          final GraphManager gm=managerCache.getGraphManager(applicationEntityGroup.applicationScope);
          return EdgesFromSourceObservable.edgesFromSource(gm,id).buffer(1000).doOnNext(new Action1<List<Edge>>(){
            @Override public void call(            final List<Edge> edges){
              final MutationBatch batch=keyspace.prepareMutationBatch();
              for (              final Edge edge : edges) {
                logger.info("Migrating meta for edge {}",edge);
                final MutationBatch edgeBatch=v2Serialization.writeEdge(applicationEntityGroup.applicationScope,edge);
                batch.mergeShallow(edgeBatch);
              }
              try {
                batch.execute();
              }
 catch (              ConnectionException e) {
                throw new RuntimeException("Unable to perform migration",e);
              }
              final long newCount=counter.addAndGet(edges.size());
              observer.update(getVersion(),String.format("Currently running.  Rewritten %d edge types",newCount));
            }
          }
);
        }
      }
);
    }
  }
).toBlocking().lastOrDefault(null);
  ;
}
