{
  logger.info("EntityDictionaryTest.testUserDictionaries");
  UUID applicationId=createApplication("testOrganization","testUserDictionaries");
  assertNotNull(applicationId);
  EntityManager em=emf.getEntityManager(applicationId);
  assertNotNull(em);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  Entity user=em.create("user",properties);
  assertNotNull(user);
  CredentialsInfo credentials=CredentialsInfo.plainTextCredentials("test");
  em.addToDictionary(user,"credentials","plaintext",credentials);
  Object o=em.getDictionaryElementValue(user,"credentials","plaintext");
  logger.info(JsonUtils.mapToFormattedJsonString(o));
  assertEquals(CredentialsInfo.class,o.getClass());
  credentials=CredentialsInfo.encryptedCredentials("salt","test");
  em.addToDictionary(user,"credentials","encrypted",credentials);
  o=em.getDictionaryElementValue(user,"credentials","encrypted");
  logger.info(JsonUtils.mapToFormattedJsonString(o));
  assertEquals(CredentialsInfo.class,o.getClass());
  CredentialsInfo c=(CredentialsInfo)o;
  assertNotSame("test",c.getSecret());
  assertEquals("test",c.getUnencryptedSecret("salt"));
  credentials=CredentialsInfo.hashedCredentials("salt","test");
  em.addToDictionary(user,"credentials","hashed",credentials);
  o=em.getDictionaryElementValue(user,"credentials","hashed");
  logger.info(JsonUtils.mapToFormattedJsonString(o));
  assertEquals(CredentialsInfo.class,o.getClass());
  c=(CredentialsInfo)o;
  assertNotSame("test",c.getSecret());
  assertTrue(credentials.compareSha1Secret("salt","test"));
}
