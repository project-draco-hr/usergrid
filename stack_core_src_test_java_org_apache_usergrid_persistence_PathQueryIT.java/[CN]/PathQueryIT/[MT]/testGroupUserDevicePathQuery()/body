{
  UUID applicationId=setup.createApplication("testOrganization" + UUIDGenerator.newTimeUUID(),"testGroupUserDevicePathQuery" + UUIDGenerator.newTimeUUID());
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  List<Entity> groups=new ArrayList<Entity>();
  for (int i=0; i < 4; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("index",i);
    properties.put("path","group_" + i);
    Entity created=em.create("group",properties);
    groups.add(created);
  }
  List<Entity> users=new ArrayList<Entity>();
  for (  Entity group : groups) {
    for (int i=0; i < 7; i++) {
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("index",i);
      properties.put("username",group.getProperty("path") + " user " + i);
      Entity created=em.create("user",properties);
      em.addToCollection(group,"users",created);
      users.add(created);
    }
  }
  app.refreshIndex();
  Results ru=em.getCollection(groups.get(2),"users",null,20,Level.IDS,false);
  assertEquals(7,ru.size());
  List<EntityRef> devices=new ArrayList<EntityRef>();
  for (  Entity user : users) {
    for (int i=0; i < 7; i++) {
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("index",i);
      Entity created=em.create("device",properties);
      devices.add(created);
      em.addToCollection(user,"devices",created);
    }
  }
  app.refreshIndex();
  Results rd=em.getCollection(users.get(6),"devices",null,20,Level.IDS,false);
  assertEquals(7,rd.size());
  int pageSize=3;
  Query groupQuery=Query.fromQL("select * where index <= 7 ");
  groupQuery.setCollection("groups");
  groupQuery.setLimit(pageSize);
  int expectedGroupQuerySize=4;
  Query userQuery=Query.fromQL("select * where index >= 2 AND index <= 6");
  userQuery.setCollection("users");
  userQuery.setLimit(pageSize);
  int expectedUserQuerySize=5;
  Query deviceQuery=Query.fromQL("select * where index >= 4 ");
  deviceQuery.setCollection("devices");
  deviceQuery.setLimit(pageSize);
  int expectedDeviceQuerySize=3;
  final PathQuery groupsPQ=new PathQuery(new SimpleEntityRef(em.getApplicationRef()),groupQuery);
  HashSet groupSet=new HashSet(expectedGroupQuerySize);
  Iterator<Entity> groupsIterator=groupsPQ.iterator(em);
  while (groupsIterator.hasNext()) {
    groupSet.add(groupsIterator.next());
  }
  assertEquals(expectedGroupQuerySize,groupSet.size());
  final PathQuery groupsPQ1=new PathQuery(new SimpleEntityRef(em.getApplicationRef()),groupQuery);
  PathQuery usersPQ1=groupsPQ1.chain(userQuery);
  final Iterator<Entity> userIterator=usersPQ1.iterator(em);
  final HashSet userSet=new HashSet(expectedGroupQuerySize * expectedUserQuerySize);
  while (userIterator.hasNext()) {
    userSet.add(userIterator.next());
  }
  assertEquals(expectedGroupQuerySize * expectedUserQuerySize,userSet.size());
  PathQuery groupsPQ2=new PathQuery(new SimpleEntityRef(em.getApplicationRef()),groupQuery);
  PathQuery usersPQ2=groupsPQ2.chain(userQuery);
  PathQuery<Entity> devicesPQ2=usersPQ2.chain(deviceQuery);
  final HashSet deviceSet=new HashSet(expectedGroupQuerySize * expectedUserQuerySize * expectedDeviceQuerySize);
  Iterator<Entity> i=devicesPQ2.iterator(em);
  while (i.hasNext()) {
    deviceSet.add(i.next());
  }
  assertEquals(expectedGroupQuerySize * expectedUserQuerySize * expectedDeviceQuerySize,deviceSet.size());
}
