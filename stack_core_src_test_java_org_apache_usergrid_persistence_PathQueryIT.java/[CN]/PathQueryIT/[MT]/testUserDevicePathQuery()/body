{
  UUID applicationId=setup.createApplication("testOrganization" + UUIDGenerator.newTimeUUID(),"testUserDevicePathQuery" + UUIDGenerator.newTimeUUID());
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  List<Entity> users=new ArrayList<Entity>();
  for (int i=0; i < 15; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("index",i);
    properties.put("username","user " + i);
    Entity created=em.create("user",properties);
    users.add(created);
  }
  List<EntityRef> deviceRefs=new ArrayList<EntityRef>();
  for (  Entity user : users) {
    for (int i=0; i < 5; i++) {
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("index",i);
      Entity created=em.create("device",properties);
      deviceRefs.add(created);
      em.addToCollection(user,"devices",created);
    }
  }
  app.refreshIndex();
  Results devices=em.getCollection(users.get(10),"devices",null,20,Level.IDS,false);
  assertEquals(5,devices.size());
  int pageSize=10;
  Query userQuery=Query.fromQL("select * where index >= 2 AND index <= 13");
  userQuery.setCollection("users");
  userQuery.setLimit(pageSize);
  int expectedUserQuerySize=12;
  Results results=em.searchCollection(em.getApplicationRef(),"users",userQuery);
  PagingResultsIterator pri=new PagingResultsIterator(results);
  int count=13;
  while (pri.hasNext()) {
    Entity e=(Entity)pri.next();
    assertEquals(count--,e.getProperty("index"));
  }
  assertEquals(count,1);
  Query deviceQuery=Query.fromQL("select * where index >= 2 ");
  deviceQuery.setCollection("devices");
  deviceQuery.setLimit(pageSize);
  int expectedDeviceQuerySize=3;
  PathQuery<EntityRef> usersPQ=new PathQuery<EntityRef>(new SimpleEntityRef(em.getApplicationRef()),userQuery);
  PathQuery<Entity> devicesPQ=usersPQ.chain(deviceQuery);
  HashSet set=new HashSet(expectedUserQuerySize * expectedDeviceQuerySize);
  Iterator<Entity> i=devicesPQ.iterator(em);
  while (i.hasNext()) {
    set.add(i.next());
  }
  assertEquals(expectedUserQuerySize * expectedDeviceQuerySize,set.size());
}
