{
  final UserInfo user=SubjectUtils.getUser();
  if (user == null) {
    return getAccessTokenInternal(ui,authorization,grant_type,username,password,client_id,client_secret,ttl,callback,false,true);
  }
  final long passwordChanged=management.getLastAdminPasswordChange(user.getUuid());
  final boolean ssoEnabled=Boolean.parseBoolean(properties.getProperty(USERGRID_EXTERNAL_SSO_ENABLED));
  long tokenTtl;
  PrincipalIdentifier userPrincipal=(PrincipalIdentifier)SecurityUtils.getSubject().getPrincipal();
  if (userPrincipal != null && userPrincipal.getAccessTokenCredentials() != null) {
    this.access_token=userPrincipal.getAccessTokenCredentials().getToken();
  }
  String ssoUserId=null;
  if (ssoEnabled && !user.getUsername().equals(properties.getProperty(USERGRID_SYSADMIN_LOGIN_NAME))) {
    ExternalSSOProvider provider=ssoProviderFactory.getProvider();
    final Map<String,String> decodedTokenDetails=provider.getDecodedTokenDetails(access_token);
    final String expiry=decodedTokenDetails.containsKey("expiry") ? decodedTokenDetails.get("expiry") : "0";
    tokenTtl=Long.valueOf(expiry) - System.currentTimeMillis() / 1000;
    if (provider instanceof ApigeeSSO2Provider) {
      ssoUserId=decodedTokenDetails.get("user_id");
    }
  }
 else {
    tokenTtl=tokens.getTokenInfo(access_token).getDuration();
  }
  final AccessInfo access_info=new AccessInfo().withExpiresIn(tokenTtl).withAccessToken(access_token).withPasswordChanged(passwordChanged);
  if (ssoEnabled) {
    access_info.setProperty("external_sso_user_id",ssoUserId);
  }
  access_info.setProperty("user",management.getAdminUserOrganizationData(user,true));
  return Response.status(SC_OK).type(jsonMediaType(callback)).entity(wrapWithCallback(access_info,callback)).build();
}
