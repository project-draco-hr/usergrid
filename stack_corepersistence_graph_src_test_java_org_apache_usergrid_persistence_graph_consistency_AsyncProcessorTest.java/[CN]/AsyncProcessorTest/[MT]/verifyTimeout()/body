{
  final long timeout=500;
  final TestEvent event=new TestEvent();
  final AsynchronousMessage<TestEvent> asynchronousMessage=new AsynchronousMessage<TestEvent>(){
    @Override public TestEvent getEvent(){
      return event;
    }
    @Override public long getTimeout(){
      return timeout;
    }
  }
;
  final TimeoutQueue queue=mock(TimeoutQueue.class);
  when(queue.take(1,10000l)).thenReturn(Collections.singletonList(asynchronousMessage));
  AsyncProcessor<TestEvent> processor=constructProcessor(queue);
  Collection<AsynchronousMessage<TestEvent>> timeouts=processor.getTimeouts(1,10000l);
  assertEquals(1,timeouts.size());
  AsynchronousMessage<TestEvent> returned=timeouts.iterator().next();
  assertSame(asynchronousMessage,returned);
}
