{
  final TestListener listener=new TestListener();
  final TestEvent event=new TestEvent();
  final AsynchronousMessage<TestEvent> asynchronousMessage=new AsynchronousMessage<TestEvent>(){
    @Override public TestEvent getEvent(){
      return event;
    }
    @Override public long getTimeout(){
      return 500;
    }
  }
;
  final TimeoutQueue queue=mock(TimeoutQueue.class);
  final AsyncProcessor asyncProcessor=constructProcessor(queue);
  asyncProcessor.addListener(listener);
  final CountDownLatch latch=new CountDownLatch(2);
  final TestCompleteListener completeListener=new TestCompleteListener(latch);
  asyncProcessor.addCompleteListener(completeListener);
  when(queue.remove(asynchronousMessage)).thenAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    final InvocationOnMock invocation) throws Throwable {
      latch.countDown();
      return true;
    }
  }
);
  asyncProcessor.start(asynchronousMessage);
  latch.await();
  final TestEvent firedEvent=listener.events.peek();
  assertSame(event,firedEvent);
  final TestEvent completeEvent=completeListener.events.peek();
  assertSame(event,completeEvent);
}
