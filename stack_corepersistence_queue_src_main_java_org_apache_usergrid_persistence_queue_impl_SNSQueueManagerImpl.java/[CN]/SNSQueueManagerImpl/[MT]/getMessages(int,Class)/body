{
  if (sqs == null) {
    logger.error("SQS is null - was not initialized properly");
    return new ArrayList<>(0);
  }
  String url=getReadQueue().getUrl();
  if (logger.isTraceEnabled()) {
    logger.trace("Getting up to {} messages from {}",limit,url);
  }
  ReceiveMessageRequest receiveMessageRequest=new ReceiveMessageRequest(url);
  receiveMessageRequest.setMaxNumberOfMessages(limit);
  receiveMessageRequest.setVisibilityTimeout(Math.max(MIN_VISIBILITY_TIMEOUT,fig.getVisibilityTimeout() / 1000));
  receiveMessageRequest.setWaitTimeSeconds(Math.max(0,(fig.getQueueClientSocketTimeout() - fig.getQueuePollTimeshift()) / 1000));
  try {
    ReceiveMessageResult result=sqs.receiveMessage(receiveMessageRequest);
    List<Message> messages=result.getMessages();
    if (logger.isTraceEnabled()) {
      logger.trace("Received {} messages from {}",messages.size(),url);
    }
    List<QueueMessage> queueMessages=new ArrayList<>(messages.size());
    for (    Message message : messages) {
      Object payload;
      final String originalBody=message.getBody();
      try {
        final JsonNode bodyNode=mapper.readTree(message.getBody());
        if (bodyNode.has("Message")) {
          final String snsNode=bodyNode.get("Message").asText();
          payload=deSerializeSQSMessage(snsNode,klass);
        }
 else {
          payload=deSerializeSQSMessage(originalBody,klass);
        }
      }
 catch (      Exception e) {
        logger.error("failed to deserialize message: {}",message.getBody(),e);
        throw new RuntimeException(e);
      }
      QueueMessage queueMessage=new QueueMessage(message.getMessageId(),message.getReceiptHandle(),payload,message.getAttributes().get("type"));
      queueMessage.setStringBody(originalBody);
      queueMessages.add(queueMessage);
    }
    return queueMessages;
  }
 catch (  com.amazonaws.services.sqs.model.QueueDoesNotExistException dne) {
    logger.error("Queue does not exist! [{}]",url,dne);
  }
catch (  Exception e) {
    logger.error("Programming error getting messages from queue=[{}] exist!",url,e);
  }
  return new ArrayList<>(0);
}
