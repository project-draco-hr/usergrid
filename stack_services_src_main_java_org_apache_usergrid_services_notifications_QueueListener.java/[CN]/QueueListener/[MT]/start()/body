{
  if (logger.isDebugEnabled()) {
    logger.debug("QueueListener: starting.");
  }
  int threadCount=0;
  try {
    sleepBetweenRuns=new Long(properties.getProperty("usergrid.notifications.listener.sleep.between","" + sleepBetweenRuns)).longValue();
    sleepWhenNoneFound=new Long(properties.getProperty("usergrid.notifications.listener.sleep.after","" + DEFAULT_SLEEP)).longValue();
    batchSize=new Integer(properties.getProperty("usergrid.notifications.listener.batchSize",("" + batchSize)));
    consecutiveCallsToRemoveDevices=new Integer(properties.getProperty("usergrid.notifications.inactive.interval","" + 200));
    queueName=ApplicationQueueManagerImpl.getQueueNames(properties);
    int maxThreads=new Integer(properties.getProperty("usergrid.notifications.listener.maxThreads","" + MAX_THREADS));
    futures=new ArrayList<Future>(maxThreads);
    pool=Executors.newFixedThreadPool(maxThreads);
    while (threadCount++ < maxThreads) {
      if (logger.isTraceEnabled()) {
        logger.trace("QueueListener: Starting thread {}.",threadCount);
      }
      final int threadNumber=threadCount;
      Runnable task=new Runnable(){
        @Override public void run(){
          try {
            execute(threadNumber);
          }
 catch (          Exception e) {
            if (pool.isShutdown()) {
              logger.warn("QueueListener: push listener pool already shut down.");
            }
 else {
              logger.error("QueueListener: threads interrupted",e);
            }
          }
        }
      }
;
      futures.add(pool.submit(task));
    }
  }
 catch (  Exception e) {
    logger.error("QueueListener: failed to start:",e);
  }
  if (logger.isTraceEnabled()) {
    logger.trace("QueueListener: done starting.");
  }
}
