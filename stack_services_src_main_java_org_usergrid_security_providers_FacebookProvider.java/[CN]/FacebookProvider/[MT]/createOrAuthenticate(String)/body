{
  Map<String,Object> fb_user=userFromResource(apiUrl,MapUtils.hashMap("access_token",externalToken));
  String fb_user_id=(String)fb_user.get("id");
  String fb_user_name=(String)fb_user.get("name");
  String fb_user_username=(String)fb_user.get("username");
  String fb_user_email=(String)fb_user.get("email");
  if (logger.isDebugEnabled()) {
    logger.debug(JsonUtils.mapToFormattedJsonString(fb_user));
  }
  User user=null;
  if ((fb_user != null) && !anyNull(fb_user_id,fb_user_name)) {
    Results r=null;
    try {
      r=entityManager.searchCollection(entityManager.getApplicationRef(),"users",Query.findForProperty("facebook.id",fb_user_id));
    }
 catch (    Exception ex) {
      throw new BadTokenException("Could not lookup user for that Facebook ID",ex);
    }
    if (r.size() > 1) {
      logger.error("Multiple users for FB ID: " + fb_user_id);
      throw new BadTokenException("multiple users with same Facebook ID");
    }
    if (r.size() < 1) {
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("facebook",fb_user);
      properties.put("username","fb_" + fb_user_id);
      properties.put("name",fb_user_name);
      properties.put("picture",String.format(pictureUrl,fb_user_id));
      if (fb_user_email != null) {
        try {
          user=managementService.getAppUserByIdentifier(entityManager.getApplication().getUuid(),Identifier.fromEmail(fb_user_email));
        }
 catch (        Exception ex) {
          throw new BadTokenException("Could not find existing user for this applicaiton for email: " + fb_user_email,ex);
        }
        if (user != null) {
          properties.remove("username");
          properties.remove("name");
          try {
            entityManager.updateProperties(user,properties);
          }
 catch (          Exception ex) {
            throw new BadTokenException("Could not update user with new credentials",ex);
          }
          user.setProperty(PROPERTY_MODIFIED,properties.get(PROPERTY_MODIFIED));
        }
 else {
          properties.put("email",fb_user_email);
        }
      }
      if (user == null) {
        properties.put("activated",true);
        try {
          user=entityManager.create("user",User.class,properties);
        }
 catch (        Exception ex) {
          throw new BadTokenException("Could not create user for that token",ex);
        }
      }
    }
 else {
      user=(User)r.getEntity().toTypedEntity();
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("facebook",fb_user);
      properties.put("picture",String.format(pictureUrl,fb_user_id));
      try {
        entityManager.updateProperties(user,properties);
        user.setProperty(PROPERTY_MODIFIED,properties.get(PROPERTY_MODIFIED));
        user.setProperty("facebook",fb_user);
        user.setProperty("picture",String.format(pictureUrl,fb_user_id));
      }
 catch (      Exception ex) {
        throw new BadTokenException("Could not update user properties",ex);
      }
    }
  }
 else {
    throw new BadTokenException("Unable to confirm Facebook access token");
  }
  return user;
}
