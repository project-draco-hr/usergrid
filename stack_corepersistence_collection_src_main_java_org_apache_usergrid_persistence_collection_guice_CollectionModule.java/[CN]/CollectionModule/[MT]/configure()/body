{
  CassandraConfigModule cassandraConfigModule=new CassandraConfigModule(overrides);
  Injector injector=Guice.createInjector(cassandraConfigModule);
  IDynamicCassandraConfig cassandraConfig=injector.getInstance(IDynamicCassandraConfig.class);
  if (ConfigurationManager.getConfigInstance() instanceof ConcurrentCompositeConfiguration) {
    ConcurrentCompositeConfiguration config=(ConcurrentCompositeConfiguration)ConfigurationManager.getConfigInstance();
    ConcurrentMapConfiguration mapConfiguration=new ConcurrentMapConfiguration((Map)overrides);
    if (!overrides.containsKey(CassandraThreadScheduler.RX_IO_THREADS)) {
      mapConfiguration.addProperty(CassandraThreadScheduler.RX_IO_THREADS,overrides.get(CassandraThreadScheduler.RX_IO_THREADS));
    }
    config.addConfigurationAtFront(mapConfiguration,"CollectionModule");
  }
  install(cassandraConfigModule);
  install(new SerializationModule(overrides));
  install(new ServiceModule());
  install(new FactoryModuleBuilder().implement(EntityCollectionManager.class,EntityCollectionManagerImpl.class).implement(EntityCollectionManagerSync.class,EntityCollectionManagerSyncImpl.class).build(EntityCollectionManagerFactory.class));
  new DynamicPropertyNames().bindProperty(binder(),CassandraThreadScheduler.RX_IO_THREADS,String.valueOf(cassandraConfig.getConnections()));
  bind(Scheduler.class).toProvider(CassandraThreadScheduler.class);
}
