{
  logger.info("Handling a query... ");
  OpReply reply=new OpReply(this);
  ApplicationInfo application=SubjectUtils.getApplication(Identifier.from(getDatabaseName()));
  if (application == null) {
    return reply;
  }
  int count=getNumberToReturn();
  if (count <= 0) {
    count=30;
  }
  EntityManager em=handler.getEmf().getEntityManager(application.getId());
  try {
    Results results=null;
    Query q=MongoQueryParser.toNativeQuery(query,numberToReturn);
    if (q != null) {
      results=em.searchCollection(em.getApplicationRef(),getCollectionName(),q);
    }
 else {
      results=em.getCollection(em.getApplicationRef(),getCollectionName(),null,count,Results.Level.ALL_PROPERTIES,false);
    }
    if (!results.isEmpty()) {
      for (      Entity entity : results.getEntities()) {
        Object savedId=entity.getProperty("_id");
        Object mongoId=null;
        if (savedId == null) {
          mongoId=entity.getUuid();
        }
 else {
          try {
            mongoId=new ObjectId(savedId.toString());
          }
 catch (          IllegalArgumentException iae) {
            mongoId=savedId;
          }
        }
        reply.addDocument(map(entry("_id",mongoId),toJsonMap(entity),entry(Schema.PROPERTY_UUID,entity.getUuid().toString())));
      }
    }
  }
 catch (  Exception ex) {
    logger.error("Unable to retrieve collections",ex);
  }
  return reply;
}
