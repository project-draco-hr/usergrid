{
  logger.debug("\n\nCreate 10 apps each with 10 entities");
  final String orgName=uniqueOrg();
  OrganizationOwnerInfo organization=orgAppRule.createOwnerAndOrganization(orgName,uniqueUsername(),uniqueEmail(),"Ed Anuff","test");
  List<UUID> appIds=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    UUID appId=setup.getMgmtSvc().createApplication(organization.getOrganization().getUuid(),"application" + i).getId();
    appIds.add(appId);
    EntityManager em=setup.getEmf().getEntityManager(appId);
    for (int j=0; j < 10; j++) {
      final String entityName="thing" + j;
      em.create("thing",new HashMap<String,Object>(){
{
          put("name",entityName);
        }
      }
);
    }
  }
  setup.refreshIndex();
  UUID mgmtAppId=setup.getEmf().getManagementAppId();
  EntityManager rootEm=setup.getEmf().getEntityManager(mgmtAppId);
  checkApplicationsOk(orgName);
  logger.debug("\n\nCreate old-style appinfo entities to be migrated\n");
  List<Entity> deletedApps=new ArrayList<>();
  setup.getEmf().initializeApplicationV2(CassandraService.DEFAULT_ORGANIZATION,CpNamingUtils.SYSTEM_APP_ID,"systemapp",null);
  EntityManager systemAppEm=setup.getEmf().getEntityManager(CpNamingUtils.SYSTEM_APP_ID);
  int count=0;
  for (  UUID appId : appIds) {
    final Entity applicationInfo=getApplicationInfo(appId);
    final String appName=applicationInfo.getName();
    final String finalOrgId=organization.getOrganization().getUuid().toString();
    final String finalAppId=applicationInfo.getProperty(Schema.PROPERTY_APPLICATION_ID).toString();
    systemAppEm.create("appinfo",new HashMap<String,Object>(){
{
        put("name",appName);
        put("organizationUuid",finalOrgId);
        put("applicationUuid",finalAppId);
      }
    }
);
    if (count++ % 2 == 0) {
      rootEm.delete(applicationInfo);
      deletedApps.add(applicationInfo);
    }
  }
  setup.refreshIndex();
  setup.getEmf().flushEntityManagerCaches();
  Thread.sleep(1000);
  checkApplicationsBroken(orgName,deletedApps);
  logger.debug("\n\nRun the migration\n");
  ProgressObserver po=Mockito.mock(ProgressObserver.class);
  setup.getAppInfoMigrationPlugin().run(po);
  logger.debug("\n\nVerify migration results\n");
  Mockito.verify(po,Mockito.times(10)).update(Mockito.anyInt(),Mockito.anyString());
  setup.refreshIndex();
  final Results appInfoResults=rootEm.searchCollection(new SimpleEntityRef("application",mgmtAppId),"appinfos",Query.fromQL("select *"));
  assertEquals(0,appInfoResults.size());
  final Results applicationInfoResults=rootEm.searchCollection(new SimpleEntityRef("application",mgmtAppId),"application_infos",Query.fromQL("select *"));
  assertEquals(10,applicationInfoResults.size());
  checkApplicationsOk(orgName);
}
