{
  context.clearUser();
  TestUser user1=new TestAppUser("testuser1@usergrid.org","password","testuser1@usergrid.org").create(context).login(context).makeActive(context);
  JsonNode city=context.application().collection("cities").create(MapUtils.hashMap("name","tempe"));
  String cityId=getEntity(city,0).get("uuid").asText();
  JsonNode data=context.application().collection("cities").entity("tempe").connection("likes").collection("restaurants").create(MapUtils.hashMap("name","4peaks"));
  String peaksId=getEntity(data,0).get("uuid").asText();
  context.clearUser();
  TestUser user2=new TestAppUser("testuser2@usergrid.org","password","testuser2@usergrid.org").create(context).login(context).makeActive(context);
  data=context.application().collection("cities").entity("tempe").connection("likes").collection("restaurants").create(MapUtils.hashMap("name","arrogantbutcher"));
  String arrogantButcherId=getEntity(data,0).get("uuid").asText();
  Connection likeRestaurants=context.withUser(user1).application().collection("cities").entity("tempe").connection("likes");
  data=likeRestaurants.entity(peaksId).get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=likeRestaurants.entity(arrogantButcherId).get();
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  data=likeRestaurants.collection("restaurants").entity(peaksId).get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=likeRestaurants.collection("restaurants").entity(arrogantButcherId).get();
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  data=likeRestaurants.collection("restaurants").entity(peaksId).delete();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=likeRestaurants.collection("restaurants").entity(arrogantButcherId).delete();
  assertNotNull(data);
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
}
