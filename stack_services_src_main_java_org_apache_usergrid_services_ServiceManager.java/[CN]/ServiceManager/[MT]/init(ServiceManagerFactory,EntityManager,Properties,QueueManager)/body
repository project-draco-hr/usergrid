{
  this.smf=smf;
  this.em=em;
  this.qm=qm;
  this.properties=properties;
  Integer retryInterval;
  try {
    Object retryIntervalObject=properties.get(SERVICE_MANAGER_RETRY_INTERVAL).toString();
    retryInterval=Integer.parseInt(retryIntervalObject.toString());
  }
 catch (  NumberFormatException nfe) {
    retryInterval=15000;
  }
  Integer maxRetries;
  try {
    Object maxRetriesObject=properties.get(SERVICE_MANAGER_MAX_RETRIES).toString();
    maxRetries=Integer.parseInt(maxRetriesObject.toString());
  }
 catch (  NumberFormatException nfe) {
    maxRetries=5;
  }
  if (em != null) {
    try {
      int retryCount=0;
      boolean appNotFound=true;
      while (appNotFound && retryCount <= maxRetries) {
        application=em.getApplication();
        if (application != null) {
          appNotFound=false;
          applicationId=application.getUuid();
        }
 else {
          logger.error("STARTUP PROBLEM: Cannot get application by UUID. Will retry in {} seconds #{}",retryInterval / 1000,retryCount);
          Thread.sleep(retryInterval);
          retryCount++;
        }
      }
      if (application == null) {
        Exception e=new RuntimeException("STARTUP FAILURE: application id {" + em.getApplicationId() + "} is returning null after "+ retryCount+ " retries");
        throw e;
      }
    }
 catch (    RuntimeException re) {
      logger.error("ServiceManager init failure",re);
      throw re;
    }
catch (    Exception e) {
      logger.error("ServiceManager init failure",e);
      throw new RuntimeException(e);
    }
  }
  if (properties != null) {
    String packages=properties.getProperty(SERVICE_PACKAGE_PREFIXES);
    if (!StringUtils.isEmpty(packages)) {
      setServicePackagePrefixes(packages);
    }
  }
  return this;
}
