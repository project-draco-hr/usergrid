{
  if (logger.isTraceEnabled()) {
    logger.trace("Filtering: {}",request.getUriInfo().getBaseUri());
  }
  if (bypassSecurityCheck(request)) {
    return;
  }
  Map<String,String> auth_types=getAuthTypes(request);
  if ((auth_types == null) || !auth_types.containsKey(AUTH_BASIC_TYPE)) {
    return;
  }
  String[] values=Base64.decodeToString(auth_types.get(AUTH_BASIC_TYPE)).split(":");
  if (values.length < 2) {
    return;
  }
  String name=values[0];
  String password=values[1];
  String sysadmin_login_name=properties.getProperty("usergrid.sysadmin.login.name");
  String sysadmin_login_password=properties.getProperty("usergrid.sysadmin.login.password");
  boolean sysadmin_login_allowed=Boolean.parseBoolean(properties.getProperty("usergrid.sysadmin.login.allowed"));
  if (name.equalsIgnoreCase(sysadmin_login_name) && sysadmin_login_allowed) {
    if (!password.equals(sysadmin_login_password)) {
      throw mappableSecurityException("unauthorized","No system access authorized",SecurityException.REALM);
    }
    try {
      UserInfo userInfo=null;
      String rawPath=request.getUriInfo().getAbsolutePath().getRawPath();
      if (rawPath.contains("superuser/setup") || rawPath.contains("database/setup") || rawPath.contains("database/bootstrap")) {
        request.setSecurityContext(new SysAdminRoleAuthenticator());
        return;
      }
 else {
        userInfo=management.verifyAdminUserPasswordCredentials(name.toLowerCase(),password);
      }
      PrincipalCredentialsToken token=PrincipalCredentialsToken.getFromAdminUserInfoAndPassword(userInfo,password,emf.getManagementAppId());
      Subject subject=SubjectUtils.getSubject();
      subject.login(token);
      if (logger.isTraceEnabled()) {
        logger.trace("System administrator access allowed");
      }
    }
 catch (    Exception e) {
      logger.error("Unable to validate admin credentials");
      throw mappableSecurityException("unauthorized","No system access authorized",SecurityException.REALM);
    }
  }
 else {
    try {
      PrincipalCredentialsToken token=management.getPrincipalCredentialsTokenForClientCredentials(name,password);
      Subject subject=SubjectUtils.getSubject();
      subject.login(token);
    }
 catch (    Exception e) {
      throw mappableSecurityException(INVALID_CLIENT_CREDENTIALS_ERROR);
    }
  }
}
