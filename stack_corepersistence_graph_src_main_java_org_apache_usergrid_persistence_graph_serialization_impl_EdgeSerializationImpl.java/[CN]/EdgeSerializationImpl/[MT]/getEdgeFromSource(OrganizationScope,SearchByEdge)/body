{
  ValidationUtils.validateOrganizationScope(scope);
  EdgeUtils.validateSearchByEdge(search);
  final Id sourceId=search.sourceNode();
  final Id targetId=search.targetNode();
  final String type=search.getType();
  final UUID maxVersion=search.getMaxVersion();
  final Optional<Edge> last=search.last();
  return getEdges(GRAPH_SOURCE_NODE_EDGES,new EdgeSearcher<RowKey>(){
    @Override public void setRange(    final RangeBuilder builder){
      if (search.last().isPresent()) {
        final Edge edge=search.last().get();
        DirectedEdge sourceEdge=new DirectedEdge(edge.getTargetNode(),edge.getVersion());
        builder.setStart(sourceEdge,EDGE_SERIALIZER);
      }
    }
    @Override public ScopedRowKey<OrganizationScope,RowKey> getRowKey(){
      final RowKey sourceRowKey=new RowKey(sourceId,type);
      return ScopedRowKey.fromKey(scope,sourceRowKey);
    }
    @Override public boolean hasPage(){
      return search.last().isPresent();
    }
    @Override public Edge parseColumn(    final Column<DirectedEdge> column){
      final DirectedEdge edge=column.getName();
      return new SimpleEdge(sourceId,type,edge.id,edge.version);
    }
  }
);
}
