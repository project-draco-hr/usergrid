{
  ValidationUtils.validateApplicationScope(scope);
  EdgeUtils.validateSearchByEdgeType(edgeType);
  final Id targetId=edgeType.getNode();
  final String type=edgeType.getType();
  final long maxTimestamp=edgeType.getMaxTimestamp();
  final EdgeSearcher<RowKey,DirectedEdge,MarkedEdge> searcher=new EdgeSearcher<RowKey,DirectedEdge,MarkedEdge>(scope,maxTimestamp,edgeType.last(),edgeShardStrategy.getReadShards(scope,targetId,maxTimestamp,type)){
    @Override protected Serializer<DirectedEdge> getSerializer(){
      return EDGE_SERIALIZER;
    }
    @Override protected RowKey generateRowKey(    long shard){
      return new RowKey(targetId,type,shard);
    }
    @Override protected DirectedEdge getStartColumn(    final Edge last){
      return new DirectedEdge(last.getSourceNode(),last.getTimestamp());
    }
    @Override protected MarkedEdge createEdge(    final DirectedEdge edge,    final boolean marked){
      return new SimpleMarkedEdge(edge.id,type,targetId,edge.timestamp,marked);
    }
  }
;
  return new ShardRowIterator<>(searcher,targetNodeEdgesCf);
}
