{
  ValidationUtils.validateOrganizationScope(scope);
  EdgeUtils.validateSearchByEdge(search);
  final Id targetId=search.targetNode();
  final Id sourceId=search.sourceNode();
  final String type=search.getType();
  final UUID maxVersion=search.getMaxVersion();
  final EdgeSearcher<EdgeRowKey,UUID,MarkedEdge> searcher=new EdgeSearcher<EdgeRowKey,UUID,MarkedEdge>(scope,maxVersion,search.last(),edgeShardStrategy.getReadShards(scope,sourceId,maxVersion,type)){
    @Override protected Serializer<UUID> getSerializer(){
      return UUID_SERIALIZER;
    }
    @Override public void setRange(    final RangeBuilder builder){
      if (last.isPresent()) {
        super.setRange(builder);
        return;
      }
      builder.setStart(maxVersion,UUID_SERIALIZER);
    }
    @Override protected EdgeRowKey generateRowKey(    long shard){
      return new EdgeRowKey(sourceId,type,targetId,shard);
    }
    @Override protected UUID getStartColumn(    final Edge last){
      return last.getVersion();
    }
    @Override protected MarkedEdge createEdge(    final UUID version,    final boolean marked){
      return new SimpleMarkedEdge(sourceId,type,targetId,version,marked);
    }
  }
;
  return new ShardRowIterator<>(searcher,graphEdgeVersionsCf);
}
