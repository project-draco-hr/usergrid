{
  ValidationUtils.validateOrganizationScope(scope);
  EdgeUtils.validateSearchByEdge(search);
  final Id targetId=search.targetNode();
  final Id sourceId=search.sourceNode();
  final String type=search.getType();
  final UUID maxVersion=search.getMaxVersion();
  final EdgeSearcher<RowKey> searcher=new EdgeSearcher<RowKey>(scope,maxVersion,search.last(),edgeShardStrategy.getReadShards(scope,sourceId,maxVersion,type)){
    @Override public void setRange(    final RangeBuilder builder){
      if (last.isPresent()) {
        super.setRange(builder);
        return;
      }
      final DirectedEdge last=new DirectedEdge(targetId,maxVersion);
      builder.setStart(last,EDGE_SERIALIZER);
    }
    @Override protected RowKey generateRowKey(    long shard){
      return new RowKey(sourceId,type,shard);
    }
    @Override protected DirectedEdge getStartColumn(    final Edge last){
      return new DirectedEdge(last.getTargetNode(),last.getVersion());
    }
    @Override protected MarkedEdge createEdge(    final DirectedEdge edge,    final boolean marked){
      return new SimpleMarkedEdge(sourceId,type,edge.id,edge.version,marked);
    }
  }
;
  return new ShardRowIterator<>(searcher,GRAPH_SOURCE_NODE_EDGES);
}
