{
  ValidationUtils.validateOrganizationScope(scope);
  EdgeUtils.validateSearchByEdgeType(edgeType);
  final Id sourceId=edgeType.getNode();
  final String type=edgeType.getType();
  final UUID maxVersion=edgeType.getMaxVersion();
  final EdgeSearcher<RowKey,DirectedEdge,MarkedEdge> searcher=new EdgeSearcher<RowKey,DirectedEdge,MarkedEdge>(scope,maxVersion,edgeType.last(),edgeShardStrategy.getReadShards(scope,sourceId,maxVersion,type)){
    @Override protected Serializer<DirectedEdge> getSerializer(){
      return EDGE_SERIALIZER;
    }
    @Override protected RowKey generateRowKey(    long shard){
      return new RowKey(sourceId,type,shard);
    }
    @Override protected DirectedEdge getStartColumn(    final Edge last){
      return new DirectedEdge(last.getTargetNode(),last.getVersion());
    }
    @Override protected MarkedEdge createEdge(    final DirectedEdge edge,    final boolean marked){
      return new SimpleMarkedEdge(sourceId,type,edge.id,edge.version,marked);
    }
  }
;
  return new ShardRowIterator<>(searcher,sourceNodeEdgesCf);
}
