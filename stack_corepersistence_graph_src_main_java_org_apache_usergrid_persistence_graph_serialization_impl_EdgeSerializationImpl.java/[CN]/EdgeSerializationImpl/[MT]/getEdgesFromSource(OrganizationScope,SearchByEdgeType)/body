{
  ValidationUtils.validateOrganizationScope(scope);
  EdgeUtils.validateSearchByEdgeType(edgeType);
  final Id sourceId=edgeType.getNode();
  final String type=edgeType.getType();
  return getEdges(scope,GRAPH_SOURCE_NODE_EDGES,new EdgeSearcher<RowKey>(){
    @Override public void setRange(    final RangeBuilder builder){
      if (edgeType.last().isPresent()) {
        final Edge edge=edgeType.last().get();
        DirectedEdge sourceEdge=new DirectedEdge(edge.getTargetNode(),edge.getVersion());
        builder.setStart(sourceEdge,EDGE_SERIALIZER);
      }
    }
    @Override public ScopedRowKey<OrganizationScope,RowKey> getRowKey(){
      final RowKey sourceRowKey=new RowKey(sourceId,type);
      return ScopedRowKey.fromKey(scope,sourceRowKey);
    }
    @Override public boolean hasPage(){
      return edgeType.last().isPresent();
    }
    @Override public Edge parseColumn(    final Column<DirectedEdge> column){
      final DirectedEdge edge=column.getName();
      return new SimpleEdge(sourceId,type,edge.id,edge.version);
    }
  }
);
}
