{
  GraphManager manager=factory.createEdgeManager(scope);
  final StopWatch timer=new StopWatch();
  timer.start();
  for (int i=0; i < writeLimit; i++) {
    Edge edge=generator.newEdge();
    Edge returned=manager.writeEdge(edge).toBlocking().last();
    assertNotNull("Returned has a version",returned.getTimestamp());
    if (i % 1000 == 0) {
      logger.info("   Wrote: " + i);
    }
  }
  timer.stop();
  logger.info("Total time to write {} entries {} ms",writeLimit,timer.getTime());
  timer.reset();
  timer.start();
  final CountDownLatch latch=new CountDownLatch(1);
  generator.doSearch(manager).take(readCount).buffer(1000).subscribe(new Subscriber<List<MarkedEdge>>(){
    @Override public void onCompleted(){
      timer.stop();
      latch.countDown();
    }
    @Override public void onError(    final Throwable throwable){
      fail("Exception occurced " + throwable);
    }
    @Override public void onNext(    final List<MarkedEdge> edges){
      logger.info("Read {} edges",edges.size());
    }
  }
);
  latch.await();
  logger.info("Total time to read {} entries {} ms",readCount,timer.getTime());
  return true;
}
