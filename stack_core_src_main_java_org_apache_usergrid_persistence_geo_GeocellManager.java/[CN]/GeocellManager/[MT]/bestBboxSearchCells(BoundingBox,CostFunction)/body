{
  if (bbox.getEast() < bbox.getWest()) {
    BoundingBox bboxAntimeridian1=new BoundingBox(bbox.getNorth(),bbox.getEast(),bbox.getSouth(),GeocellUtils.MIN_LONGITUDE);
    BoundingBox bboxAntimeridian2=new BoundingBox(bbox.getNorth(),GeocellUtils.MAX_LONGITUDE,bbox.getSouth(),bbox.getWest());
    List<String> antimeridianList=bestBboxSearchCells(bboxAntimeridian1,costFunction);
    antimeridianList.addAll(bestBboxSearchCells(bboxAntimeridian2,costFunction));
    return antimeridianList;
  }
  String cellNE=GeocellUtils.compute(bbox.getNorthEast(),GeocellManager.MAX_GEOCELL_RESOLUTION);
  String cellSW=GeocellUtils.compute(bbox.getSouthWest(),GeocellManager.MAX_GEOCELL_RESOLUTION);
  double minCost=Double.MAX_VALUE;
  List<String> minCostCellSet=new ArrayList<String>();
  int minResolution=0;
  int maxResoltuion=Math.min(cellNE.length(),cellSW.length());
  while (minResolution < maxResoltuion && cellNE.substring(0,minResolution + 1).startsWith(cellSW.substring(0,minResolution + 1))) {
    minResolution++;
  }
  for (int curResolution=minResolution; curResolution < GeocellManager.MAX_GEOCELL_RESOLUTION + 1; curResolution++) {
    String curNE=cellNE.substring(0,curResolution);
    String curSW=cellSW.substring(0,curResolution);
    int numCells=GeocellUtils.interpolationCount(curNE,curSW);
    if (numCells > MAX_FEASIBLE_BBOX_SEARCH_CELLS) {
      continue;
    }
    List<String> cellSet=GeocellUtils.interpolate(curNE,curSW);
    Collections.sort(cellSet);
    double cost;
    if (costFunction == null) {
      cost=DEFAULT_COST_FUNCTION.defaultCostFunction(cellSet.size(),curResolution);
    }
 else {
      cost=costFunction.defaultCostFunction(cellSet.size(),curResolution);
    }
    if (cost <= minCost) {
      minCost=cost;
      minCostCellSet=cellSet;
    }
 else {
      if (minCostCellSet.size() == 0) {
        minCostCellSet=cellSet;
      }
      break;
    }
  }
  return minCostCellSet;
}
