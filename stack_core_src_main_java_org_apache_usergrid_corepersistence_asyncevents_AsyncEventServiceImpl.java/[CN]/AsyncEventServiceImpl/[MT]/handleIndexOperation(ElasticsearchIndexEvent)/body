{
  Preconditions.checkNotNull(elasticsearchIndexEvent,"elasticsearchIndexEvent cannot be null");
  final UUID messageId=elasticsearchIndexEvent.getIndexBatchId();
  Preconditions.checkNotNull(messageId,"messageId must not be null");
  final String message=esMapPersistence.getString(messageId.toString());
  final IndexOperationMessage indexOperationMessage;
  if (message == null) {
    if (System.currentTimeMillis() > elasticsearchIndexEvent.getCreationTime() + queueFig.getLocalQuorumTimeout()) {
      if (logger.isDebugEnabled()) {
        logger.debug("ES batch with id {} not found, reading with strong consistency",messageId);
      }
      final String highConsistency=esMapPersistence.getStringHighConsistency(messageId.toString());
      if (highConsistency == null) {
        throw new RuntimeException("ES batch with id " + messageId + " not found when reading with strong consistency");
      }
      indexOperationMessage=ObjectJsonSerializer.INSTANCE.fromString(highConsistency,IndexOperationMessage.class);
    }
 else {
      throw new IndexDocNotFoundException(elasticsearchIndexEvent.getIndexBatchId());
    }
  }
 else {
    indexOperationMessage=ObjectJsonSerializer.INSTANCE.fromString(message,IndexOperationMessage.class);
  }
  initializeEntityIndexes(indexOperationMessage);
  return indexOperationMessage;
}
