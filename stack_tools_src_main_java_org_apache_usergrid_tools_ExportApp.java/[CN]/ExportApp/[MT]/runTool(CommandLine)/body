{
  applicationName=line.getOptionValue(APPLICATION_NAME);
  if (StringUtils.isNotEmpty(line.getOptionValue(WRITE_THREAD_COUNT))) {
    try {
      writeThreadCount=Integer.parseInt(line.getOptionValue(WRITE_THREAD_COUNT));
    }
 catch (    NumberFormatException nfe) {
      logger.error("-" + WRITE_THREAD_COUNT + " must be specified as an integer. Aborting...");
      return;
    }
  }
  setVerbose(line);
  applyOrgId(line);
  prepareBaseOutputFileName(line);
  outputDir=createOutputParentDir();
  logger.info("Export directory: " + outputDir.getAbsolutePath());
  startSpring();
  UUID applicationId=emf.lookupApplication(applicationName).get();
  if (applicationId == null) {
    throw new RuntimeException("Cannot find application " + applicationName);
  }
  final EntityManager em=emf.getEntityManager(applicationId);
  organizationName=em.getApplication().getOrganizationName();
  ExecutorService writeThreadPoolExecutor=Executors.newFixedThreadPool(writeThreadCount);
  writeScheduler=Schedulers.from(writeThreadPoolExecutor);
  Observable<String> collectionsObservable=Observable.create(new CollectionsObservable(em));
  collectionsObservable.flatMap(new Func1<String,Observable<ExportEntity>>(){
    public Observable<ExportEntity> call(    String collection){
      return Observable.create(new EntityObservable(em,collection)).doOnNext(new EntityWriteAction()).subscribeOn(writeScheduler);
    }
  }
,writeThreadCount).flatMap(new Func1<ExportEntity,Observable<ExportConnection>>(){
    public Observable<ExportConnection> call(    ExportEntity exportEntity){
      return Observable.create(new ConnectionsObservable(em,exportEntity)).doOnNext(new ConnectionWriteAction()).subscribeOn(writeScheduler);
    }
  }
,writeThreadCount).doOnCompleted(new FileWrapUpAction()).toBlocking().last();
}
