{
  Preconditions.checkNotNull(entity,"Entity is required in the new stage of the mvcc write");
  final Id entityId=entity.getId();
  Preconditions.checkNotNull(entityId,"The entity id is required to be set for an update operation");
  Preconditions.checkNotNull(entityId.getUuid(),"The entity id uuid is required to be set for an update operation");
  Preconditions.checkNotNull(entityId.getType(),"The entity id type required to be set for an update operation");
  final UUID version=uuidService.newTimeUUID();
  EntityUtils.setVersion(entity,version);
  CollectionIoEvent<Entity> writeData=new CollectionIoEvent<Entity>(collectionScope,entity);
  Observable<CollectionIoEvent<MvccEntity>> observable=Observable.from(writeData).subscribeOn(Schedulers.io()).map(writeStart).flatMap(new Func1<CollectionIoEvent<MvccEntity>,Observable<CollectionIoEvent<MvccEntity>>>(){
    @Override public Observable<CollectionIoEvent<MvccEntity>> call(    final CollectionIoEvent<MvccEntity> mvccEntityCollectionIoEvent){
      Observable<CollectionIoEvent<MvccEntity>> unique=Observable.from(mvccEntityCollectionIoEvent).subscribeOn(Schedulers.io()).flatMap(writeVerifyUnique);
      Observable<CollectionIoEvent<MvccEntity>> optimistic=Observable.from(mvccEntityCollectionIoEvent).subscribeOn(Schedulers.io()).map(writeOptimisticVerify);
      return Observable.zip(unique,optimistic,new Func2<CollectionIoEvent<MvccEntity>,CollectionIoEvent<MvccEntity>,CollectionIoEvent<MvccEntity>>(){
        @Override public CollectionIoEvent<MvccEntity> call(        final CollectionIoEvent<MvccEntity> mvccEntityCollectionIoEvent,        final CollectionIoEvent<MvccEntity> mvccEntityCollectionIoEvent2){
          return mvccEntityCollectionIoEvent;
        }
      }
);
    }
  }
);
  return HystrixObservable.user(observable.map(writeCommit).doOnError(rollback));
}
