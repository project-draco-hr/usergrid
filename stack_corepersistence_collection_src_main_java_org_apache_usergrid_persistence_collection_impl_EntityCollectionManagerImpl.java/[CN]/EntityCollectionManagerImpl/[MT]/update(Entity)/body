{
  logger.debug("Starting update process");
  Preconditions.checkNotNull(entity,"Entity is required in the new stage of the mvcc write");
  final Id entityId=entity.getId();
  ValidationUtils.verifyIdentity(entityId);
  CollectionIoEvent<Entity> writeData=new CollectionIoEvent<Entity>(collectionScope,entity);
  Observable<CollectionIoEvent<MvccEntity>> observable=stageRunner(writeData,writeUpdate);
  final Timer.Context timer=updateTimer.time();
  return observable.map(writeCommit).doOnNext(new Action1<Entity>(){
    @Override public void call(    final Entity entity){
      logger.debug("sending entity to the queue");
      taskExecutor.submit(entityVersionTaskFactory.getCreatedTask(collectionScope,entity));
      taskExecutor.submit(entityVersionTaskFactory.getCleanupTask(collectionScope,entity.getId(),entity.getVersion(),false));
    }
  }
).doOnError(rollback).doOnNext(new Action1<Entity>(){
    @Override public void call(    Entity entity){
      updateMeter.mark();
    }
  }
).doOnCompleted(new Action0(){
    @Override public void call(){
      timer.stop();
    }
  }
);
}
