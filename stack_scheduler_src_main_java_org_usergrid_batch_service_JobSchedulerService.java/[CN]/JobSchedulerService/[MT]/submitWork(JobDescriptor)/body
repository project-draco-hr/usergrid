{
  List<Job> jobs;
  try {
    jobs=jobFactory.jobsFrom(jobDescriptor);
  }
 catch (  JobNotFoundException e) {
    logger.error("Could not create jobs",e);
    return;
  }
  for (  final Job job : jobs) {
    final JobExecution execution=new JobExecutionImpl(jobDescriptor);
    ListenableFuture<Void> future=service.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        capacitySemaphore.acquire();
        execution.start(maxFailCount);
        jobAccessor.save(execution);
        if (execution.getStatus() == Status.DEAD) {
          return null;
        }
        job.execute(execution);
        return null;
      }
    }
);
    Futures.addCallback(future,new FutureCallback<Void>(){
      @Override public void onSuccess(      Void param){
        if (execution.getStatus() == Status.IN_PROGRESS) {
          logger.info("Successful completion of bulkJob {}",execution);
          execution.completed();
        }
        jobAccessor.save(execution);
        capacitySemaphore.release();
      }
      @Override public void onFailure(      Throwable throwable){
        logger.error("Failed execution for bulkJob",throwable);
        if (execution.getStatus() == Status.IN_PROGRESS) {
          execution.failed();
        }
        jobAccessor.save(execution);
        capacitySemaphore.release();
      }
    }
);
  }
}
