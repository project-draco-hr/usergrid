{
  return new DirectedEdgeMeta(nodes,types){
    @Override public Iterator<MarkedEdge> loadEdges(    final ShardedEdgeSerialization serialization,    final EdgeColumnFamilies edgeColumnFamilies,    final ApplicationScope scope,    final Collection<Shard> shards,    final long maxValue,    final SearchByEdgeType.Order order){
      final Id sourceId=nodes[0].id;
      final String edgeType=types[0];
      final String targetType=types[1];
      final SearchByIdType search=new SimpleSearchByIdType(sourceId,edgeType,maxValue,order,targetType,null);
      return serialization.getEdgesFromSourceByTargetType(edgeColumnFamilies,scope,search,shards);
    }
    @Override public MutationBatch writeEdge(    final ShardedEdgeSerialization shardedEdgeSerialization,    final EdgeColumnFamilies edgeColumnFamilies,    final ApplicationScope scope,    final Shard targetShard,    final MarkedEdge edge,    final UUID timestamp){
      return shardedEdgeSerialization.writeEdgeFromSourceWithTargetType(edgeColumnFamilies,scope,edge,Collections.singleton(targetShard),this,timestamp);
    }
    @Override public MutationBatch deleteEdge(    final ShardedEdgeSerialization shardedEdgeSerialization,    final EdgeColumnFamilies edgeColumnFamilies,    final ApplicationScope scope,    final Shard sourceShard,    final MarkedEdge edge,    final UUID timestamp){
      return shardedEdgeSerialization.deleteEdgeFromSourceWithTargetType(edgeColumnFamilies,scope,edge,Collections.singleton(sourceShard),this,timestamp);
    }
    @Override public MetaType getType(){
      return MetaType.SOURCETARGET;
    }
  }
;
}
