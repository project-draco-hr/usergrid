{
  CountMinSketch firstCounter=new CountMinSketch(EPS_OF_TOTAL_COUNT,CONFIDENCE,SEED);
  CountMinSketch secondCounter=new CountMinSketch(EPS_OF_TOTAL_COUNT,CONFIDENCE,SEED);
  byte[] bytes=UUID_SER.toByteBuffer(UUIDGenerator.newTimeUUID()).array();
  long hash=MurmurHash.hash64(bytes);
  for (int i=0; i < SIZE; i++) {
    if (i % 2 == 0) {
      firstCounter.add(hash,1);
    }
 else {
      secondCounter.add(hash,1);
    }
  }
  int half=SIZE / 2;
  assertCardinality(firstCounter,hash,half,half,EPS_OF_TOTAL_COUNT);
  assertCardinality(secondCounter,hash,half,half,EPS_OF_TOTAL_COUNT);
  byte[] firstCounterBytes=CountMinSketch.serialize(firstCounter);
  byte[] secondCounterBytes=CountMinSketch.serialize(secondCounter);
  log.info("The hyperLogLogBytes byte size is {}",firstCounterBytes.length);
  log.info("The secondCounterBytes byte size is {}",secondCounterBytes.length);
  CountMinSketch deSerializedFirst=CountMinSketch.deserialize(firstCounterBytes);
  CountMinSketch deSerializedSecond=CountMinSketch.deserialize(secondCounterBytes);
  CountMinSketch merged=CountMinSketch.merge(deSerializedFirst,deSerializedSecond);
  assertCardinality(merged,hash,SIZE,SIZE,EPS_OF_TOTAL_COUNT);
}
