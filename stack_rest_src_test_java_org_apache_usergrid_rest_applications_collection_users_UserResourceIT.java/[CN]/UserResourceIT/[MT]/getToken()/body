{
  usersResource.post(new User("test_1","Test1 User","test_1@test.com","test123"));
  usersResource.post(new User("test_2","Test2 User","test_2@test.com","test123"));
  usersResource.post(new User("test_3","Test3 User","test_3@test.com","test123"));
  refreshIndex();
  ApplicationInfo appInfo=setup.getMgmtSvc().getApplicationInfo("test-organization/test-app");
  String clientId=setup.getMgmtSvc().getClientIdForApplication(appInfo.getId());
  String clientSecret=setup.getMgmtSvc().getClientSecretForApplication(appInfo.getId());
  Collection tokens=userResource.entity("test_1").connection("token").get(new QueryParameters().addParam("client_id",clientId).addParam("client_secret",clientSecret),false);
  Entity token=tokens.getResponse().getEntities().get(0);
  String user_token_from_client_credentials=token.get("access_token").toString();
  UUID userId=UUID.fromString(((Map<String,Object>)token.get("user")).get("uuid").toString());
  setup.getMgmtSvc().activateAppUser(appInfo.getId(),userId);
  String user_token_from_java=setup.getMgmtSvc().getAccessTokenForAppUser(appInfo.getId(),userId,1000000);
  assertNotNull(user_token_from_client_credentials);
  refreshIndex();
  int status=0;
  try {
    userResource.entity("test_1").connection("token").get(new QueryParameters().addParam("access_token","blah"),false);
    assertTrue(false);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.UNAUTHORIZED.getStatusCode(),status);
  try {
    userResource.entity("test_2").connection("token").get(new QueryParameters().addParam("access_token",user_token_from_client_credentials),false);
    assertTrue(false);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.FORBIDDEN.getStatusCode(),status);
  tokens=userResource.entity("test_1").connection("token").get(new QueryParameters().addParam("access_token",user_token_from_client_credentials),false);
  assertTrue(tokens.getResponse().getEntities().size() > 0);
  tokens=userResource.entity("test_1").connection("token").get(new QueryParameters().addParam("access_token",user_token_from_java),false);
  assertTrue(tokens.getResponse().getEntities().size() > 0);
  Entity entityConn=usersResource.entity(userId).connection("deactivate").post(new Entity());
  refreshIndex();
  try {
    this.app().token().post(new Token("test_1","test123"));
    fail("request for deactivated user should fail");
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getStatus();
    JsonNode body=mapper.readTree(uie.getResponse().getEntity(String.class));
    assertEquals("user not activated",body.findPath("error_description").textValue());
  }
}
