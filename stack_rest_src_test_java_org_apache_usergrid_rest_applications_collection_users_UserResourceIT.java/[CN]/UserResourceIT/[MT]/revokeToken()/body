{
  String token1=super.userToken("edanuff","sesame");
  String token2=super.userToken("edanuff","sesame");
  JsonNode response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token1).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token2).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff/revoketokens").queryParam("access_token",adminAccessToken).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  Status status=null;
  try {
    response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token1).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  status=null;
  try {
    response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token2).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  String token3=super.userToken("edanuff","sesame");
  String token4=super.userToken("edanuff","sesame");
  response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token3).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token4).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNotNull(getEntity(response,0));
  response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff/revoketoken").queryParam("access_token",token3).queryParam("token",token3).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  status=null;
  try {
    response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token3).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.UNAUTHORIZED,status);
  status=null;
  try {
    response=mapper.readTree(resource().path("/test-organization/test-app/users/edanuff").queryParam("access_token",token4).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
    status=Status.OK;
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
  }
  assertEquals(Status.OK,status);
}
