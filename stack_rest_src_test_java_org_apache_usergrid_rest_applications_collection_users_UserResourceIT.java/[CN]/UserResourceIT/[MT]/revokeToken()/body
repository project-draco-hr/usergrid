{
  this.app().collection("users").post(new User("edanuff","edanuff","edanuff@email.com","sesame"));
  refreshIndex();
  Token token1=this.app().token().post(new Token("edanuff","sesame"));
  Token token2=this.app().token().post(new Token("edanuff","sesame"));
  this.app().token().setToken(token1);
  Entity entity1=usersResource.entity("edanuff").get();
  this.app().token().setToken(token2);
  Entity entity2=usersResource.entity("edanuff").get();
  assertNotNull(entity1);
  assertNotNull(entity2);
  Token adminToken=this.clientSetup.getRestClient().management().token().post(false,Token.class,new Token(clientSetup.getUsername(),clientSetup.getUsername()),null);
  this.app().token().setToken(adminToken);
  usersResource.entity("edanuff").connection("revoketokens").post(new Entity().chainPut("token",token1));
  refreshIndex();
  int status=0;
  try {
    this.app().token().setToken(token1);
    usersResource.entity("edanuff").get();
    assertFalse(true);
  }
 catch (  ClientErrorException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  status=0;
  try {
    this.app().token().setToken(token2);
    usersResource.entity("edanuff").get();
  }
 catch (  ClientErrorException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  Token token3=this.app().token().post(new Token("edanuff","sesame"));
  Token token4=this.app().token().post(new Token("edanuff","sesame"));
  this.app().token().setToken(token3);
  entity1=usersResource.entity("edanuff").get();
  assertNotNull(entity1);
  this.app().token().setToken(token3);
  entity2=usersResource.entity("edanuff").get();
  assertNotNull(entity2);
  adminToken=this.clientSetup.getRestClient().management().token().post(false,Token.class,new Token(clientSetup.getUsername(),clientSetup.getUsername()),null);
  this.app().token().setToken(adminToken);
  usersResource.entity("edanuff").connection("revoketokens").post();
  refreshIndex();
  status=0;
  try {
    this.app().token().setToken(token3);
    usersResource.entity("edanuff").get();
  }
 catch (  ClientErrorException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
  status=0;
  try {
    this.app().token().setToken(token4);
    usersResource.entity("edanuff").get();
    status=Response.Status.OK.getStatusCode();
  }
 catch (  ClientErrorException uie) {
    status=uie.getResponse().getStatus();
  }
  assertEquals(Response.Status.UNAUTHORIZED.getStatusCode(),status);
}
