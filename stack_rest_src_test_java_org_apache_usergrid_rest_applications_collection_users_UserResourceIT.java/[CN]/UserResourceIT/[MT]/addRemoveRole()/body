{
  UUID id=UUIDUtils.newTimeUUID();
  String roleName="rolename" + id;
  String username="username" + id;
  String name="name" + id;
  String email="email" + id + "@usergrid.org";
  ApiResponse response=client.createUser(username,name,email,"password");
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  refreshIndex("test-organization","test-app");
  UUID createdId=response.getEntities().get(0).getUuid();
  String json="{\"title\":\"" + roleName + "\",\"name\":\""+ roleName+ "\"}";
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,json));
  assertNull(node.get("errors"));
  refreshIndex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + createdId + "/roles/"+ roleName).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertNull(node.get("errors"));
  assertNotNull(node.get("entities"));
  assertNotNull(node.get("entities").get(0));
  assertNotNull(node.get("entities").get(0).get("name"));
  assertEquals(node.get("entities").get(0).get("name").asText(),roleName);
  refreshIndex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + createdId + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertNotNull(node.get("entities"));
  assertNotNull(node.get("entities").get(0));
  assertNotNull(node.get("entities").get(0).get("name"));
  assertEquals(node.get("entities").get(0).get("name").asText(),roleName);
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + createdId + "/roles/"+ roleName).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  assertNull(node.get("errors"));
  refreshIndex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + createdId + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("entities").size() == 0);
}
