{
  String orgName=this.getClass().getName();
  String appName=name.getMethodName();
  String userName="Test User";
  String email="test-user-45@mockserver.com";
  String passwd="testpassword";
  OrganizationOwnerInfo orgOwner;
  orgOwner=createOwnerAndOrganization(orgName,appName,userName,email,passwd,false,false);
  assertNotNull(orgOwner);
  ApplicationInfo app=setup.getMgmtSvc().createApplication(orgOwner.getOrganization().getUuid(),appName);
  assertNotNull(app);
  enableEmailConfirmation(app.getId());
  enableAdminApproval(app.getId());
  User user=setupAppUser(app.getId(),"testAppUserConfMail","testAppUserConfMail@test.com",true);
  String subject="User Account Confirmation: testAppUserConfMail@test.com";
  String urlProp=setup.get(PROPERTIES_USER_CONFIRMATION_URL);
  String confirmation_url=String.format(urlProp,orgName,appName,user.getUuid().toString());
  setup.getMgmtSvc().startAppUserActivationFlow(app.getId(),user);
  List<Message> inbox=Mailbox.get("testAppUserConfMail@test.com");
  assertFalse(inbox.isEmpty());
  MockImapClient client=new MockImapClient("test.com","testAppUserConfMail","somepassword");
  client.processMail();
  Message confirmation=inbox.get(0);
  assertEquals(subject,confirmation.getSubject());
  String mailContent=(String)((MimeMultipart)confirmation.getContent()).getBodyPart(1).getContent();
  LOG.info(mailContent);
  assertTrue(StringUtils.contains(mailContent.toLowerCase(),confirmation_url.toLowerCase()));
  String token=getTokenFromMessage(confirmation);
  LOG.info(token);
  ActivationState activeState=setup.getMgmtSvc().handleConfirmationTokenForAppUser(app.getId(),user.getUuid(),token);
  assertEquals(ActivationState.CONFIRMED_AWAITING_ACTIVATION,activeState);
}
