{
  if (logger.isTraceEnabled()) {
    logger.trace("UsersResource.executePost: body = {}",body);
  }
  Object json=readJsonToObject(body);
  String password=null;
  String pin=null;
  Boolean confRequred=(Boolean)this.getServices().getEntityManager().getProperty(this.getServices().getApplicationRef(),"registration_requires_email_confirmation");
  boolean activated=!((confRequred != null) && confRequred);
  if (logger.isTraceEnabled()) {
    logger.trace("Confirmation required: {} Activated: {}",confRequred,activated);
  }
  if (json instanceof Map) {
    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)json;
    if ("me".equals(map.get("username"))) {
      throw new IllegalArgumentException("Username 'me' is reserved");
    }
    password=(String)map.get("password");
    map.remove("password");
    pin=(String)map.get("pin");
    map.remove("pin");
    map.put("activated",activated);
  }
 else   if (json instanceof List) {
    @SuppressWarnings("unchecked") List<Object> list=(List<Object>)json;
    for (    Object obj : list) {
      if (obj instanceof Map) {
        @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)obj;
        map.remove("password");
        map.remove("pin");
      }
    }
  }
  ApiResponse response=super.executePostWithObject(ui,json,callback);
  if ((response.getEntities() != null) && (response.getEntities().size() == 1)) {
    Entity entity=response.getEntities().get(0);
    User user=(User)entity.toTypedEntity();
    if (isNotBlank(password)) {
      management.setAppUserPassword(getApplicationId(),user.getUuid(),password);
    }
    if (isNotBlank(pin)) {
      management.setAppUserPin(getApplicationId(),user.getUuid(),pin);
    }
    if (!activated) {
      management.startAppUserActivationFlow(getApplicationId(),user);
    }
  }
  return response;
}
