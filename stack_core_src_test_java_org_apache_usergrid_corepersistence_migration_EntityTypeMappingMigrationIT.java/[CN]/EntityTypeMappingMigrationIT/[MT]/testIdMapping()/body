{
  assertEquals("version 1 expected",1,entityTypeMappingMigration.getVersion());
  final EntityManager newAppEm=app.getEntityManager();
  final String type1="type1thing";
  final String type2="type2thing";
  final int size=10;
  final Set<Id> type1Identities=EntityWriteHelper.createTypes(newAppEm,type1,size);
  final Set<Id> type2Identities=EntityWriteHelper.createTypes(newAppEm,type2,size);
  final Set<Id> allEntities=new HashSet<>();
  allEntities.addAll(type1Identities);
  allEntities.addAll(type2Identities);
  keyspace.truncateColumnFamily(MapSerializationImpl.MAP_ENTRIES);
  keyspace.truncateColumnFamily(MapSerializationImpl.MAP_KEYS);
  final TestProgressObserver progressObserver=new TestProgressObserver();
  entityTypeMappingMigration.migrate(progressObserver);
  AllEntitiesInSystemObservable.getAllEntitiesInSystem(managerCache,1000).doOnNext(new Action1<AllEntitiesInSystemObservable.ApplicationEntityGroup>(){
    @Override public void call(    final AllEntitiesInSystemObservable.ApplicationEntityGroup entity){
      final EntityManager em=emf.getEntityManager(entity.applicationScope.getApplication().getUuid());
      for (      final Id id : entity.entityIds) {
        try {
          final Entity returned=em.get(id.getUuid());
          if (returned != null) {
            assertEquals(id.getUuid(),returned.getUuid());
            assertEquals(id.getType(),returned.getType());
          }
 else {
            final String type=managerCache.getMapManager(CpNamingUtils.getEntityTypeMapScope(entity.applicationScope.getApplication())).getString(id.getUuid().toString());
            assertEquals(id.getType(),type);
          }
        }
 catch (        Exception e) {
          throw new RuntimeException("Unable to get entity " + id + " by UUID, migration failed",e);
        }
        allEntities.remove(id);
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("Every element should have been encountered",0,allEntities.size());
  assertFalse("Progress observer should not have failed",progressObserver.getFailed());
  assertTrue("Progress observer should have update messages",progressObserver.getUpdates().size() > 0);
}
