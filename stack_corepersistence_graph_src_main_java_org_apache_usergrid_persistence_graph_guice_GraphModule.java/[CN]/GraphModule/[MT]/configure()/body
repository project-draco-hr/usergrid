{
  install(new CollectionModule());
  install(new GuicyFigModule(GraphFig.class));
  bind(PostProcessObserver.class).to(CollectionIndexObserver.class);
  bind(EdgeMetadataSerialization.class).to(EdgeMetadataSerializationImpl.class);
  bind(NodeSerialization.class).to(NodeSerializationImpl.class);
  bind(CassandraConfig.class).to(CassandraConfigImpl.class);
  install(new FactoryModuleBuilder().implement(GraphManager.class,GraphManagerImpl.class).build(GraphManagerFactory.class));
  Multibinder<Migration> migrationBinding=Multibinder.newSetBinder(binder(),Migration.class);
  migrationBinding.addBinding().to(EdgeMetadataSerializationImpl.class);
  migrationBinding.addBinding().to(EdgeSerializationImpl.class);
  migrationBinding.addBinding().to(NodeSerializationImpl.class);
  bind(NodeShardAllocation.class).to(NodeShardAllocationImpl.class);
  bind(NodeShardApproximation.class).to(NodeShardApproximationImpl.class);
  bind(NodeShardCache.class).to(NodeShardCacheImpl.class);
  bind(EdgeSeriesSerialization.class).to(EdgeSeriesSerializationImpl.class);
  bind(EdgeSeriesCounterSerialization.class).to(EdgeSeriesCounterSerializationImpl.class);
  bind(TimeoutQueue.class).to(LocalTimeoutQueue.class);
  bind(AsyncProcessor.class).annotatedWith(EdgeDelete.class).to(AsyncProcessorImpl.class);
  bind(AsyncProcessor.class).annotatedWith(NodeDelete.class).to(AsyncProcessorImpl.class);
  bind(EdgeMetaRepair.class).to(EdgeMetaRepairImpl.class);
  bind(EdgeDeleteRepair.class).to(EdgeDeleteRepairImpl.class);
}
