{
  install(new CollectionModule());
  install(new GuicyFigModule(GraphFig.class));
  bind(PostProcessObserver.class).to(CollectionIndexObserver.class);
  bind(EdgeMetadataSerialization.class).to(EdgeMetadataSerializationImpl.class);
  bind(EdgeSerialization.class).to(EdgeSerializationImpl.class);
  bind(NodeSerialization.class).to(NodeSerializationImpl.class);
  bind(CassandraConfig.class).to(CassandraConfigImpl.class);
  install(new FactoryModuleBuilder().implement(EdgeManager.class,EdgeManagerImpl.class).build(EdgeManagerFactory.class));
  Multibinder<Migration> migrationBinding=Multibinder.newSetBinder(binder(),Migration.class);
  migrationBinding.addBinding().to(EdgeMetadataSerializationImpl.class);
  migrationBinding.addBinding().to(EdgeSerializationImpl.class);
  migrationBinding.addBinding().to(NodeSerializationImpl.class);
  final EventBus eventBus=new EventBus("asyncCleanup");
  bind(EventBus.class).toInstance(eventBus);
  bindListener(Matchers.any(),new TypeListener(){
    @Override public <I>void hear(    @SuppressWarnings("unused") final TypeLiteral<I> typeLiteral,    final TypeEncounter<I> typeEncounter){
      typeEncounter.register(new InjectionListener<I>(){
        @Override public void afterInjection(        final I instance){
          eventBus.register(instance);
        }
      }
);
    }
  }
);
}
