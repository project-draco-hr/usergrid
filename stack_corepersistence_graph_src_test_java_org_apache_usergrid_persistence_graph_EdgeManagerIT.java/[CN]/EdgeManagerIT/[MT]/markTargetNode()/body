{
  final GraphManager em=emf.createEdgeManager(scope);
  Id sourceId1=new SimpleId("source");
  Id sourceId2=new SimpleId("source2");
  Id targetId=new SimpleId("target");
  Edge edge1=createEdge(sourceId1,"test",targetId,UUIDGenerator.newTimeUUID());
  em.writeEdge(edge1).toBlockingObservable().singleOrDefault(null);
  Edge edge2=createEdge(sourceId2,"test",targetId,UUIDGenerator.newTimeUUID());
  em.writeEdge(edge2).toBlockingObservable().singleOrDefault(null);
  final UUID maxVersion=UUIDGenerator.newTimeUUID();
  Iterator<Edge> results=em.loadEdgesToTarget(createSearchByEdge(targetId,edge1.getType(),maxVersion,null)).toBlockingObservable().getIterator();
  assertEquals("Edge found",edge2,results.next());
  assertEquals("Edge found",edge1,results.next());
  assertFalse("No more edges",results.hasNext());
  results=em.loadEdgesToTargetByType(createSearchByEdgeAndId(targetId,edge1.getType(),maxVersion,sourceId1.getType(),null)).toBlockingObservable().getIterator();
  assertEquals("Edges correct",edge1,results.next());
  assertFalse("No more edges",results.hasNext());
  results=em.loadEdgesToTargetByType(createSearchByEdgeAndId(targetId,edge2.getType(),maxVersion,sourceId2.getType(),null)).toBlockingObservable().getIterator();
  assertEquals("Edges correct",edge2,results.next());
  assertFalse("No more edges",results.hasNext());
  em.deleteNode(targetId).toBlockingObservable().last();
  results=em.loadEdgesToTarget(createSearchByEdge(targetId,edge1.getType(),maxVersion,null)).toBlockingObservable().getIterator();
  assertFalse("No more edges",results.hasNext());
  results=em.loadEdgesToTargetByType(createSearchByEdgeAndId(targetId,edge1.getType(),maxVersion,sourceId1.getType(),null)).toBlockingObservable().getIterator();
  assertFalse("No more edges",results.hasNext());
  results=em.loadEdgesToTargetByType(createSearchByEdgeAndId(targetId,edge2.getType(),maxVersion,sourceId2.getType(),null)).toBlockingObservable().getIterator();
  assertFalse("No more edges",results.hasNext());
}
