{
  final EdgeManager em=emf.createEdgeManager(scope);
  Id sourceId1=new SimpleId("source");
  Id sourceId2=new SimpleId("source2");
  Id targetId1=new SimpleId("target");
  Edge testTargetEdge=new SimpleEdge(sourceId1,"test",targetId1,UUIDGenerator.newTimeUUID());
  em.writeEdge(testTargetEdge).toBlockingObservable().singleOrDefault(null);
  ;
  Edge testTarget2Edge=new SimpleEdge(sourceId2,"test",targetId1,UUIDGenerator.newTimeUUID());
  em.writeEdge(testTarget2Edge).toBlockingObservable().singleOrDefault(null);
  ;
  Edge test2TargetEdge=new SimpleEdge(sourceId1,"test2",targetId1,UUIDGenerator.newTimeUUID());
  em.writeEdge(test2TargetEdge).toBlockingObservable().singleOrDefault(null);
  ;
  final SearchEdgeType edgeTypes=new SimpleSearchEdgeType(testTargetEdge.getTargetNode(),null);
  Observable<String> edges=em.getEdgeTypesToTarget(edgeTypes);
  List<String> results=edges.toList().toBlockingObservable().single();
  assertEquals("Size correct",2,results.size());
  assertTrue("Edges correct",results.contains("test"));
  assertTrue("Edges correct",results.contains("test2"));
  edges=em.getEdgeTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test",null));
  results=edges.toList().toBlockingObservable().single();
  assertEquals("Size correct",2,results.size());
  assertTrue("Types correct",results.contains(sourceId1.getType()));
  assertTrue("Types correct",results.contains(sourceId2.getType()));
  edges=em.getIdTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test2",null));
  results=edges.toList().toBlockingObservable().single();
  assertEquals("Size correct",1,results.size());
  assertTrue("Types correct",results.contains(sourceId1.getType()));
  em.deleteEdge(testTargetEdge);
  em.deleteEdge(testTarget2Edge);
  em.deleteEdge(test2TargetEdge);
  edges=em.getEdgeTypesFromSource(new SimpleSearchEdgeType(testTargetEdge.getSourceNode(),null));
  results=edges.toList().toBlockingObservable().single();
  assertEquals("No results",0,results.size());
}
