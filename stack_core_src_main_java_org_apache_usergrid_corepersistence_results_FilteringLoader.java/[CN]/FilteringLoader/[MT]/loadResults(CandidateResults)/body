{
  if (crs.size() == 0) {
    return new Results();
  }
  final Map<Id,Integer> orderIndex=new HashMap<>(crs.size());
  final Map<Id,CandidateResult> maxCandidateMapping=new HashMap<>(crs.size());
  final HashMultimap<String,CandidateResult> groupedByScopes=HashMultimap.create(crs.size(),crs.size());
  final Iterator<CandidateResult> iter=crs.iterator();
  for (int i=0; iter.hasNext(); i++) {
    final CandidateResult currentCandidate=iter.next();
    final String collectionType=CpNamingUtils.getCollectionScopeNameFromEntityType(currentCandidate.getId().getType());
    final Id entityId=currentCandidate.getId();
    final CandidateResult previousMax=maxCandidateMapping.get(entityId);
    if (previousMax == null) {
      maxCandidateMapping.put(entityId,currentCandidate);
      orderIndex.put(entityId,i);
      groupedByScopes.put(collectionType,currentCandidate);
      continue;
    }
    final UUID previousMaxVersion=previousMax.getVersion();
    final UUID currentVersion=currentCandidate.getVersion();
    final CandidateResult toRemove;
    final CandidateResult toKeep;
    if (UUIDComparator.staticCompare(currentVersion,previousMaxVersion) > 0) {
      toRemove=previousMax;
      toKeep=currentCandidate;
    }
 else {
      toRemove=currentCandidate;
      toKeep=previousMax;
    }
    logger.warn("Stale version of Entity uuid:{} type:{}, stale v:{}, latest v:{}",new Object[]{entityId.getUuid(),entityId.getType(),toRemove.getVersion(),toKeep.getVersion()});
    indexBatch.deindex(indexScope,toRemove);
    groupedByScopes.remove(collectionType,toRemove);
    maxCandidateMapping.put(entityId,toKeep);
    orderIndex.put(entityId,i);
    groupedByScopes.put(collectionType,toKeep);
  }
  final TreeMap<Integer,Id> sortedResults=new TreeMap<>();
  for (  final String scopeName : groupedByScopes.keySet()) {
    final Set<CandidateResult> candidateResults=groupedByScopes.get(scopeName);
    final Collection<Id> idsToLoad=Collections2.transform(candidateResults,new Function<CandidateResult,Id>(){
      @Nullable @Override public Id apply(      @Nullable final CandidateResult input){
        return input.getId();
      }
    }
);
    final EntityCollectionManager ecm=managerCache.getEntityCollectionManager(applicationScope);
    resultsVerifier.loadResults(idsToLoad,ecm);
    for (    final Id requestedId : idsToLoad) {
      final CandidateResult cr=maxCandidateMapping.get(requestedId);
      if (!resultsVerifier.isValid(cr)) {
        indexBatch.deindex(indexScope,cr);
        continue;
      }
      final int candidateIndex=orderIndex.get(requestedId);
      sortedResults.put(candidateIndex,requestedId);
    }
  }
  return resultsVerifier.getResults(sortedResults.values());
}
