{
  String rand=RandomStringUtils.randomAlphanumeric(10);
  OrganizationOwnerInfo orgInfo=setup.getMgmtSvc().createOwnerAndOrganization("org_" + rand,"user_" + rand,rand.toUpperCase(),rand + "@example.com",rand);
  ApplicationInfo appInfo=setup.getMgmtSvc().createApplication(orgInfo.getOrganization().getUuid(),"app_" + rand);
  final EntityManager em=setup.getEmf().getEntityManager(appInfo.getId());
  final List<Entity> connectedThings=new ArrayList<Entity>();
  String connectedType="connected_thing";
  em.createApplicationCollection(connectedType);
  for (int j=0; j < NUM_CONNECTIONS; j++) {
    final String name="connected_thing_" + j;
    connectedThings.add(em.create(connectedType,new HashMap<String,Object>(){
{
        put("name",name);
      }
    }
));
  }
  final AtomicInteger entitiesCount=new AtomicInteger(0);
  final AtomicInteger connectionCount=new AtomicInteger(0);
  ExecutorService execService=Executors.newFixedThreadPool(50);
  final Scheduler scheduler=Schedulers.from(execService);
  Observable.range(0,NUM_COLLECTIONS).flatMap(new Func1<Integer,Observable<?>>(){
    @Override public Observable<?> call(    Integer i){
      return Observable.just(i).doOnNext(new Action1<Integer>(){
        @Override public void call(        Integer i){
          final String type="thing_" + i;
          try {
            em.createApplicationCollection(type);
            connectionCount.getAndIncrement();
          }
 catch (          Exception e) {
            throw new RuntimeException("Error creating collection",e);
          }
          Observable.range(0,NUM_ENTITIES).flatMap(new Func1<Integer,Observable<?>>(){
            @Override public Observable<?> call(            Integer j){
              return Observable.just(j).doOnNext(new Action1<Integer>(){
                @Override public void call(                Integer j){
                  final String name="thing_" + j;
                  try {
                    final Entity source=em.create(type,new HashMap<String,Object>(){
{
                        put("name",name);
                      }
                    }
);
                    entitiesCount.getAndIncrement();
                    logger.info("Created entity {} type {}",name,type);
                    for (                    Entity target : connectedThings) {
                      em.createConnection(source,"has",target);
                      connectionCount.getAndIncrement();
                      logger.info("Created connection from entity {} type {} to {}",new Object[]{name,type,target.getName()});
                    }
                  }
 catch (                  Exception e) {
                    throw new RuntimeException("Error creating collection",e);
                  }
                }
              }
);
            }
          }
,50).subscribeOn(scheduler).subscribe();
        }
      }
);
    }
  }
,30).subscribeOn(scheduler).toBlocking().last();
  while (entitiesCount.get() < NUM_COLLECTIONS * NUM_ENTITIES) {
    Thread.sleep(5000);
    logger.info("Still working. Created {} entities and {} connections",entitiesCount.get(),connectionCount.get());
  }
  logger.info("Done. Created {} entities and {} connections",entitiesCount.get(),connectionCount.get());
  long start=System.currentTimeMillis();
  String directoryName="target/export" + rand;
  ExportApp exportApp=new ExportApp();
  exportApp.startTool(new String[]{"-application",appInfo.getName(),"-readThreads","50","-writeThreads","10","-host","localhost:" + ServiceITSuite.cassandraResource.getRpcPort(),"-outputDir",directoryName},false);
  logger.info("time = " + (System.currentTimeMillis() - start) / 1000 + "s");
}
