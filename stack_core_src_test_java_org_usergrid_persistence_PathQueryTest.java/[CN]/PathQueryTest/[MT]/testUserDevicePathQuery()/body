{
  UUID applicationId=createApplication("testOrganization","testUserDevicePathQuery");
  EntityManager em=emf.getEntityManager(applicationId);
  List<Entity> users=new ArrayList<Entity>();
  for (int i=0; i < 15; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("index",i);
    properties.put("username","user " + i);
    Entity created=em.create("user",properties);
    users.add(created);
  }
  List<UUID> deviceIds=new ArrayList<UUID>();
  for (  Entity user : users) {
    for (int i=0; i < 5; i++) {
      Map<String,Object> properties=new LinkedHashMap<String,Object>();
      properties.put("index",i);
      Entity created=em.create("device",properties);
      deviceIds.add(created.getUuid());
      em.addToCollection(user,"devices",created);
    }
  }
  Results devices=em.getCollection(users.get(10),"devices",null,20,Results.Level.IDS,false);
  assertEquals(5,devices.size());
  int pageSize=10;
  Query userQuery=new Query();
  userQuery.setLimit(pageSize);
  userQuery.addFilter("index >= 2");
  userQuery.addFilter("index <= 13");
  int expectedUserQuerySize=12;
  Results results=em.searchCollection(em.getApplicationRef(),"users",userQuery);
  PagingResultsIterator pri=new PagingResultsIterator(results);
  int i=2;
  while (pri.hasNext()) {
    Entity e=(Entity)pri.next();
    assertEquals(i++,((Long)e.getProperty("index")).intValue());
  }
  assertEquals(i,expectedUserQuerySize + 2);
  Query deviceQuery=new Query();
  deviceQuery.setLimit(pageSize);
  deviceQuery.addFilter("index >= 2");
  int expectedDeviceQuerySize=3;
  PathQuery<UUID> usersPQ=new PathQuery<UUID>(results);
  PathQuery<Entity> devicesPQ=usersPQ.chainCollectionQuery("devices",deviceQuery);
  HashSet set=new HashSet(expectedUserQuerySize * expectedDeviceQuerySize);
  for (  Entity e : devicesPQ) {
    set.add(e);
  }
  assertEquals(expectedUserQuerySize * expectedDeviceQuerySize,set.size());
}
