{
  return Observable.just(edge).flatMap(new Func1<Edge,Observable<? extends MarkedEdge>>(){
    @Override public Observable<? extends MarkedEdge> call(    final Edge edge){
      final MutationBatch commitLogBatch=keyspace.prepareMutationBatch();
      final MutationBatch storageBatch=keyspace.prepareMutationBatch();
      Observable<MarkedEdge> commitLog=seekAndDelete(scope,edge,commitLogSerialization,commitLogBatch);
      Observable<MarkedEdge> storage=seekAndDelete(scope,edge,storageSerialization,storageBatch);
      return Observable.merge(commitLog,storage).distinctUntilChanged().doOnCompleted(new Action0(){
        @Override public void call(){
          try {
            storageBatch.execute();
            commitLogBatch.execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Could not delete marked edge",e);
          }
        }
      }
);
    }
  }
);
}
