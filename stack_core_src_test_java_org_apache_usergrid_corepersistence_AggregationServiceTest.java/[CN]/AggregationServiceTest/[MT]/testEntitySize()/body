{
  ApplicationScope applicationScope=CpNamingUtils.getApplicationScope(this.app.getId());
  Injector injector=SpringResource.getInstance().getBean(Injector.class);
  AggregationServiceFactory factory=injector.getInstance(AggregationServiceFactory.class);
  AggregationService aggregationService=factory.getAggregationService();
  Map<String,Object> props=new HashMap<>();
  props.put("test",1234);
  props.put("name","myname");
  Entity entity1=this.app.getEntityManager().create("test",props);
  Entity entity2=this.app.getEntityManager().create("test2",props);
  this.app.refreshIndex();
  Thread.sleep(500);
  long sum=aggregationService.getApplicationSize(applicationScope);
  Assert.assertTrue(sum >= 0);
  Assert.assertTrue(sum > (entity1.getSize() + entity2.getSize()));
  long sum1=aggregationService.getSize(applicationScope,CpNamingUtils.createCollectionSearchEdge(applicationScope.getApplication(),"tests"));
  Assert.assertEquals(sum1,entity1.getSize());
  long sum2=aggregationService.getSize(applicationScope,CpNamingUtils.createCollectionSearchEdge(applicationScope.getApplication(),"test2s"));
  Assert.assertEquals(sum2,entity2.getSize());
  props=new HashMap<>();
  props.put("test",1234);
  props.put("name","myname2");
  Entity entity3=this.app.getEntityManager().create("test",props);
  this.app.refreshIndex();
  long sum3=aggregationService.getSize(applicationScope,CpNamingUtils.createCollectionSearchEdge(applicationScope.getApplication(),"tests"));
  Assert.assertEquals(sum3,entity1.getSize() + entity3.getSize());
  Map<String,Long> sumEach=aggregationService.getEachCollectionSize(applicationScope);
  Assert.assertTrue(sumEach.containsKey("tests") && sumEach.containsKey("test2s"));
  Assert.assertEquals(sum3,(long)sumEach.get("tests"));
}
