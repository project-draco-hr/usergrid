{
  final Entity entity=event.getData();
  Preconditions.checkNotNull(entity,"Entity is required in the new stage of the mvcc write");
  final Id entityId=entity.getId();
  final UUID version=entity.getVersion();
  Preconditions.checkNotNull(entityId,"Entity id is required in this stage");
  Preconditions.checkNotNull(version,"Entity version is required in this stage");
  final EntityCollection entityCollection=event.getCollectionContext();
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,org.apache.usergrid.persistence.collection.mvcc.entity.Stage.ACTIVE);
  MutationBatch write=logStrategy.write(entityCollection,startEntry);
  try {
    write.execute();
  }
 catch (  ConnectionException e) {
    LOG.error("Failed to execute write asynchronously ",e);
    throw new CollectionRuntimeException("Failed to execute write asynchronously ",e);
  }
  final MvccEntityImpl nextStage=new MvccEntityImpl(entityId,version,entity);
  eventBus.post(new EventVerify(entityCollection,nextStage,event.getResult()));
}
