{
  return new Runner(){
    @Override public String getIpv4Address(){
      return ipv4Address;
    }
    @Override public String getHostname(){
      return hostname;
    }
    @Override public int getServerPort(){
      return serverPort;
    }
    @Override public String getUrl(){
      return url;
    }
    @Override public String getTempDir(){
      return runnerTempDir;
    }
    @Override public void addPropertyChangeListener(    final PropertyChangeListener listener){
      throw new UnsupportedOperationException();
    }
    @Override public void removePropertyChangeListener(    final PropertyChangeListener listener){
      throw new UnsupportedOperationException();
    }
    @Override public OptionState[] getOptions(){
      throw new UnsupportedOperationException();
    }
    @Override public OptionState getOption(    final String key){
      throw new UnsupportedOperationException();
    }
    @Override public String getKeyByMethod(    final String methodName){
      throw new UnsupportedOperationException();
    }
    @Override public Object getValueByMethod(    final String methodName){
      throw new UnsupportedOperationException();
    }
    @Override public Properties filterOptions(    final Properties properties){
      throw new UnsupportedOperationException();
    }
    @Override public Map<String,Object> filterOptions(    final Map<String,Object> entries){
      throw new UnsupportedOperationException();
    }
    @Override public void override(    final String key,    final String override){
      throw new UnsupportedOperationException();
    }
    @Override public boolean setOverrides(    final Overrides overrides){
      throw new UnsupportedOperationException();
    }
    @Override public Overrides getOverrides(){
      throw new UnsupportedOperationException();
    }
    @Override public void bypass(    final String key,    final String bypass){
      throw new UnsupportedOperationException();
    }
    @Override public boolean setBypass(    final Bypass bypass){
      throw new UnsupportedOperationException();
    }
    @Override public Bypass getBypass(){
      throw new UnsupportedOperationException();
    }
    @Override public Class getFigInterface(){
      return Runner.class;
    }
    @Override public boolean isSingleton(){
      return false;
    }
    @Override public String toString(){
      return getHostname();
    }
  }
;
}
