{
  this.entityManagerFig=entityManagerFig;
  Preconditions.checkNotNull(cass,"cass must not be null");
  Preconditions.checkNotNull(counterUtils,"counterUtils must not be null");
  Preconditions.checkNotNull(managerCache,"managerCache must not be null");
  Preconditions.checkNotNull(applicationId,"applicationId must not be null");
  Preconditions.checkNotNull(indexService,"indexService must not be null");
  Preconditions.checkNotNull(filterFactory,"filterFactory must not be null");
  Preconditions.checkNotNull(collectorFactory,"collectorFactory must not be null");
  this.filterFactory=filterFactory;
  this.collectorFactory=collectorFactory;
  this.managerCache=managerCache;
  this.applicationId=applicationId;
  this.indexService=indexService;
  applicationScope=CpNamingUtils.getApplicationScope(applicationId);
  ecm=managerCache.getEntityCollectionManager(applicationScope);
  this.cass=cass;
  this.counterUtils=counterUtils;
  this.metricsFactory=metricsFactory;
  this.aggCounterTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.get.aggregate.counters.timer");
  this.entCreateTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.create.timer");
  this.entCreateBatchTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.create.batch.timer");
  this.esDeletePropertyTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.es.delete.property.timer");
  this.entAddDictionaryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.add.dictionary.timer");
  this.entAddDictionarySetTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.add.dictionary.set.timer");
  this.entAddDictionaryMapTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.add.dictionary.map.timer");
  this.entRemoveDictionaryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.remove.dictionary.timer");
  this.entCreateRoleTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.create.role.timer");
  this.entCreateRolePermissionsTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.create.role.permissions.timer");
  this.entGrantGroupPermissionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.grant.group.permission.timer");
  this.entRevokeGroupPermissionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.revoke.group.permission.timer");
  this.entIncrementAggregateCountersTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.increment.aggregate.counters.timer");
  this.entGetAggregateCountersQueryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.get.aggregate.counters.query.timer");
  this.entGetEntityCountersTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.get.entity.counters.timer");
  this.esIndexEntityCollectionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.es.index.entity.to.collection.timer");
  this.entRevokeRolePermissionsTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.revoke.role.permissions.timer");
  this.entGetRepairedEntityTimer=this.metricsFactory.getTimer(CpEntityManager.class,"get.repaired.entity.timer");
  this.updateEntityMeter=this.metricsFactory.getMeter(CpEntityManager.class,"cp.entity.update.meter");
  this.updateEntityTimer=this.metricsFactory.getTimer(CpEntityManager.class,"cp.entity.update.timer");
  this.skipAggregateCounters=false;
}
