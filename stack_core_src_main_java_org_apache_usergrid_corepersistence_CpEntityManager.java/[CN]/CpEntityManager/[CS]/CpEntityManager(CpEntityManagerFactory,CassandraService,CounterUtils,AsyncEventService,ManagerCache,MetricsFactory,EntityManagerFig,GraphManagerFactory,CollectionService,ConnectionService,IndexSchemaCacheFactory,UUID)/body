{
  this.emf=emf;
  this.entityManagerFig=entityManagerFig;
  Preconditions.checkNotNull(cass,"cass must not be null");
  Preconditions.checkNotNull(counterUtils,"counterUtils must not be null");
  Preconditions.checkNotNull(managerCache,"managerCache must not be null");
  Preconditions.checkNotNull(applicationId,"applicationId must not be null");
  Preconditions.checkNotNull(indexService,"indexService must not be null");
  Preconditions.checkNotNull(graphManagerFactory,"graphManagerFactory must not be null");
  Preconditions.checkNotNull(connectionService,"connectionService must not be null");
  Preconditions.checkNotNull(collectionService,"collectionService must not be null");
  this.graphManagerFactory=graphManagerFactory;
  this.connectionService=connectionService;
  this.collectionService=collectionService;
  this.managerCache=managerCache;
  this.applicationId=applicationId;
  this.indexService=indexService;
  this.indexSchemaCacheFactory=indexSchemaCacheFactory;
  applicationScope=CpNamingUtils.getApplicationScope(applicationId);
  ecm=managerCache.getEntityCollectionManager(applicationScope);
  this.cass=cass;
  this.counterUtils=counterUtils;
  this.metricsFactory=metricsFactory;
  this.aggCounterTimer=this.metricsFactory.getTimer(CpEntityManager.class,"aggregate_counters.get");
  this.entIncrementAggregateCountersTimer=this.metricsFactory.getTimer(CpEntityManager.class,"aggregate_counters.increment");
  this.entGetAggregateCountersQueryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"aggregate_counters_query.get");
  this.entCreateTimer=this.metricsFactory.getTimer(CpEntityManager.class,"entity.create");
  this.updateEntityMeter=this.metricsFactory.getMeter(CpEntityManager.class,"entity.update");
  this.updateEntityTimer=this.metricsFactory.getTimer(CpEntityManager.class,"entity.update");
  this.entCreateBatchTimer=this.metricsFactory.getTimer(CpEntityManager.class,"batch.create");
  this.esDeletePropertyTimer=this.metricsFactory.getTimer(CpEntityManager.class,"es_property.delete");
  this.entAddDictionaryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"dictionary.add");
  this.entAddDictionarySetTimer=this.metricsFactory.getTimer(CpEntityManager.class,"dictionary_set.add");
  this.entAddDictionaryMapTimer=this.metricsFactory.getTimer(CpEntityManager.class,"dictionary_map.add");
  this.entRemoveDictionaryTimer=this.metricsFactory.getTimer(CpEntityManager.class,"dictionary.remove");
  this.entCreateRoleTimer=this.metricsFactory.getTimer(CpEntityManager.class,"role.create");
  this.entRevokeRolePermissionsTimer=this.metricsFactory.getTimer(CpEntityManager.class,"role.revoke_permissions");
  this.entCreateRolePermissionsTimer=this.metricsFactory.getTimer(CpEntityManager.class,"role.create_permissions");
  this.entGrantGroupPermissionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"group.grant_permission");
  this.entRevokeGroupPermissionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"group.revoke_permission");
  this.entGetEntityCountersTimer=this.metricsFactory.getTimer(CpEntityManager.class,"entity_counters.get");
  this.esIndexEntityCollectionTimer=this.metricsFactory.getTimer(CpEntityManager.class,"es.index_entity_to_collection");
  this.entGetRepairedEntityTimer=this.metricsFactory.getTimer(CpEntityManager.class,"repaired_entity.get");
  this.skipAggregateCounters=false;
}
