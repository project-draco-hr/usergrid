{
  String collName=Schema.defaultCollectionName(collectionType);
  String propertyName=Schema.getDefaultSchema().aliasProperty(collName);
  Timer.Context repairedEntityGet=entGetRepairedEntityTimer.time();
  StringField uniqueLookupRepairField=new StringField(propertyName,aliasType.toString());
  Observable<FieldSet> fieldSetObservable=ecm.getEntitiesFromFields(Inflector.getInstance().singularize(collectionType),Arrays.<Field>asList(uniqueLookupRepairField));
  if (fieldSetObservable == null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Couldn't return the observable based on unique entities.");
    }
    return null;
  }
  FieldSet fieldSet=fieldSetObservable.toBlocking().last();
  repairedEntityGet.stop();
  if (fieldSet.isEmpty()) {
    return null;
  }
  return convertMvccEntityToEntity(fieldSet.getEntity(uniqueLookupRepairField).getEntity().get());
}
