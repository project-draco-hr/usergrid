{
  LOG.info("-------------------------------------------------------------------");
  LOG.info("Initializing Forked Cassandra at {} ...",tempDir.toString());
  LOG.info("-------------------------------------------------------------------");
  File newYamlFile=new File(tempDir,"cassandra.yaml");
  URL newYamlUrl=FileUtils.toURLs(new File[]{newYamlFile})[0];
  Yaml yaml=new Yaml();
  @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)yaml.load(ClassLoader.getSystemResourceAsStream("cassandra.yaml"));
  map.put(RPC_PORT_KEY,getRpcPort());
  map.put(STORAGE_PORT_KEY,getStoragePort());
  map.put(SSL_STORAGE_PORT_KEY,getSslStoragePort());
  map.put(NATIVE_TRANSPORT_PORT_KEY,getNativeTransportPort());
  map.put(COMMIT_FILE_DIR_KEY,new File(tempDir,"commitlog").toString());
  map.put(DATA_FILE_DIR_KEY,new String[]{new File(tempDir,"data").toString()});
  map.put(SAVED_CACHES_DIR_KEY,new File(tempDir,"saved_caches").toString());
  FileWriter writer=new FileWriter(newYamlFile);
  yaml.dump(map,writer);
  writer.flush();
  writer.close();
  System.setProperty("cassandra.url","localhost:" + Integer.toString(rpcPort));
  System.setProperty("cassandra-foreground","true");
  System.setProperty("log4j.defaultInitOverride","true");
  System.setProperty("log4j.configuration","log4j.properties");
  System.setProperty("cassandra.ring_delay_ms","100");
  System.setProperty("cassandra.config",newYamlUrl.toString());
  System.setProperty("cassandra.tempName",tempDir.getName());
  while (!AvailablePortFinder.available(rpcPort)) {
    rpcPort++;
  }
  while (!AvailablePortFinder.available(storagePort)) {
    storagePort++;
  }
  while (!AvailablePortFinder.available(sslStoragePort)) {
    sslStoragePort++;
  }
  while (!AvailablePortFinder.available(nativeTransportPort)) {
    nativeTransportPort++;
  }
  System.setProperty("cassandra." + RPC_PORT_KEY,Integer.toString(rpcPort));
  System.setProperty("cassandra." + STORAGE_PORT_KEY,Integer.toString(storagePort));
  System.setProperty("cassandra." + SSL_STORAGE_PORT_KEY,Integer.toString(sslStoragePort));
  System.setProperty("cassandra." + NATIVE_TRANSPORT_PORT_KEY,Integer.toString(nativeTransportPort));
  LOG.info("before() test, setting system properties for ports : " + "[rpc, storage, sslStorage, native] = [{}, {}, {}, {}]",new Object[]{rpcPort,storagePort,sslStoragePort,nativeTransportPort});
  if (!newYamlFile.exists()) {
    throw new RuntimeException("Cannot find new Yaml file: " + newYamlFile);
  }
  String javaHome=(String)System.getenv("JAVA_HOME");
  String maxMemory="-Xmx1000m";
  ProcessBuilder pb=new ProcessBuilder(javaHome + "/bin/java",getJammArgument(),maxMemory,"org.apache.usergrid.cassandra.CassandraMain",newYamlUrl.toString(),tempDir.getName(),getTargetDir() + "/src/test/resources/log4j.properties","" + rpcPort,"" + storagePort,"" + sslStoragePort,"" + nativeTransportPort);
  String classpath=System.getProperty("java.class.path");
  List<String> path=new ArrayList<String>();
  String parts[]=classpath.split(File.pathSeparator);
  for (  String part : parts) {
    if (part.endsWith("test-classes")) {
      continue;
    }
    path.add(part);
  }
  String newClasspath=StringUtils.join(path,File.pathSeparator);
  Map<String,String> env=pb.environment();
  StringBuilder sb=new StringBuilder();
  sb.append(newClasspath);
  env.put("CLASSPATH",sb.toString());
  pb.redirectErrorStream(true);
  process=pb.start();
  new Thread(new Runnable(){
    @Override public void run(){
      BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()));
      String line=null;
      try {
        while ((line=br.readLine()) != null) {
          LOG.info(line);
        }
      }
 catch (      Exception ex) {
        LOG.error("Error reading from Cassandra process",ex);
        return;
      }
    }
  }
).start();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      after();
    }
  }
);
  Thread.sleep(5000);
  String[] locations={"usergrid-test-context.xml"};
  applicationContext=new ClassPathXmlApplicationContext(locations);
  loadSchemaManager(schemaManagerName);
  initialized=true;
  LOG.info("External Cassandra resource at {} is ready!",tempDir.toString());
  lock.notifyAll();
}
