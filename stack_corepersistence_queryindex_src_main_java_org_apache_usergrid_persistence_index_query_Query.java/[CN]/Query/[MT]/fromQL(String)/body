{
  if (StringUtils.isEmpty(ql)) {
    return null;
  }
  logger.debug("Processing raw query: " + ql);
  String originalQl=ql;
  ql=ql.trim();
  String qlt=ql.toLowerCase();
  if (!qlt.startsWith("select") && !qlt.startsWith("insert") && !qlt.startsWith("update")&& !qlt.startsWith("delete")) {
    if (qlt.startsWith("order by")) {
      ql="select * " + ql;
    }
 else {
      ql="select * where " + ql;
    }
  }
  ANTLRStringStream in=new ANTLRStringStream(ql.trim());
  CpQueryFilterLexer lexer=new CpQueryFilterLexer(in);
  CommonTokenStream tokens=new CommonTokenStream(lexer);
  CpQueryFilterParser parser=new CpQueryFilterParser(tokens);
  try {
    Query q=parser.ql().query;
    q.setQl(originalQl);
    return q;
  }
 catch (  RecognitionException e) {
    logger.error("Unable to parse \"{}\"",ql,e);
    int index=e.index;
    int lineNumber=e.line;
    Token token=e.token;
    String message=String.format("The query cannot be parsed. The token '%s' at " + "column %d on line %d cannot be " + "parsed",token.getText(),index,lineNumber);
    throw new QueryParseException(message,e);
  }
}
