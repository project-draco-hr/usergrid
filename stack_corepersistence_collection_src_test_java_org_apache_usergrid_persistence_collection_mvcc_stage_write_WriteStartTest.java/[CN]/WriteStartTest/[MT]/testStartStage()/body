{
  final EntityCollection context=mock(EntityCollection.class);
  final MvccLogEntrySerializationStrategy logStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final ArgumentCaptor<MvccLogEntry> logEntry=ArgumentCaptor.forClass(MvccLogEntry.class);
  final MutationBatch mutation=mock(MutationBatch.class);
  when(logStrategy.write(same(context),logEntry.capture())).thenReturn(mutation);
  final Entity entity=TestEntityGenerator.generateEntity();
  WriteStart newStage=new WriteStart(logStrategy);
  Observable<IoEvent<MvccEntity>> observable=newStage.call(new IoEvent<Entity>(context,entity));
  IoEvent<MvccEntity> result=observable.toBlockingObservable().single();
  MvccLogEntry entry=logEntry.getValue();
  assertEquals("version did not not match entityId",entity.getVersion(),entry.getVersion());
  assertEquals("EventStage is correct",Stage.ACTIVE,entry.getStage());
  MvccEntity created=result.getEvent();
  assertEquals("version did not not match entityId",entity.getVersion(),created.getVersion());
  assertSame("Entity correct",entity,created.getEntity().get());
}
