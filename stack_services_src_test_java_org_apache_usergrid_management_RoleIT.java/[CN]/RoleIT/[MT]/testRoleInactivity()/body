{
  OrganizationOwnerInfo ooi=setup.getMgmtSvc().createOwnerAndOrganization("RoleIT","edanuff5","Ed Anuff","ed@anuff.com5","test",true,false);
  OrganizationInfo organization=ooi.getOrganization();
  UUID applicationId=setup.getMgmtSvc().createApplication(organization.getUuid(),"test-app").getId();
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  setup.getEntityIndex().refresh(em.getApplicationId());
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff5");
  properties.put("email","ed@anuff.com5");
  properties.put("activated",true);
  User user=em.create(User.ENTITY_TYPE,User.class,properties);
  em.createRole("logged-in","Logged In",2000);
  setup.getEntityIndex().refresh(em.getApplicationId());
  setup.getEntityIndex().refresh(em.getApplicationId());
  em.addUserToRole(user.getUuid(),"logged-in");
  String accessToken=setup.getMgmtSvc().getAccessTokenForAppUser(applicationId,user.getUuid(),0);
  UserInfo user_info=setup.getMgmtSvc().getAppUserFromAccessToken(accessToken);
  PrincipalCredentialsToken token=PrincipalCredentialsToken.getFromAppUserInfoAndAccessToken(user_info,accessToken);
  Subject subject=SubjectUtils.getSubject();
  subject.login(token);
  subject.checkRole("application-role:" + applicationId + ":logged-in");
  LOG.info("Has role \"logged-in\"");
  Thread.sleep(2100);
  subject.login(token);
  assertFalse(subject.hasRole("application-role:" + applicationId + ":logged-in"));
  LOG.info("Doesn't have role \"logged-in\"");
}
