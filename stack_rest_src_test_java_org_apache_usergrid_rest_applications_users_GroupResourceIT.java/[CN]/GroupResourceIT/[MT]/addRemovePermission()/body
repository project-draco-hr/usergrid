{
  UUID id=UUIDUtils.newTimeUUID();
  String groupName="groupname" + id;
  ApiResponse response=client.createGroup(groupName);
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  UUID createdId=response.getEntities().get(0).getUuid();
  String json="{\"permission\":\"delete:/test\"}";
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/permissions").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,json));
  assertNull(node.get("errors"));
  assertEquals(node.get("data").get(0).asText(),"delete:/test");
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/permissions").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertEquals(node.get("data").get(0).asText(),"delete:/test");
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/permissions").queryParam("access_token",access_token).queryParam("permission","delete%3A%2Ftest").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("data").size() == 0);
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/permissions").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("data").size() == 0);
}
