{
  UUID id=UUIDUtils.newTimeUUID();
  String groupName="groupname" + id;
  String roleName="rolename" + id;
  ApiResponse response=client.createGroup(groupName);
  assertNull("Error was: " + response.getErrorDescription(),response.getError());
  UUID createdId=response.getEntities().get(0).getUuid();
  String json="{\"title\":\"" + roleName + "\",\"name\":\""+ roleName+ "\"}";
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,json));
  assertNull(node.get("errors"));
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/roles/"+ roleName).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertNull(node.get("errors"));
  assertEquals(node.get("entities").get(0).get("name").asText(),roleName);
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertEquals(node.get("entities").get(0).get("name").asText(),roleName);
  node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("entities").findValuesAsText("name").contains(roleName));
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/roles/"+ roleName).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  assertNull(node.get("errors"));
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + createdId + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("entities").size() == 0);
  node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertTrue(node.get("entities").findValuesAsText("name").contains(roleName));
  node=mapper.readTree(resource().path("/test-organization/test-app/roles/" + roleName).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  assertNull(node.get("errors"));
  node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(node.get("errors"));
  assertFalse(node.get("entities").findValuesAsText("name").contains(roleName));
}
