{
  final EntityManager em=app.getEntityManager();
  final String type1="type1things";
  final String type2="type2things";
  final int size=10;
  final Set<Id> type1Identities=EntityWriteHelper.createTypes(em,type1,size);
  final Set<Id> type2Identities=EntityWriteHelper.createTypes(em,type2,size);
  final Id source=type1Identities.iterator().next();
  final Set<Id> connections=new HashSet<>();
  for (  Id target : type2Identities) {
    em.createConnection(SimpleEntityRef.fromId(source),"likes",SimpleEntityRef.fromId(target));
    connections.add(target);
  }
  ManagerCache managerCache=CpSetup.getInjector().getInstance(ManagerCache.class);
  final ApplicationScope scope=CpNamingUtils.getApplicationScope(app.getId());
  final Id applicationId=scope.getApplication();
  final GraphManager gm=managerCache.getGraphManager(scope);
  EdgesFromSourceObservable.edgesFromSource(gm,applicationId).doOnNext(new Action1<Edge>(){
    @Override public void call(    final Edge edge){
      final String edgeType=edge.getType();
      final Id target=edge.getTargetNode();
      if (!CpNamingUtils.isCollectionEdgeType(edgeType)) {
        fail("Connections should be the only type encountered");
      }
      final String collectionType=CpNamingUtils.getCollectionName(edgeType);
      if (collectionType.equals(type1)) {
        assertTrue("Element should be present on removal",type1Identities.remove(target));
      }
 else       if (collectionType.equals(type2)) {
        assertTrue("Element should be present on removal",type2Identities.remove(target));
      }
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("Every element should have been encountered",0,type1Identities.size());
  assertEquals("Every element should have been encountered",0,type2Identities.size());
  EdgesFromSourceObservable.edgesFromSource(gm,source).doOnNext(new Action1<Edge>(){
    @Override public void call(    final Edge edge){
      final String edgeType=edge.getType();
      final Id target=edge.getTargetNode();
      if (!CpNamingUtils.isConnectionEdgeType(edgeType)) {
        fail("Only connection edges should be encountered");
      }
      final String connectionType=CpNamingUtils.getConnectionType(edgeType);
      assertEquals("Same connection type expected","likes",connectionType);
      assertTrue("Element should be present on removal",connections.remove(target));
    }
  }
).toBlocking().lastOrDefault(null);
  assertEquals("Every connection should have been encountered",0,connections.size());
}
