{
  try {
    Stack<JsonToken> objectStartStack=new Stack();
    Stack<String> objectNameStack=new Stack();
    EntityRef lastEntity=null;
    String entityType=null;
    while (true) {
      JsonToken token=jp.nextToken();
      if (token == null) {
        break;
      }
      String name=jp.getCurrentName();
      if (token.equals(JsonToken.START_OBJECT)) {
        objectStartStack.push(token);
        if (name == null) {
          continue;
        }
        if ("Metadata".equals(name)) {
          Map<String,Object> entityMap=jp.readValueAs(HashMap.class);
          UUID uuid=null;
          if (entityMap.get("uuid") != null) {
            uuid=UUID.fromString((String)entityMap.get("uuid"));
            lastEntity=new SimpleEntityRef(entityType,uuid);
          }
          if (entitiesOnly) {
            WriteEvent event=new EntityEvent(uuid,entityType,entityMap);
            processWriteEvent(subscriber,event);
          }
          objectStartStack.pop();
        }
 else         if ("connections".equals(name)) {
          Map<String,Object> connectionMap=jp.readValueAs(HashMap.class);
          for (          String type : connectionMap.keySet()) {
            List targets=(List)connectionMap.get(type);
            for (            Object targetObject : targets) {
              UUID target=UUID.fromString((String)targetObject);
              if (!entitiesOnly) {
                EntityRef entryRef=new SimpleEntityRef(target);
                WriteEvent event=new ConnectionEvent(lastEntity,type,entryRef);
                processWriteEvent(subscriber,event);
              }
            }
          }
          objectStartStack.pop();
        }
 else         if ("dictionaries".equals(name)) {
          Map<String,Object> dictionariesMap=jp.readValueAs(HashMap.class);
          for (          String dname : dictionariesMap.keySet()) {
            Map dmap=(Map)dictionariesMap.get(dname);
            if (!entitiesOnly) {
              WriteEvent event=new DictionaryEvent(lastEntity,dname,dmap);
              processWriteEvent(subscriber,event);
            }
          }
          objectStartStack.pop();
        }
 else {
          objectNameStack.push(name);
        }
      }
 else       if (token.equals(JsonToken.START_ARRAY)) {
        if (objectNameStack.size() == 1 && COLLECTION_OBJECT_NAME.equals(objectNameStack.peek())) {
          entityType=InflectionUtils.singularize(name);
        }
      }
 else       if (token.equals(JsonToken.END_OBJECT)) {
        objectStartStack.pop();
      }
    }
    if (subscriber != null) {
      subscriber.onCompleted();
    }
    logger.debug("process(): done parsing JSON");
  }
 catch (  Exception e) {
    fileImport.setErrorMessage(e.getMessage());
    try {
      rootEm.update(fileImport);
    }
 catch (    Exception ex) {
      logger.error("Error updating file import record",ex);
    }
    if (subscriber != null) {
      subscriber.onError(e);
    }
  }
}
