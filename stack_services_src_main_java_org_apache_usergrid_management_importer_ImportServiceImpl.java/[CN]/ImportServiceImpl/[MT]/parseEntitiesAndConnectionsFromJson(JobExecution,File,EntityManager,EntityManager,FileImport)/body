{
  final FileImportTracker tracker=new FileImportTracker(emf,fileImport,100);
  final Action1<WriteEvent> doWork=new Action1<WriteEvent>(){
    @Override public void call(    WriteEvent writeEvent){
      writeEvent.doWrite(em,fileImport,tracker);
    }
  }
;
  final Func2<Integer,WriteEvent,Integer> heartbeatReducer=new Func2<Integer,WriteEvent,Integer>(){
    @Override public Integer call(    final Integer integer,    final WriteEvent writeEvent){
      final int next=integer.intValue() + 1;
      if (next % HEARTBEAT_COUNT == 0) {
        execution.heartbeat();
      }
      return next;
    }
  }
;
  boolean entitiesOnly=true;
  JsonParser jp=getJsonParserForFile(file);
  final JsonEntityParserObservable jsonObservableEntities=new JsonEntityParserObservable(jp,em,rootEm,fileImport,tracker,entitiesOnly);
  jsonObservableEntities.call(null);
  logger.debug("\n\nparseEntitiesAndConnectionsFromJson(): Wrote entities\n");
  entitiesOnly=false;
  jp=getJsonParserForFile(file);
  final JsonEntityParserObservable jsonObservableOther=new JsonEntityParserObservable(jp,em,rootEm,fileImport,tracker,entitiesOnly);
  jsonObservableOther.call(null);
  logger.debug("\n\nparseEntitiesAndConnectionsFromJson(): Wrote others for file {}\n",fileImport.getFileName());
  tracker.complete();
}
