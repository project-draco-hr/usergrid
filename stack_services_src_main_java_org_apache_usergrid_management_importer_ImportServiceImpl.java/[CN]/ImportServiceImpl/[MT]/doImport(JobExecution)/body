{
  logger.debug("doImport()");
  Map<String,Object> config=(Map<String,Object>)jobExecution.getJobData().getProperty("importInfo");
  Object s3PlaceHolder=jobExecution.getJobData().getProperty("s3Import");
  S3Import s3Import=null;
  if (config == null) {
    logger.error("doImport(): Import Information passed through is null");
    return;
  }
  UUID importId=(UUID)jobExecution.getJobData().getProperty(IMPORT_ID);
  EntityManager rooteEm=emf.getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
  Import rootImportTask=rooteEm.get(importId,Import.class);
  rootImportTask.setState(Import.State.STARTED);
  rootImportTask.setStarted(System.currentTimeMillis());
  rootImportTask.setErrorMessage(" ");
  rooteEm.update(rootImportTask);
  try {
    if (s3PlaceHolder != null) {
      s3Import=(S3Import)s3PlaceHolder;
    }
 else {
      s3Import=new S3ImportImpl();
    }
  }
 catch (  Exception e) {
    logger.error("doImport(): S3Import doesn't exist");
    rootImportTask.setErrorMessage(e.getMessage());
    rootImportTask.setState(Import.State.FAILED);
    rooteEm.update(rootImportTask);
    return;
  }
  logger.debug("doImport(): updated state");
  final List<File> files;
  try {
    if (config.get("organizationId") == null) {
      logger.error("doImport(): No organization could be found");
      rootImportTask.setErrorMessage("No organization could be found");
      rootImportTask.setState(Import.State.FAILED);
      rooteEm.update(rootImportTask);
      return;
    }
 else {
      if (config.get("applicationId") == null) {
        throw new UnsupportedOperationException("Import applications not supported");
      }
 else       if (config.get("collectionName") == null) {
        throw new UnsupportedOperationException("Import application not supported");
      }
 else {
        files=importCollectionFromOrgApp((UUID)config.get("organizationId"),(UUID)config.get("applicationId"),config,jobExecution,s3Import);
      }
    }
  }
 catch (  OrganizationNotFoundException|ApplicationNotFoundException e) {
    rootImportTask.setErrorMessage(e.getMessage());
    rootImportTask.setState(Import.State.FAILED);
    rooteEm.update(rootImportTask);
    return;
  }
  if (files.size() == 0) {
    rootImportTask.setState(Import.State.FINISHED);
    rootImportTask.setErrorMessage("no files found in the bucket with the relevant context");
    rooteEm.update(rootImportTask);
  }
 else {
    Map<String,Object> fileMetadata=new HashMap<String,Object>();
    ArrayList<Map<String,Object>> value=new ArrayList<Map<String,Object>>();
    final List<JobData> fileJobs=new ArrayList<>(files.size());
    for (    File file : files) {
      final JobData jobData=createFileTask(config,file.getPath(),rootImportTask);
      fileJobs.add(jobData);
    }
    for (    JobData jobData : fileJobs) {
      final JobData scheduled=scheduleFileTasks(jobData);
      Map<String,Object> fileJobID=new HashMap<String,Object>();
      fileJobID.put("FileName",scheduled.getProperty("File"));
      fileJobID.put("JobID",scheduled.getUuid());
      value.add(fileJobID);
    }
    fileMetadata.put("files",value);
    rootImportTask.addProperties(fileMetadata);
    rooteEm.update(rootImportTask);
  }
}
