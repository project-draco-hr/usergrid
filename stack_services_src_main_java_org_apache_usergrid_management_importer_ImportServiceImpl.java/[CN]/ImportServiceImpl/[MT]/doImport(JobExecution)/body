{
  logger.debug("doImport()");
  Map<String,Object> config=(Map<String,Object>)jobExecution.getJobData().getProperty("importInfo");
  if (config == null) {
    logger.error("doImport(): Import Information passed through is null");
    return;
  }
  Map<String,Object> properties=(Map<String,Object>)config.get("properties");
  Map<String,Object> storage_info=(Map<String,Object>)properties.get("storage_info");
  String bucketName=(String)storage_info.get("bucket_location");
  String accessId=(String)storage_info.get(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR);
  String secretKey=(String)storage_info.get(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR);
  EntityManager emManagementApp=emf.getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
  UUID importId=(UUID)jobExecution.getJobData().getProperty(IMPORT_ID);
  Import rootImportTask=emManagementApp.get(importId,Import.class);
  rootImportTask.setState(Import.State.STARTED);
  rootImportTask.setStarted(System.currentTimeMillis());
  rootImportTask.setErrorMessage(" ");
  emManagementApp.update(rootImportTask);
  logger.debug("doImport(): updated state");
  S3Import s3Import;
  Object s3PlaceHolder=jobExecution.getJobData().getProperty("s3Import");
  try {
    if (s3PlaceHolder != null) {
      s3Import=(S3Import)s3PlaceHolder;
    }
 else {
      s3Import=new S3ImportImpl();
    }
  }
 catch (  Exception e) {
    logger.error("doImport(): Error creating S3Import",e);
    rootImportTask.setErrorMessage(e.getMessage());
    rootImportTask.setState(Import.State.FAILED);
    emManagementApp.update(rootImportTask);
    return;
  }
  final List<String> bucketFiles;
  try {
    if (config.get("organizationId") == null) {
      logger.error("doImport(): No organization could be found");
      rootImportTask.setErrorMessage("No organization could be found");
      rootImportTask.setState(Import.State.FAILED);
      emManagementApp.update(rootImportTask);
      return;
    }
 else {
      if (config.get("applicationId") == null) {
        throw new UnsupportedOperationException("Import applications not supported");
      }
 else       if (config.get("collectionName") == null) {
        throw new UnsupportedOperationException("Import application not supported");
      }
 else {
        bucketFiles=s3Import.getBucketFileNames(bucketName,".json",accessId,secretKey);
      }
    }
  }
 catch (  OrganizationNotFoundException|ApplicationNotFoundException e) {
    rootImportTask.setErrorMessage(e.getMessage());
    rootImportTask.setState(Import.State.FAILED);
    emManagementApp.update(rootImportTask);
    return;
  }
  if (bucketFiles.isEmpty()) {
    rootImportTask.setState(Import.State.FINISHED);
    rootImportTask.setErrorMessage("No files found in the bucket: " + bucketName);
    emManagementApp.update(rootImportTask);
  }
 else {
    Map<String,Object> fileMetadata=new HashMap<>();
    ArrayList<Map<String,Object>> value=new ArrayList<>();
    final List<JobData> fileJobs=new ArrayList<>(bucketFiles.size());
    for (    String bucketFile : bucketFiles) {
      final JobData jobData=createFileTask(config,bucketFile,rootImportTask);
      fileJobs.add(jobData);
    }
    for (    JobData jobData : fileJobs) {
      final JobData scheduled=scheduleFileTasks(jobData);
      Map<String,Object> fileJobID=new HashMap<>();
      fileJobID.put("FileName",scheduled.getProperty("File"));
      fileJobID.put("JobID",scheduled.getUuid());
      value.add(fileJobID);
    }
    fileMetadata.put("files",value);
    rootImportTask.addProperties(fileMetadata);
    emManagementApp.update(rootImportTask);
  }
}
