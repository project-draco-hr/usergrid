{
  Map<String,Object> properties=(Map<String,Object>)jobExecution.getJobData().getProperty("properties");
  if (properties == null) {
    logger.error("downloadAndImportFile(): Import Information passed through is null");
    return;
  }
  Map<String,Object> storage_info=(Map<String,Object>)properties.get("storage_info");
  String bucketName=(String)storage_info.get("bucket_location");
  String accessId=(String)storage_info.get("s3_access_id");
  String secretKey=(String)storage_info.get("s3_key");
  EntityManager emManagementApp=emf.getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
  FileImport fileImport;
  try {
    fileImport=getFileImportEntity(jobExecution);
  }
 catch (  Exception e) {
    logger.error("Error updating fileImport to set state of file import",e);
    return;
  }
  final FileImportTracker tracker=new FileImportTracker(emf,fileImport,100);
  String fileName=jobExecution.getJobData().getProperty("File").toString();
  UUID targetAppId=(UUID)jobExecution.getJobData().getProperty("applicationId");
  if (FileImport.State.FAILED.equals(fileImport.getState()) || FileImport.State.FINISHED.equals(fileImport.getState())) {
    return;
  }
  logger.debug("downloadAndImportFile() for file {} ",fileName);
  try {
    emManagementApp.update(fileImport);
    fileImport.setState(FileImport.State.STARTED);
    emManagementApp.update(fileImport);
    if (emManagementApp.get(targetAppId) == null) {
      tracker.fatal("Application " + targetAppId + " does not exist");
      return;
    }
  }
 catch (  Exception e) {
    tracker.fatal("Application " + targetAppId + " does not exist");
  }
  EntityManager targetEm=emf.getEntityManager(targetAppId);
  File downloadedFile=null;
  S3Import s3Import;
  Object s3PlaceHolder=jobExecution.getJobData().getProperty("s3Import");
  try {
    if (s3PlaceHolder != null) {
      s3Import=(S3Import)s3PlaceHolder;
    }
 else {
      s3Import=new S3ImportImpl();
    }
  }
 catch (  Exception e) {
    tracker.fatal("Unable to connect to S3 bucket, error: " + e.getMessage());
    return;
  }
  try {
    downloadedFile=s3Import.copyFileFromBucket(fileName,bucketName,accessId,secretKey);
  }
 catch (  Exception e) {
    tracker.fatal("Error downloading file " + fileName + ": "+ e.getMessage());
  }
  try {
    parseEntitiesAndConnectionsFromJson(jobExecution,downloadedFile,targetEm,emManagementApp,fileImport,tracker);
  }
 catch (  Exception e) {
    tracker.fatal("Error importing file " + fileName + ": "+ e.getMessage());
  }
  String randTag=RandomStringUtils.randomAlphanumeric(4);
  int failCount=0;
  int successCount=0;
  Import importEntity=null;
  try {
    Results importJobResults=emManagementApp.getConnectingEntities(fileImport,IMPORT_FILE_INCLUDES_CONNECTION,null,Level.ALL_PROPERTIES);
    List<Entity> importEntities=importJobResults.getEntities();
    UUID importId=importEntities.get(0).getUuid();
    importEntity=emManagementApp.get(importId,Import.class);
    logger.debug("{} Got importEntity {}",randTag,importEntity.getUuid());
    EntityManager emMgmtApp=emf.getEntityManager(CpNamingUtils.MANAGEMENT_APPLICATION_ID);
    Query query=new Query();
    query.setEntityType(Schema.getDefaultSchema().getEntityType(FileImport.class));
    query.setConnectionType(IMPORT_FILE_INCLUDES_CONNECTION);
    query.setLimit(MAX_FILE_IMPORTS);
    try {
      Thread.sleep(5000);
    }
 catch (    Exception intentionallyIgnored) {
    }
    Results entities=emMgmtApp.searchConnectedEntities(importEntity,query);
    PagingResultsIterator itr=new PagingResultsIterator(entities);
    logger.debug("{} Check {} jobs to see if we are done for file {}",new Object[]{randTag,entities.size(),fileImport.getFileName()});
    while (itr.hasNext()) {
      FileImport fi=(FileImport)itr.next();
switch (fi.getState()) {
case FAILED:
        failCount++;
      break;
case FINISHED:
    successCount++;
  continue;
default :
logger.debug("{} not done yet, bail out...",randTag);
return;
}
}
}
 catch (Exception e) {
failCount++;
if (importEntity != null) {
importEntity.setErrorMessage("Error determining status of file import jobs");
}
logger.debug("Error determining status of file import jobs",e);
}
logger.debug("{} successCount = {} failCount = {}",new Object[]{randTag,successCount,failCount});
if (importEntity != null && failCount == 0) {
logger.debug("{} FINISHED",randTag);
importEntity.setState(Import.State.FINISHED);
}
 else if (importEntity != null) {
importEntity.setState(Import.State.FAILED);
}
try {
emManagementApp.update(importEntity);
}
 catch (Exception e) {
logger.error("Error updating import entity",e);
}
}
