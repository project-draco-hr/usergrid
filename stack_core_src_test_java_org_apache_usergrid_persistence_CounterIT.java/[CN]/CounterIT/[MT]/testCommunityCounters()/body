{
  EntityManager em=setup.getEmf().getEntityManager(setup.getEmf().getManagementAppId());
  Map<String,Long> counts=em.getApplicationCounters();
  long originalAdminLoginsCount=counts.get("admin.logins").longValue();
  String randomSuffix=RandomStringUtils.randomAlphabetic(20);
  String orgName="testCounter" + randomSuffix;
  String appName="testEntityCounters" + randomSuffix;
  Group organizationEntity=new Group();
  organizationEntity.setPath("tst-counter" + randomSuffix);
  organizationEntity.setProperty("name",orgName);
  organizationEntity=em.create(organizationEntity);
  UUID applicationId=setup.getEmf().createApplication(orgName,appName);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("name",orgName + "/" + appName);
  Entity applicationEntity=em.create(applicationId,"application_info",properties);
  em.createConnection(organizationEntity.toTypedEntity(),"owns",applicationEntity);
  Event event=new Event();
  event.setTimestamp(System.currentTimeMillis());
  event.addCounter("admin.logins",1);
  event.setGroup(organizationEntity.getUuid());
  em.create(event);
  counts=em.getApplicationCounters();
  LOG.info(JsonUtils.mapToJsonString(counts));
  assertNotNull(counts.get("admin.logins"));
  assertEquals(1,counts.get("admin.logins").longValue() - originalAdminLoginsCount);
  Results r=em.getAggregateCounters(null,null,null,"admin.logins",CounterResolution.ALL,ts,System.currentTimeMillis(),false);
  LOG.info(JsonUtils.mapToJsonString(r.getCounters()));
  assertEquals(1,r.getCounters().get(0).getValues().get(0).getValue() - originalAdminLoginsCount);
  Query query=new Query();
  query.addCounterFilter("admin.logins:*:*:*");
  query.setStartTime(ts);
  query.setFinishTime(System.currentTimeMillis());
  query.setResolution(CounterResolution.SIX_HOUR);
  r=em.getAggregateCounters(query);
  LOG.info(JsonUtils.mapToJsonString(r.getCounters()));
  assertEquals(1,r.getCounters().get(0).getValues().get(0).getValue());
}
