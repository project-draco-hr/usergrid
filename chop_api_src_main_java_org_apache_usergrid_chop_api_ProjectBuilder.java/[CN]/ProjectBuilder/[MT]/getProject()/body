{
  return new Project(){
    @Override public String getChopVersion(){
      return chopVersion;
    }
    @Override public String getCreateTimestamp(){
      return createTimestamp;
    }
    @Override public String getVcsVersion(){
      return commitId;
    }
    @Override public String getVcsRepoUrl(){
      return vcsRepoUrl;
    }
    @Override public String getGroupId(){
      return groupId;
    }
    @Override public String getArtifactId(){
      return artifactId;
    }
    @Override public String getVersion(){
      return version;
    }
    @Override public String getTestPackageBase(){
      return testPackageBase;
    }
    @Override public long getTestStopTimeout(){
      return Long.parseLong(DEFAULT_TEST_STOP_TIMEOUT);
    }
    @Override public String getLoadTime(){
      return loadTime;
    }
    @Override public String getLoadKey(){
      return loadKey;
    }
    @Override public String getMd5(){
      return md5;
    }
    @JsonIgnore @Override public void addPropertyChangeListener(    final PropertyChangeListener listener){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public void removePropertyChangeListener(    final PropertyChangeListener listener){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public OptionState[] getOptions(){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public OptionState getOption(    final String key){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public String getKeyByMethod(    final String methodName){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Object getValueByMethod(    final String methodName){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Properties filterOptions(    final Properties properties){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Map<String,Object> filterOptions(    final Map<String,Object> entries){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public void override(    final String key,    final String override){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public boolean setOverrides(    final Overrides overrides){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Overrides getOverrides(){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public void bypass(    final String key,    final String bypass){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public boolean setBypass(    final Bypass bypass){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Bypass getBypass(){
      throw new NotImplementedException();
    }
    @JsonIgnore @Override public Class getFigInterface(){
      return Project.class;
    }
    @JsonIgnore @Override public boolean isSingleton(){
      return false;
    }
  }
;
}
