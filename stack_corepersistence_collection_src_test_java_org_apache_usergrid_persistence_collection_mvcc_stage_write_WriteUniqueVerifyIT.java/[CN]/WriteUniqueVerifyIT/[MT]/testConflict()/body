{
  final Id orgId=new SimpleId("WriteUniqueVerifyIT");
  final Id appId=new SimpleId("testConflict");
  final CollectionScope scope=new CollectionScopeImpl(appId,orgId,"fastcars");
  final EntityCollectionManager entityManager=cmf.createCollectionManager(scope);
  final Entity entity=TestEntityGenerator.generateEntity();
  entity.setField(new StringField("name","Aston Martin Vanquish",true));
  entity.setField(new StringField("identifier","v12",true));
  entity.setField(new IntegerField("top_speed_mph",200));
  entityManager.write(entity).toBlockingObservable().last();
  Entity entityFetched=entityManager.load(entity.getId()).toBlockingObservable().last();
  entityFetched.setField(new StringField("foo","bar"));
  final Entity entity2=TestEntityGenerator.generateEntity();
  entity2.setField(new StringField("name","Aston Martin Vanquish",true));
  entity2.setField(new StringField("identifier","v12",true));
  entity2.setField(new IntegerField("top_speed_mph",120));
  try {
    entityManager.write(entity2).toBlockingObservable().last();
    fail("Write should have thrown an exception");
  }
 catch (  WriteUniqueVerifyException e) {
    assertEquals(2,e.getVioliations().size());
  }
  entity.setField(new IntegerField("top_speed_mph",190));
  entityManager.write(entity);
}
