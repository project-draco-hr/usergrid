{
  final Id appId=new SimpleId("testConflict");
  final ApplicationScope scope=new ApplicationScopeImpl(appId);
  final EntityCollectionManager entityManager=cmf.createCollectionManager(scope);
  final Entity entity=TestEntityGenerator.generateEntity();
  entity.setField(new StringField("name","Aston Martin Vanquish",true));
  entity.setField(new StringField("identifier","v12",true));
  entity.setField(new IntegerField("top_speed_mph",200));
  entityManager.write(entity,null).toBlocking().last();
  Entity entityFetched=entityManager.load(entity.getId()).toBlocking().last();
  entityFetched.setField(new StringField("foo","bar"));
  try {
    Thread.sleep(serializationFig.getTimeout() * 1100);
  }
 catch (  InterruptedException ignored) {
  }
  final Entity entity2=TestEntityGenerator.generateEntity();
  entity2.setField(new StringField("name","Aston Martin Vanquish",true));
  entity2.setField(new StringField("identifier","v12",true));
  entity2.setField(new IntegerField("top_speed_mph",120));
  try {
    entityManager.write(entity2,null).toBlocking().last();
    fail("Write should have thrown an exception");
  }
 catch (  Exception ex) {
    WriteUniqueVerifyException e=(WriteUniqueVerifyException)ex;
    assertEquals(2,e.getVioliations().size());
  }
  entity.setField(new IntegerField("top_speed_mph",190));
  entityManager.write(entity,null);
}
