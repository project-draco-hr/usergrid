{
  final String clusterName=indexFig.getClusterName();
  final String nodeName=indexFig.getNodeName();
  final int port=indexFig.getPort();
  final StringBuffer hosts=new StringBuffer();
  String finalHosts=indexFig.getPfcHosts();
  if (finalHosts == null || finalHosts.isEmpty() || finalHosts.equalsIgnoreCase(IndexFig.VALIDATION_DEFAULT_VALUE)) {
    finalHosts=indexFig.getHosts();
  }
  logger.info("Elasticsearch hosts used: {}",finalHosts);
  for (  String host : finalHosts.split(",")) {
    hosts.append(host).append(":").append(port).append(",");
  }
  hosts.deleteCharAt(hosts.length() - 1);
  final String hostString=hosts.toString();
  Settings settings=ImmutableSettings.settingsBuilder().put("cluster.name",clusterName).put("discovery.zen.ping.unicast.hosts",hostString).put("discovery.zen.ping.multicast.enabled","false").put("http.enabled",false).put("client.transport.ping_timeout",2000).put("client.transport.nodes_sampler_interval",100).put("network.tcp.blocking",true).put("node.client",true).put("node.name",nodeName).build();
  if (logger.isTraceEnabled()) {
    logger.trace("Creating ElasticSearch client with settings: {}",settings.getAsMap());
  }
  Node node=NodeBuilder.nodeBuilder().settings(settings).client(true).data(false).node();
  return node.client();
}
