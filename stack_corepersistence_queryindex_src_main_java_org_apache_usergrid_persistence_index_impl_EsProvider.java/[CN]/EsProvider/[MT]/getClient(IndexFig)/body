{
  if (client == null) {
    Client newClient=null;
    if (fig.isEmbedded()) {
      int port=AvailablePortFinder.getNextAvailable(2000);
      Settings settings=ImmutableSettings.settingsBuilder().put("node.http.enabled",true).put("transport.tcp.port",port).put("path.logs","target/elasticsearch/logs_" + port).put("path.data","target/elasticsearch/data_" + port).put("gateway.type","none").put("index.store.type","memory").put("index.number_of_shards",1).put("index.number_of_replicas",1).build();
      log.info("Starting ElasticSearch embedded with settings: " + settings.getAsMap());
      Node node=NodeBuilder.nodeBuilder().local(true).settings(settings).node();
      newClient=node.client();
    }
 else {
      Settings settings=ImmutableSettings.settingsBuilder().put("cluster.name",fig.getClusterName()).put("client.transport.ignore_cluster_name",true).put("client.transport.ping_timeout",2000).put("client.transport.nodes_sampler_interval",100).build();
      log.info("Creating ElasticSearch client with settings: " + settings.getAsMap());
      TransportClient transportClient=new TransportClient(settings);
      for (      String host : fig.getHosts().split(",")) {
        transportClient.addTransportAddress(new InetSocketTransportAddress(host.trim(),fig.getPort()));
        log.info("   Added transport for ElasticSearch host {}:{}",host.trim(),fig.getPort());
      }
      newClient=transportClient;
    }
    client=newClient;
  }
  return client;
}
