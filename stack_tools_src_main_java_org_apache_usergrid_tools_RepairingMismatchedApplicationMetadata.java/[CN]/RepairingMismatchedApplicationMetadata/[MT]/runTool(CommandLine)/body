{
  startSpring();
  LogManager.getLogger(RepairingMismatchedApplicationMetadata.class).setLevel(Level.INFO);
  UUID orgId=null;
  List<OrganizationInfo> orgs;
  final int size=1000;
  do {
    orgs=managementService.getOrganizations(orgId,size);
    for (    OrganizationInfo org : orgs) {
      orgId=org.getUuid();
      logger.info("Auditing org {}",org.getName());
      try {
        BiMap<UUID,String> apps=managementService.getApplicationsForOrganization(org.getUuid());
        for (        Map.Entry<UUID,String> app : apps.entrySet()) {
          logger.info("Auditing org {} app {}",org.getName(),app.getValue());
          UUID applicationId=emf.lookupApplication(app.getValue());
          if (applicationId == null) {
            String appName=app.getValue();
            Keyspace ko=cass.getSystemKeyspace();
            Mutator<ByteBuffer> m=createMutator(ko,be);
            long timestamp=cass.createTimestamp();
            addInsertToMutator(m,APPLICATIONS_CF,appName,PROPERTY_UUID,app.getKey(),timestamp);
            addInsertToMutator(m,APPLICATIONS_CF,appName,PROPERTY_NAME,appName,timestamp);
            batchExecute(m,RETRY_COUNT);
            logger.info("Repairing alias with app uuid {}, and name {}",app.getKey(),app.getValue());
          }
        }
      }
 catch (      Exception e) {
        logger.error("Unable to process applications for organization {}",org,e);
      }
    }
  }
 while (orgs != null && orgs.size() == size);
  logger.info("Completed repairing aliases");
  Thread.sleep(1000 * 60);
}
