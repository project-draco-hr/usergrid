{
  if (!populateEc2Metadata()) {
    LOG.warn("We're not running in EC2! Node registration would not succeed.");
    return false;
  }
  StringBuilder sb=new StringBuilder();
  sb.append(perftestFormation.get()).append('_').append(publicHostname);
  this.blobName=sb.toString();
  sb=new StringBuilder();
  sb.append(FORMATION_KEY).append('=').append(perftestFormation.get()).append("\n");
  sb.append(PUBLIC_HOSTNAME_KEY).append('=').append(publicHostname).append("\n");
  sb.append(LOCAL_HOSTNAME_KEY).append('=').append(localHostname).append("\n");
  sb.append(PUBLIC_IPV4_KEY).append('=').append(publicIpv4).append("\n");
  sb.append(LOCAL_IPV4_KEY).append('=').append(localIpv4).append("\n");
  context=ContextBuilder.newBuilder("aws-s3").credentials(s3key.get(),s3secret.get()).modules(MODULES).buildView(BlobStoreContext.class);
  BlobStore blobStore=context.getBlobStore();
  BlobBuilder builder=blobStore.blobBuilder(this.blobName).payload(sb.toString());
  Blob blob=builder.build();
  String blobUuid=context.getBlobStore().putBlob(DEFAULT_CONTAINER,blob);
  LOG.info("Successfully registered {} with UUID = {}",this.blobName,blobUuid);
  return true;
}
