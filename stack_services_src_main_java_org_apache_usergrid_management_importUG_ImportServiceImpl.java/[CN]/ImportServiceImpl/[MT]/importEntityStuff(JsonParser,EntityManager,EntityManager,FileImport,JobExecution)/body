{
  final JsonParserObservable subscribe=new JsonParserObservable(jp,em,rootEm,fileImport);
  final Observable<WriteEvent> observable=Observable.create(subscribe);
  final Action1<WriteEvent> doWork=new Action1<WriteEvent>(){
    @Override public void call(    WriteEvent writeEvent){
      writeEvent.doWrite(em,jobExecution,fileImport);
    }
  }
;
  final AtomicLong entityCounter=new AtomicLong();
  final AtomicLong eventCounter=new AtomicLong();
  observable.parallel(new Func1<Observable<WriteEvent>,Observable<WriteEvent>>(){
    @Override public Observable<WriteEvent> call(    Observable<WriteEvent> entityWrapperObservable){
      return entityWrapperObservable.doOnNext(doWork).doOnNext(new Action1<WriteEvent>(){
        @Override public void call(        WriteEvent writeEvent){
          if (!(writeEvent instanceof EntityEvent)) {
            final long val=eventCounter.incrementAndGet();
            if (val % 50 == 0) {
              jobExecution.heartbeat();
            }
            return;
          }
          final long value=entityCounter.incrementAndGet();
          if (value % 2000 == 0) {
            try {
              fileImport.setLastUpdatedUUID(((EntityEvent)writeEvent).getEntityUuid().toString());
              rootEm.update(fileImport);
            }
 catch (            Exception ex) {
            }
          }
          if (value % 100 == 0) {
            jobExecution.heartbeat();
          }
        }
      }
);
    }
  }
,Schedulers.io()).toBlocking().last();
}
