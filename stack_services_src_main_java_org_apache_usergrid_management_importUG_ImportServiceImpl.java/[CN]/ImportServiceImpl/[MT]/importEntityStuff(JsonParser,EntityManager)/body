{
  EntityRef ownerEntryRef=null;
  while (jp.nextToken() != JsonToken.END_OBJECT) {
    String collectionName=jp.getCurrentName();
    if (collectionName.equals("connections")) {
      jp.nextToken();
      while (jp.nextToken() != JsonToken.END_OBJECT) {
        String connectionType=jp.getCurrentName();
        jp.nextToken();
        while (jp.nextToken() != JsonToken.END_ARRAY) {
          String entryId=jp.getText();
          EntityRef entryRef=em.getRef(UUID.fromString(entryId));
        }
      }
    }
 else     if (collectionName.equals("dictionaries")) {
      jp.nextToken();
      while (jp.nextToken() != JsonToken.END_OBJECT) {
        String dictionaryName=jp.getCurrentName();
        jp.nextToken();
        @SuppressWarnings("unchecked") Map<String,Object> dictionary=jp.readValueAs(HashMap.class);
      }
    }
 else {
      jp.nextToken();
      Map<String,Object> properties=new HashMap<String,Object>();
      JsonToken token=jp.nextToken();
      while (token != JsonToken.END_OBJECT) {
        if (token == JsonToken.VALUE_STRING || token == JsonToken.VALUE_NUMBER_INT) {
          String key=jp.getCurrentName();
          if (key.equals("uuid")) {
            ownerEntryRef=em.getRef(UUID.fromString(jp.getText()));
          }
 else {
            String value=jp.getText();
            properties.put(key,value);
          }
        }
        token=jp.nextToken();
      }
      em.updateProperties(ownerEntryRef,properties);
    }
  }
}
