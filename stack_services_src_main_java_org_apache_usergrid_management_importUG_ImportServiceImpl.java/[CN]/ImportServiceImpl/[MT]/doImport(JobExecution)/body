{
  Map<String,Object> config=(Map<String,Object>)jobExecution.getJobData().getProperty("importInfo");
  Object s3PlaceHolder=jobExecution.getJobData().getProperty("s3Import");
  S3Import s3Import=null;
  if (config == null) {
    logger.error("Import Information passed through is null");
    return;
  }
  UUID importId=(UUID)jobExecution.getJobData().getProperty(IMPORT_ID);
  EntityManager em=emf.getEntityManager(MANAGEMENT_APPLICATION_ID);
  Import importUG=em.get(importId,Import.class);
  importUG.setState(Import.State.STARTED);
  importUG.setStarted(System.currentTimeMillis());
  importUG.setErrorMessage(" ");
  em.update(importUG);
  try {
    if (s3PlaceHolder != null) {
      s3Import=(S3Import)s3PlaceHolder;
    }
 else {
      s3Import=new S3ImportImpl();
    }
  }
 catch (  Exception e) {
    logger.error("S3Import doesn't exist");
    importUG.setErrorMessage(e.getMessage());
    importUG.setState(Import.State.FAILED);
    em.update(importUG);
    return;
  }
  try {
    if (config.get("organizationId") == null) {
      logger.error("No organization could be found");
      importUG.setErrorMessage("No organization could be found");
      importUG.setState(Import.State.FAILED);
      em.update(importUG);
      return;
    }
 else     if (config.get("applicationId") == null) {
      importApplicationsFromOrg((UUID)config.get("organizationId"),config,jobExecution,s3Import);
    }
 else     if (config.get("collectionName") == null) {
      importApplicationFromOrg((UUID)config.get("organizationId"),(UUID)config.get("applicationId"),config,jobExecution,s3Import);
    }
 else {
      importCollectionFromOrgApp((UUID)config.get("applicationId"),config,jobExecution,s3Import);
    }
  }
 catch (  OrganizationNotFoundException e) {
    importUG.setErrorMessage(e.getMessage());
    importUG.setState(Import.State.FINISHED);
    em.update(importUG);
    return;
  }
catch (  ApplicationNotFoundException e) {
    importUG.setErrorMessage(e.getMessage());
    importUG.setState(Import.State.FINISHED);
    em.update(importUG);
    return;
  }
  if (files.size() == 0) {
    importUG.setState(Import.State.FINISHED);
    importUG.setErrorMessage("no files found in the bucket with the relevant context");
    em.update(importUG);
  }
 else {
    Map<String,Object> fileMetadata=new HashMap<String,Object>();
    ArrayList<Map<String,Object>> value=new ArrayList<Map<String,Object>>();
    for (    File eachfile : files) {
      UUID jobID=scheduleFile(eachfile.getPath(),em.getRef(importId));
      Map<String,Object> fileJobID=new HashMap<String,Object>();
      fileJobID.put("FileName",eachfile.getName());
      fileJobID.put("JobID",jobID.toString());
      value.add(fileJobID);
    }
    fileMetadata.put("files",value);
    importUG.addProperties(fileMetadata);
    em.update(importUG);
  }
  return;
}
