{
  ArrayList fileNames=(ArrayList)importUG.getDynamicProperties().get("files");
  WriteEvent entityWrapper=null;
  Entity entity=null;
  EntityRef ownerEntityRef=null;
  String entityUuid="";
  String entityType="";
  try {
    while (!subscriber.isUnsubscribed() && jp.nextToken() != JsonToken.END_OBJECT) {
      String collectionName=jp.getCurrentName();
      try {
        if (collectionName.equals("connections")) {
          jp.nextToken();
          while (jp.nextToken() != JsonToken.END_OBJECT) {
            String connectionType=jp.getCurrentName();
            jp.nextToken();
            while (jp.nextToken() != JsonToken.END_ARRAY) {
              String entryId=jp.getText();
              EntityRef entryRef=new SimpleEntityRef(UUID.fromString(entryId));
              entityWrapper=new ConnectionEvent(ownerEntityRef,connectionType,entryRef);
              subscriber.onNext(entityWrapper);
              subscriber.onCompleted();
            }
          }
        }
 else         if (collectionName.equals("dictionaries")) {
          jp.nextToken();
          while (jp.nextToken() != JsonToken.END_OBJECT) {
            String dictionaryName=jp.getCurrentName();
            jp.nextToken();
            @SuppressWarnings("unchecked") Map<String,Object> dictionary=jp.readValueAs(HashMap.class);
            entityWrapper=new DictionaryEvent(ownerEntityRef,dictionaryName,dictionary);
            subscriber.onNext(entityWrapper);
            subscriber.onCompleted();
          }
        }
 else {
          jp.nextToken();
          Map<String,Object> properties=new HashMap<String,Object>();
          JsonToken token=jp.nextToken();
          while (token != JsonToken.END_OBJECT) {
            if (token == JsonToken.VALUE_STRING || token == JsonToken.VALUE_NUMBER_INT) {
              String key=jp.getCurrentName();
              if (key.equals("uuid")) {
                entityUuid=jp.getText();
              }
 else               if (key.equals("type")) {
                entityType=jp.getText();
              }
 else               if (key.length() != 0 && jp.getText().length() != 0) {
                String value=jp.getText();
                properties.put(key,value);
              }
            }
            token=jp.nextToken();
          }
          entityWrapper=new EntityEvent(UUID.fromString(entityUuid),entityType,properties);
          subscriber.onNext(entityWrapper);
          ownerEntityRef=new SimpleEntityRef(entityType,UUID.fromString(entityUuid));
          subscriber.onCompleted();
        }
      }
 catch (      IllegalArgumentException e) {
        ((Map<String,Object>)fileNames.get(index)).put("Entity Creation Error",e.getMessage());
        rootEm.update(importUG);
        subscriber.onError(e);
      }
catch (      Exception e) {
        ((Map<String,Object>)fileNames.get(index)).put("Miscellaneous Error",e.getMessage());
        rootEm.update(importUG);
        subscriber.onError(e);
      }
    }
    if (entity != null) {
      entityCount++;
      if (entityCount == 2000) {
        ((Map<String,Object>)fileNames.get(index)).put("lastUpdatedUUID",entityUuid);
        rootEm.update(importUG);
        entityCount=0;
      }
    }
  }
 catch (  Exception e) {
    System.out.println("something went wrong in observable json parser - " + e);
  }
}
