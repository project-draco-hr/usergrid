{
  if (inTestMode(testMode)) {
    LOG.info("Calling /stop in test mode ...");
  }
 else {
    LOG.info("Calling /stop");
  }
  LOG.info("  Commit Id: {}",commitId);
  LOG.info("  Group Id: {}",groupId);
  LOG.info("  Artifact Id: {}",artifactId);
  LOG.info("  Version: {}",version);
  LOG.info("  User: {}",user);
  SetupStackState status=stackCoordinator.stackStatus(commitId,artifactId,groupId,version,user);
  if (inTestMode(testMode)) {
    return Response.status(Response.Status.CREATED).entity(status).type(MediaType.APPLICATION_JSON).build();
  }
  if (!status.equals(SetupStackState.Running)) {
    return Response.status(Response.Status.OK).entity("Stack is " + status.toString() + ", cannot stop tests.").type(MediaType.APPLICATION_JSON).build();
  }
  LOG.info("Stack is set up, checking runner states...");
  String moduleId=BasicModule.createId(groupId,artifactId,version);
  Collection<Runner> runners=runnerCoordinator.getRunners(user,commitId,moduleId);
  Map<Runner,State> states=runnerCoordinator.getStates(runners);
  Collection<Runner> runningRunners=new LinkedList<Runner>();
  StringBuilder sbToStop=new StringBuilder();
  for (  Runner runner : runners) {
    State state=states.get(runner);
    if (state == State.RUNNING) {
      runningRunners.add(runner);
      sbToStop.append("Runner at ").append(runner.getUrl()).append(" is in ").append(state).append(" state.\n");
    }
  }
  if (runningRunners.size() == 0) {
    return Response.status(Response.Status.OK).entity("No runners found that are still RUNNING, will not stop.").type(MediaType.APPLICATION_JSON).build();
  }
  LOG.info(sbToStop.toString());
  LOG.info("Sending stop signal to running instances...");
  states=runnerCoordinator.stop(runningRunners);
  int notStopped=0;
  StringBuilder sb=new StringBuilder();
  sb.append("Could not stop all runners.\n");
  for (  Runner runner : runningRunners) {
    State state=states.get(runner);
    if (state != State.STOPPED) {
      notStopped++;
      sb.append("Runner at ").append(runner.getUrl()).append(" is in ").append(state).append(" state.\n");
    }
  }
  runnerCoordinator.trimIncompleteRuns(runners,commitId);
  if (notStopped > 0) {
    sb.append(notStopped).append(" out of ").append(runningRunners.size()).append(" running runners could not be stopped.");
    return Response.status(Response.Status.OK).entity(sb.toString()).type(MediaType.APPLICATION_JSON).build();
  }
  CoordinatedStack stack=stackCoordinator.findCoordinatedStack(commitId,artifactId,groupId,version,user);
  stack.setSetupState(SetupStackSignal.STOP);
  return Response.status(Response.Status.CREATED).entity("All running runners have been stopped.").type(MediaType.APPLICATION_JSON).build();
}
