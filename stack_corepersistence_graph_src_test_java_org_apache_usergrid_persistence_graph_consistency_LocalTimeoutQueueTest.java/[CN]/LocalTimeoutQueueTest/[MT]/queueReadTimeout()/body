{
  TimeService timeService=mock(TimeService.class);
  final long time=1000l;
  final long timeout=1000;
  final int queueSize=1000;
  when(timeService.getCurrentTime()).thenReturn(time);
  TimeoutQueue<TestEvent> queue=new LocalTimeoutQueue<TestEvent>(timeService);
  Set<TestEvent> events=new HashSet<TestEvent>();
  for (int i=0; i < queueSize; i++) {
    final TestEvent event=new TestEvent();
    AsynchronousMessage<TestEvent> asynchronousMessage=queue.queue(event,timeout);
    events.add(event);
    assertNotNull(asynchronousMessage);
    assertEquals(event,asynchronousMessage.getEvent());
    assertEquals(time + timeout,asynchronousMessage.getTimeout());
  }
  Collection<AsynchronousMessage<TestEvent>> results=queue.take(100,timeout);
  assertEquals("Time not yet elapsed",0,results.size());
  final long firstTime=time + timeout;
  when(timeService.getCurrentTime()).thenReturn(firstTime);
  final int takeSize=100;
  final int iterations=queueSize / takeSize;
  for (int i=0; i < iterations; i++) {
    results=queue.take(takeSize,timeout);
    if (results.size() == 0) {
      break;
    }
    assertEquals("Time elapsed",100,results.size());
    Iterator<AsynchronousMessage<TestEvent>> eventIterator=results.iterator();
    while (eventIterator.hasNext()) {
      AsynchronousMessage<TestEvent> message=eventIterator.next();
      assertTrue(events.remove(message.getEvent()));
      assertEquals(firstTime + timeout,message.getTimeout());
      boolean removed=queue.remove(message);
      assertTrue(removed);
    }
  }
  assertEquals("All elements dequeued",0,events.size());
}
