{
  TimeService timeService=mock(TimeService.class);
  final long time=1000l;
  final long timeout=1000;
  when(timeService.getCurrentTime()).thenReturn(time);
  TimeoutQueue<TestEvent> queue=new LocalTimeoutQueue<TestEvent>(timeService);
  final TestEvent event=new TestEvent();
  TimeoutEvent<TestEvent> timeoutEvent=queue.queue(event,timeout);
  assertNotNull(timeoutEvent);
  assertEquals(event,timeoutEvent.getEvent());
  assertEquals(time + timeout,timeoutEvent.getTimeout());
  Collection<TimeoutEvent<TestEvent>> results=queue.take(100,timeout);
  assertEquals("Time not yet elapsed",0,results.size());
  final long firstTime=time + timeout;
  when(timeService.getCurrentTime()).thenReturn(firstTime);
  results=queue.take(100,timeout);
  assertEquals("Time elapsed",1,results.size());
  Iterator<TimeoutEvent<TestEvent>> events=results.iterator();
  TimeoutEvent<TestEvent> message=events.next();
  assertEquals(event,message.getEvent());
  assertEquals(firstTime + timeout,message.getTimeout());
  queue.remove(message);
  when(timeService.getCurrentTime()).thenReturn(firstTime * 20);
  results=queue.take(100,timeout);
  assertEquals("Queue now empty",0,results.size());
}
