{
  TimeService timeService=mock(TimeService.class);
  final long time=1000l;
  final long timeout=1000;
  when(timeService.getCurrentTime()).thenReturn(time);
  TimeoutQueue<TestEvent> queue=new LocalTimeoutQueue<TestEvent>(timeService);
  final TestEvent event=new TestEvent();
  AsynchronousEvent<TestEvent> asynchronousEvent=queue.queue(event,timeout);
  assertNotNull(asynchronousEvent);
  assertEquals(event,asynchronousEvent.getEvent());
  assertEquals(time + timeout,asynchronousEvent.getTimeout());
  Collection<AsynchronousEvent<TestEvent>> results=queue.take(100,timeout);
  assertEquals("Time not yet elapsed",0,results.size());
  final long firstTime=time + timeout;
  when(timeService.getCurrentTime()).thenReturn(firstTime);
  results=queue.take(100,timeout);
  assertEquals("Time elapsed",1,results.size());
  Iterator<AsynchronousEvent<TestEvent>> events=results.iterator();
  AsynchronousEvent<TestEvent> message=events.next();
  assertEquals(event,message.getEvent());
  assertEquals(firstTime + timeout,message.getTimeout());
  queue.remove(message);
  when(timeService.getCurrentTime()).thenReturn(firstTime * 20);
  results=queue.take(100,timeout);
  assertEquals("Queue now empty",0,results.size());
}
