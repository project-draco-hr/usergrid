{
  Map<String,Object> properties=(Map<String,Object>)exportInfo.get("properties");
  Map<String,Object> storage_info=(Map<String,Object>)properties.get("storage_info");
  String bucketName=(String)storage_info.get("bucket_location");
  String accessId=(String)storage_info.get(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR);
  String secretKey=(String)storage_info.get(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR);
  Properties overrides=new Properties();
  overrides.setProperty("s3" + ".identity",accessId);
  overrides.setProperty("s3" + ".credential",secretKey);
  final Iterable<? extends Module> MODULES=ImmutableSet.of(new JavaUrlHttpCommandExecutorServiceModule(),new Log4JLoggingModule(),new NettyPayloadModule());
  BlobStoreContext context=ContextBuilder.newBuilder("s3").credentials(accessId,secretKey).modules(MODULES).overrides(overrides).buildView(BlobStoreContext.class);
  try {
    BlobStore blobStore=context.getBlobStore();
    if (blobStore.createContainerInLocation(null,bucketName)) {
      logger.info("Created bucket " + bucketName);
    }
  }
 catch (  Exception ex) {
    logger.error("Could not start binary service: {}",ex.getMessage());
    return;
  }
  try {
    BlobStore blobStore=context.getBlobStore();
    BlobBuilder blobBuilder=blobStore.blobBuilder(filename).payload(ephemeral).calculateMD5().contentType("application/json");
    Blob blob=blobBuilder.build();
    final String uploadedFile=blobStore.putBlob(bucketName,blob,PutOptions.Builder.multipart());
    logger.info("Uploaded file name={} etag={}",filename,uploadedFile);
  }
 catch (  Exception e) {
    logger.error("Error uploading to blob store",e);
  }
}
