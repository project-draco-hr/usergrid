def parse_args():
    parser = argparse.ArgumentParser(description='Usergrid App/Collection Iterator')
    parser.add_argument('-o', '--org', help='Name of the org to migrate', type=str, required=True)
    parser.add_argument('-a', '--app', help='Multiple, name of apps to include, skip to include all', default=[], action='append')
    parser.add_argument('-c', '--collection', help='Multiple, name of collections to include, skip to include all', default=[], action='append')
    parser.add_argument('--ql', help='The Query string for processing the source collection(s)', type=str, default='select *')
    parser.add_argument('-s', '--source_config', help='The configuration of the source endpoint/org', type=str, default='source.json')
    parser.add_argument('-d', '--target_config', help='The configuration of the target endpoint/org', type=str, default='destination.json')
    parser.add_argument('-w', '--workers', help='The number of worker threads', type=int, default=1)
    parser.add_argument('-f', '--force', help='Force an update regardless of modified date', type=bool, default=False)
    parser.add_argument('--max_empty_count', help='The number of iterations for an individual worker to receive no work before stopping', type=int, default=3)
    parser.add_argument('--queue_timeout', help='The duration in seconds for an individual worker queue poll before Empty is raised', type=int, default=10)
    parser.add_argument('--map_app', help="A colon-separated string such as 'apples:oranges' which indicates to put data from the app named 'apples' from the source endpoint into app named 'oranges' in the target endpoint", default=[], action='append')
    parser.add_argument('--map_collection', help="A colon-separated string such as 'cats:dogs' which indicates to put data from collections named 'cats' from the source endpoint into a collection named 'dogs' in the target endpoint, applicable to all apps", default=[], action='append')
    parser.add_argument('--target_org', help='The org name at the Usergrid destination instance', type=str)
    my_args = parser.parse_args(sys.argv[1:])
    return vars(my_args)
