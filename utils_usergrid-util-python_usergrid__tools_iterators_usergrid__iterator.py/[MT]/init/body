def init():
    global config
    config['collection_mapping'] = {}
    config['app_mapping'] = {}
    config['org_mapping'] = {}
    with open(config.get('source_config'), 'r') as f:
        config['source_config'] = json.load(f)
    with open(config.get('target_config'), 'r') as f:
        config['target_config'] = json.load(f)
    for mapping in config.get('map_collection', []):
        parts = mapping.split(':')
        if (len(parts) == 2):
            config['collection_mapping'][parts[0]] = parts[1]
        else:
            logger.warning(('Skipping malformed Collection mapping: [%s]' % mapping))
    for mapping in config.get('map_app', []):
        parts = mapping.split(':')
        if (len(parts) == 2):
            config['app_mapping'][parts[0]] = parts[1]
        else:
            logger.warning(('Skipping malformed App mapping: [%s]' % mapping))
    for mapping in config.get('map_org', []):
        parts = mapping.split(':')
        if (len(parts) == 2):
            config['org_mapping'][parts[0]] = parts[1]
        else:
            logger.warning(('Skipping Org mapping: [%s]' % mapping))
    if ('source_config' in config):
        config['source_endpoint'] = config['source_config'].get('endpoint').copy()
        config['source_endpoint'].update(config['source_config']['credentials'][config['org']])
    config['target_org'] = (config['target_org'] if config['target_org'] else config['org'])
    if ('target_config' in config):
        config['target_endpoint'] = config['target_config'].get('endpoint').copy()
        config['target_endpoint'].update(config['target_config']['credentials'][config['target_org']])
