def get_to_work(self):
    global config
    queue = Queue()
    logger.warning('Starting workers...')
    apps_to_process = config.get('app')
    collections_to_process = config.get('collection')
    source_org = config['org']
    target_org = config.get('target_org', config.get('org'))
    source_client = None
    target_client = None
    try:
        source_client = UsergridClient(api_url=config['source_endpoint']['api_url'], org_name=source_org)
        source_client.authenticate_management_client(client_credentials=config['source_config']['credentials'][source_org])
    except UsergridError as e:
        logger.critical(e)
        exit()
    if ('target_endpoint' in config):
        try:
            target_client = UsergridClient(api_url=config['target_endpoint']['api_url'], org_name=target_org)
            target_client.authenticate_management_client(client_credentials=config['target_config']['credentials'][target_org])
        except UsergridError as e:
            logger.critical(e)
            exit()
    function_chain = [filter_entity, transform_entity, create_new]
    workers = [Worker(queue=queue, source_client=source_client, target_client=target_client, function_chain=function_chain, max_empty_count=config.get('max_empty_count', 3), queue_timeout=config.get('queue_timeout', 10)) for x in xrange(config.get('workers', 1))]
    [w.start() for w in workers]
    for app in source_client.list_apps():
        if ((len(apps_to_process) > 0) and (app not in apps_to_process)):
            logger.warning(('Skipping app=[%s]' % app))
            continue
        logger.warning(('Processing app=[%s]' % app))
        source_app = source_client.organization(source_org).application(app)
        for (collection_name, collection) in source_app.list_collections().iteritems():
            if (collection_name in ['events', 'queues']):
                logger.warning(('Skipping internal collection=[%s]' % collection_name))
                continue
            if ((len(collections_to_process) > 0) and (collection_name not in collections_to_process)):
                logger.warning(('Skipping collection=[%s]' % collection_name))
                continue
            logger.warning(('Processing collection=%s' % collection_name))
            counter = 0
            try:
                for entity in collection.query(ql=config.get('ql'), limit=config.get('source_endpoint', {}).get('limit', 100)):
                    counter += 1
                    queue.put((config.get('org'), app, collection_name, entity))
            except KeyboardInterrupt:
                [w.terminate() for w in workers]
        logger.info('Publishing entities complete!')
    wait_for(workers)
    logger.info('All done!!')
