{
  Preconditions.checkArgument(limit <= EntityIndex.MAX_LIMIT,"limit is greater than max " + EntityIndex.MAX_LIMIT);
  SearchRequestBuilder srb=esProvider.getClient().prepareSearch(alias.getReadAlias()).setTypes(searchTypes.getTypeNames(applicationScope)).setScroll(cursorTimeout + "m").setQuery(createQueryBuilder(searchEdge,query));
  final FilterBuilder fb=createFilterBuilder(query);
  if (fb != null) {
    logger.debug("   Filter: {} ",fb.toString());
    srb=srb.setPostFilter(fb);
  }
  srb=srb.setFrom(0).setSize(limit);
  for (  SortPredicate sp : query.getSortPredicates()) {
    final SortOrder order;
    if (sp.getDirection().equals(SortPredicate.SortDirection.ASCENDING)) {
      order=SortOrder.ASC;
    }
 else {
      order=SortOrder.DESC;
    }
    final String stringFieldName=STRING_PREFIX + sp.getPropertyName();
    final FieldSortBuilder stringSort=SortBuilders.fieldSort(stringFieldName).order(order).ignoreUnmapped(true);
    srb.addSort(stringSort);
    logger.debug("   Sort: {} order by {}",stringFieldName,order.toString());
    final String longFieldName=LONG_PREFIX + sp.getPropertyName();
    final FieldSortBuilder longSort=SortBuilders.fieldSort(longFieldName).order(order).ignoreUnmapped(true);
    srb.addSort(longSort);
    logger.debug("   Sort: {} order by {}",longFieldName,order.toString());
    final String doubleFieldName=DOUBLE_PREFIX + sp.getPropertyName();
    final FieldSortBuilder doubleSort=SortBuilders.fieldSort(doubleFieldName).order(order).ignoreUnmapped(true);
    srb.addSort(doubleSort);
    logger.debug("   Sort: {} order by {}",doubleFieldName,order.toString());
    final String booleanFieldName=BOOLEAN_PREFIX + sp.getPropertyName();
    final FieldSortBuilder booleanSort=SortBuilders.fieldSort(booleanFieldName).order(order).ignoreUnmapped(true);
    srb.addSort(booleanSort);
    logger.debug("   Sort: {} order by {}",booleanFieldName,order.toString());
  }
  return srb;
}
