{
  List<Integer> expected1List=Arrays.asList(10,5,4,3,2,1);
  Observable<Integer> expected1=Observable.from(expected1List).subscribeOn(Schedulers.io());
  List<Integer> expected2List=Arrays.asList(9,8,7,6,5);
  Observable<Integer> expected2=Observable.from(expected2List).subscribeOn(Schedulers.io());
  List<Integer> expected3List=Arrays.asList(9,6,5,3,2,1,0);
  Observable<Integer> expected3=Observable.from(expected3List).subscribeOn(Schedulers.io());
  Observable<Integer> ordered=OrderedMerge.orderedMerge(new ReverseIntegerComparator(),2,expected1,expected2,expected3);
  final CountDownLatch latch=new CountDownLatch(1);
  final List<Integer> results=new ArrayList();
  ordered.subscribe(new Subscriber<Integer>(){
    @Override public void onCompleted(){
      latch.countDown();
    }
    @Override public void onError(    final Throwable e){
      e.printStackTrace();
      fail("An error was thrown ");
    }
    @Override public void onNext(    final Integer integer){
      logger.info("onNext invoked with {}",integer);
      results.add(integer);
    }
  }
);
  latch.await();
  List<Integer> expected=Arrays.asList(10,9,9,8,7,6,6,5,5,5,4,3,3,2,2,1,1,0);
  assertEquals(expected.size(),results.size());
  for (int i=0; i < expected.size(); i++) {
    assertEquals("Same element expected",expected.get(i),results.get(i));
  }
}
