{
  results=results.trim(count);
  if (resultsLevel.ordinal() <= results.getLevel().ordinal()) {
    return results;
  }
  results.setEntities(getEntities(results.getIds(),null,DynamicEntity.class));
  if (resultsLevel == Results.Level.LINKED_PROPERTIES) {
    List<Entity> entities=results.getEntities();
    BiMap<UUID,UUID> associatedIds=null;
    if (associatedMap != null) {
      associatedIds=HashBiMap.create(associatedMap);
    }
 else {
      associatedIds=HashBiMap.create(entities.size());
      for (      Entity entity : entities) {
        Object id=entity.getMetadata(PROPERTY_ASSOCIATED);
        if (id instanceof UUID) {
          associatedIds.put(entity.getUuid(),(UUID)id);
        }
      }
    }
    List<DynamicEntity> linked=getEntities(new ArrayList<UUID>(associatedIds.values()),null,DynamicEntity.class);
    for (    DynamicEntity l : linked) {
      Map<String,Object> p=l.getDynamicProperties();
      if ((p != null) && (p.size() > 0)) {
        Entity e=results.getEntitiesMap().get(associatedIds.inverse().get(l.getUuid()));
        if (l.getType().endsWith(TYPE_MEMBER)) {
          e.setProperty(TYPE_MEMBER,p);
        }
 else         if (l.getType().endsWith(TYPE_CONNECTION)) {
          e.setProperty(TYPE_CONNECTION,p);
        }
      }
    }
  }
  return results;
}
