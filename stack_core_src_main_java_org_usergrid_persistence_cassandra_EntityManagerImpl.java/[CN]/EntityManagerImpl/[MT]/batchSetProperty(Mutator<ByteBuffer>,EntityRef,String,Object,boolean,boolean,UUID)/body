{
  long timestamp=getTimestampInMicros(timestampUuid);
  boolean entitySchemaHasProperty=getDefaultSchema().hasProperty(entity.getType(),propertyName);
  propertyValue=getDefaultSchema().validateEntityPropertyValue(entity.getType(),propertyName,propertyValue);
  if (!force && !noRead) {
    JsonNode jsonSchemaData=this.getSchemaForEntityType(entity.getType());
    if (jsonSchemaData != null) {
      Map<String,Object> properties=this.getProperties(entity);
      if (properties != null) {
        properties.put(propertyName,propertyValue);
        JsonSchema jsonSchema=jsonSchemaFactory.getJsonSchema(jsonSchemaData);
        if (jsonSchema != null) {
          ProcessingReport report=jsonSchema.validate(JsonUtils.toJsonNode(properties));
          if (report.isSuccess()) {
            logger.info("JSON validated");
          }
 else {
            throw new EntityValidationException(entity.getType(),report);
          }
        }
      }
    }
  }
  Schema defaultSchema=Schema.getDefaultSchema();
  if (PROPERTY_TYPE.equalsIgnoreCase(propertyName) && (propertyValue != null)) {
    if ("entity".equalsIgnoreCase(propertyValue.toString()) || "dynamicentity".equalsIgnoreCase(propertyValue.toString())) {
      String errorMsg="Unable to dictionary entity type to " + propertyValue + " because that is not a valid type.";
      logger.error(errorMsg);
      throw new IllegalArgumentException(errorMsg);
    }
  }
  if (entitySchemaHasProperty) {
    if (!force) {
      if (!defaultSchema.isPropertyMutable(entity.getType(),propertyName)) {
        return batch;
      }
      if ((propertyValue == null) && defaultSchema.isRequiredProperty(entity.getType(),propertyName)) {
        return batch;
      }
    }
    if (!isPropertyValueUniqueForEntity(entity.getUuid(),entity.getType(),propertyName,propertyValue)) {
      throw new DuplicateUniquePropertyExistsException(entity.getType(),propertyName,propertyValue);
    }
    if (propertyName.equals(defaultSchema.aliasProperty(entity.getType()))) {
      Lock lock=getUniqueUpdateLock(cass.getLockManager(),applicationId,propertyValue,entity.getType(),propertyName);
      try {
        lock.lock();
        deleteAliasesForEntity(batch,entity.getUuid(),timestamp - 1);
        createAlias(batch,applicationId,entity,entity.getType(),string(propertyValue),timestamp);
      }
  finally {
        lock.unlock();
      }
    }
    if (defaultSchema.getEntityInfo(entity.getType()).isPropertyUnique(propertyName)) {
      Lock lock=getUniqueUpdateLock(cass.getLockManager(),applicationId,propertyValue,entity.getType(),propertyName);
      try {
        lock.lock();
        String collectionName=Schema.defaultCollectionName(entity.getType());
        uniquePropertyDelete(batch,collectionName,entity.getType(),propertyName,propertyValue,entity.getUuid(),timestamp - 1);
        uniquePropertyWrite(batch,collectionName,propertyName,propertyValue,entity.getUuid(),timestamp);
      }
  finally {
        lock.unlock();
      }
    }
  }
  if (getDefaultSchema().isPropertyIndexed(entity.getType(),propertyName)) {
    getRelationManager(entity).batchUpdatePropertyIndexes(batch,propertyName,propertyValue,entitySchemaHasProperty,noRead,timestampUuid);
  }
  if (propertyValue != null) {
    addPropertyToMutator(batch,key(entity.getUuid()),entity.getType(),propertyName,propertyValue,timestamp);
    if (!entitySchemaHasProperty) {
      addInsertToMutator(batch,ENTITY_DICTIONARIES,key(entity.getUuid(),DICTIONARY_PROPERTIES),propertyName,null,timestamp);
    }
  }
 else {
    addDeleteToMutator(batch,ENTITY_PROPERTIES,key(entity.getUuid()),propertyName,timestamp);
  }
  return batch;
}
