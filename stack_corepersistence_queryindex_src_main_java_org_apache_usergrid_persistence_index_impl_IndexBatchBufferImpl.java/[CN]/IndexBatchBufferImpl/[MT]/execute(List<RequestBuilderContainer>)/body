{
  if (containers == null || containers.size() == 0) {
    return;
  }
  final AtomicBoolean isForceRefresh=new AtomicBoolean(config.isForcedRefresh());
  Observable.from(containers).subscribeOn(Schedulers.io()).flatMap(new Func1<RequestBuilderContainer,Observable<ShardReplicationOperationRequestBuilder>>(){
    @Override public Observable<ShardReplicationOperationRequestBuilder> call(    RequestBuilderContainer requestBuilderContainer){
      if (requestBuilderContainer.isForceRefresh()) {
        isForceRefresh.set(true);
      }
      return Observable.from(requestBuilderContainer.getBuilder()).map(new Func1<ShardReplicationOperationRequestBuilder,ShardReplicationOperationRequestBuilder>(){
        @Override public ShardReplicationOperationRequestBuilder call(        ShardReplicationOperationRequestBuilder builder){
          return builder;
        }
      }
);
    }
  }
).buffer(config.getIndexBatchSize()).doOnNext(new Action1<List<ShardReplicationOperationRequestBuilder>>(){
    @Override public void call(    List<ShardReplicationOperationRequestBuilder> builders){
      final BulkRequestBuilder bulkRequest=initRequest(isForceRefresh.get());
      for (      ShardReplicationOperationRequestBuilder builder : builders) {
        if (builder instanceof IndexRequestBuilder) {
          bulkRequest.add((IndexRequestBuilder)builder);
        }
        if (builder instanceof DeleteRequestBuilder) {
          bulkRequest.add((DeleteRequestBuilder)builder);
        }
      }
      sendRequest(bulkRequest);
    }
  }
).toBlocking().lastOrDefault(null);
  for (  RequestBuilderContainer container : containers) {
    container.done();
  }
}
