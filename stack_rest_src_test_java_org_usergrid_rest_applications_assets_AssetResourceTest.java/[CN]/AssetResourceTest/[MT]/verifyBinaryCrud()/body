{
  UserRepo.INSTANCE.load(resource(),access_token);
  UUID userId=UserRepo.INSTANCE.getByUserName("user1");
  Map<String,String> payload=hashMap("path","my/clean/path").map("name","assetname").map("owner",userId.toString()).map("someprop","somevalue");
  JsonNode node=resource().path("/test-organization/test-app/assets").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  JsonNode idNode=node.get("entities").get(0).get("uuid");
  UUID id=UUID.fromString(idNode.getTextValue());
  assertNotNull(idNode.getTextValue());
  logNode(node);
  byte[] data=IOUtils.toByteArray(this.getClass().getResourceAsStream("/cassandra_eye.jpg"));
  resource().path("/test-organization/test-app/assets/" + id.toString() + "/data").queryParam("access_token",access_token).type(MediaType.APPLICATION_OCTET_STREAM_TYPE).put(data);
  InputStream is=resource().path("/test-organization/test-app/assets/" + id.toString() + "/data").queryParam("access_token",access_token).get(InputStream.class);
  byte[] foundData=IOUtils.toByteArray(is);
  assertEquals(7979,foundData.length);
  node=resource().path("/test-organization/test-app/assets/my/clean/path").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  idNode=node.get("entities").get(0).get("uuid");
  assertEquals(id.toString(),idNode.getTextValue());
}
