{
  final GraphManager em=emf.createGraphManager(scope);
  Id sourceId1=new SimpleId("source");
  Id targetId1=new SimpleId("target");
  Id targetId2=new SimpleId("target2");
  Edge testTargetEdge=createEdge(sourceId1,"test",targetId1,UUIDGenerator.newTimeUUID());
  em.writeEdge(testTargetEdge).toBlockingObservable().singleOrDefault(null);
  Edge testTargetEdge2=createEdge(sourceId1,"test",targetId2,UUIDGenerator.newTimeUUID());
  em.writeEdge(testTargetEdge2).toBlockingObservable().singleOrDefault(null);
  Edge test2TargetEdge=createEdge(sourceId1,"test2",targetId2,UUIDGenerator.newTimeUUID());
  em.writeEdge(test2TargetEdge).toBlockingObservable().singleOrDefault(null);
  SearchEdgeType edgeTypes=new SimpleSearchEdgeType(testTargetEdge.getSourceNode(),null);
  Observable<String> edges=em.getEdgeTypesFromSource(edgeTypes);
  Iterator<String> results=edges.toBlockingObservable().getIterator();
  assertEquals("Edges correct","test",results.next());
  assertEquals("Edges correct","test2",results.next());
  assertFalse("No more edges",results.hasNext());
  edgeTypes=new SimpleSearchEdgeType(testTargetEdge.getSourceNode(),"test");
  edges=em.getEdgeTypesFromSource(edgeTypes);
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Edges correct","test2",results.next());
  assertFalse("No more edges",results.hasNext());
  edges=em.getIdTypesFromSource(new SimpleSearchIdType(testTargetEdge.getSourceNode(),"test",null));
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Types correct",targetId1.getType(),results.next());
  assertEquals("Types correct",targetId2.getType(),results.next());
  assertFalse("No more edges",results.hasNext());
  edges=em.getIdTypesFromSource(new SimpleSearchIdType(testTargetEdge.getSourceNode(),"test",targetId1.getType()));
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Types correct",targetId2.getType(),results.next());
  assertFalse("No more results",results.hasNext());
}
