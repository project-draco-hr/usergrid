{
  final GraphManager em=emf.createGraphManager(scope);
  final MarkedEdge edge=createEdge("source","edge","target");
  SearchByEdgeType search=createSearchByEdge(edge.getSourceNode(),edge.getType(),edge.getVersion(),null);
  final MockingIterator<MarkedEdge> itr=new MockingIterator<>(Collections.singletonList(edge));
  when(serialization.getEdgesFromSource(scope,search)).thenReturn(itr);
  Observable<Edge> edges=em.loadEdgesFromSource(search);
  final AtomicInteger onNextCounter=new AtomicInteger();
  final CountDownLatch errorLatch=new CountDownLatch(1);
  final Throwable[] thrown=new Throwable[1];
  edges.subscribe(new Subscriber<Edge>(){
    @Override public void onCompleted(){
    }
    @Override public void onError(    final Throwable e){
      thrown[0]=e;
      errorLatch.countDown();
    }
    @Override public void onNext(    final Edge edge){
{
        onNextCounter.incrementAndGet();
      }
    }
  }
);
  errorLatch.await();
  assertEquals("One lement was produced",1,onNextCounter.intValue());
  assertTrue(thrown[0] instanceof HystrixRuntimeException);
}
