{
  final Id sourceId=createId("source");
  final Id targetId=createId("target");
  final String edgeType="edge";
  final MarkedEdge edge1=createMarkedEdge(sourceId,edgeType,targetId);
  commitLogEdgeSerialization.writeEdge(scope,edge1,UUIDGenerator.newTimeUUID()).execute();
  final MarkedEdge edge1NotDeleted=createEdge(edge1.getSourceNode(),edgeType,edge1.getTargetNode(),edge1.getTimestamp(),false);
  storageEdgeSerialization.writeEdge(scope,edge1NotDeleted,UUIDGenerator.newTimeUUID()).execute();
  final MarkedEdge edge2=createEdge(sourceId,edgeType,targetId);
  commitLogEdgeSerialization.writeEdge(scope,edge2,UUIDGenerator.newTimeUUID()).execute();
  storageEdgeSerialization.writeEdge(scope,edge2,UUIDGenerator.newTimeUUID()).execute();
  Iterator<MarkedEdge> itr=commitLogEdgeSerialization.getEdgeVersions(scope,new SimpleSearchByEdge(sourceId,edgeType,targetId,System.currentTimeMillis(),null));
  assertEquals(edge2,itr.next());
  assertEquals(edge1,itr.next());
  assertFalse(itr.hasNext());
  itr=storageEdgeSerialization.getEdgeVersions(scope,new SimpleSearchByEdge(sourceId,edgeType,targetId,System.currentTimeMillis(),null));
  assertEquals(edge2,itr.next());
  assertEquals(edge1NotDeleted,itr.next());
  assertFalse(itr.hasNext());
  MarkedEdge deleted=edgeDeleteRepair.repair(scope,edge1,UUIDGenerator.newTimeUUID()).toBlocking().single();
  assertEquals(edge1,deleted);
  itr=commitLogEdgeSerialization.getEdgeVersions(scope,new SimpleSearchByEdge(sourceId,edgeType,targetId,System.currentTimeMillis(),null));
  assertEquals(edge2,itr.next());
  assertFalse(itr.hasNext());
  itr=storageEdgeSerialization.getEdgeVersions(scope,new SimpleSearchByEdge(sourceId,edgeType,targetId,System.currentTimeMillis(),null));
  assertEquals(edge2,itr.next());
  assertFalse(itr.hasNext());
}
