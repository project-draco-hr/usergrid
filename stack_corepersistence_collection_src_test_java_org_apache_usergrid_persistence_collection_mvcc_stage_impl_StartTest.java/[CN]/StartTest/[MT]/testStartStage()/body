{
  final WriteContext writeContext=mock(WriteContext.class);
  final CollectionContext context=mock(CollectionContext.class);
  when(writeContext.getCollectionContext()).thenReturn(context);
  final Entity entity=generateEntity();
  when(writeContext.getMessage(Entity.class)).thenReturn(entity);
  final MvccLogEntrySerializationStrategy logStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final ArgumentCaptor<MvccLogEntry> logEntry=ArgumentCaptor.forClass(MvccLogEntry.class);
  final MutationBatch mutation=mock(MutationBatch.class);
  when(logStrategy.write(same(context),logEntry.capture())).thenReturn(mutation);
  Start newStage=new Start(logStrategy);
  newStage.performStage(writeContext);
  ArgumentCaptor<MvccEntity> mvccEntity=ArgumentCaptor.forClass(MvccEntity.class);
  MvccLogEntry entry=logEntry.getValue();
  assertEquals("entity id did not match ",entity.getUuid(),entry.getEntityId());
  assertEquals("version did not not match entityId",entity.getVersion(),entry.getVersion());
  assertEquals("Stage is correct",Stage.ACTIVE,entry.getStage());
  verify(writeContext).setMessage(mvccEntity.capture());
  MvccEntity created=mvccEntity.getValue();
  assertEquals("entity id did not match generator",entity.getUuid(),created.getUuid());
  assertEquals("version did not not match entityId",entity.getVersion(),created.getVersion());
  assertSame("Entity correct",entity,created.getEntity().get());
  verify(writeContext).proceed();
}
