{
  this.cassandraService=cassandraService;
  this.counterUtils=counterUtils;
  this.injector=injector;
  this.reIndexService=injector.getInstance(ReIndexService.class);
  this.entityManagerFig=injector.getInstance(EntityManagerFig.class);
  this.managerCache=injector.getInstance(ManagerCache.class);
  this.metricsFactory=injector.getInstance(MetricsFactory.class);
  this.indexService=injector.getInstance(AsyncEventService.class);
  this.graphManagerFactory=injector.getInstance(GraphManagerFactory.class);
  this.collectionService=injector.getInstance(CollectionService.class);
  this.connectionService=injector.getInstance(ConnectionService.class);
  this.collectionSettingsCacheFactory=injector.getInstance(CollectionSettingsCacheFactory.class);
  Properties properties=cassandraService.getProperties();
  this.entityManagers=createEntityManagerCache(properties);
  AkkaFig akkaFig=injector.getInstance(AkkaFig.class);
  logger.info("EntityManagerFactoring starting...");
  if (akkaFig.getAkkaEnabled()) {
    try {
      logger.info("Akka cluster starting...");
      this.uniqueValuesService=injector.getInstance(UniqueValuesService.class);
      this.uniqueValuesService.start();
    }
 catch (    Throwable t) {
      logger.error("Error starting Akka",t);
      throw t;
    }
  }
  this.lockManager=injector.getInstance(LockManager.class);
  this.applicationIdCache=injector.getInstance(ApplicationIdCacheFactory.class).getInstance(getManagementEntityManager());
  checkManagementApp(properties);
}
