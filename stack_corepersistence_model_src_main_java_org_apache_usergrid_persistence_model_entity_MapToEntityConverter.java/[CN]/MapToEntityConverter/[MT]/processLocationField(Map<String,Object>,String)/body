{
  Map<String,Object> origMap=value;
  Map<String,Object> m=new HashMap<String,Object>();
  for (  String key : origMap.keySet()) {
    m.put(key.toLowerCase(),origMap.get(key));
  }
  if (m.size() >= 2 && ((m.containsKey(lat) && m.containsKey(lon)) || (m.containsKey("lat") && m.containsKey("lon")))) {
    Double latVal, lonVal;
    if (m.containsKey(lat) && m.containsKey(lon)) {
      try {
        latVal=Double.parseDouble(m.get(lat).toString());
        lonVal=Double.parseDouble(m.get(lon).toString());
      }
 catch (      NumberFormatException ignored) {
        throw new IllegalArgumentException("Latitude and longitude must be doubles (e.g. 32.1234).");
      }
    }
 else     if (m.containsKey("lat") && m.containsKey("lon")) {
      logger.warn("Entity contains latitude and longitude in old format location{lat,long}");
      try {
        latVal=Double.parseDouble(m.get("lat").toString());
        lonVal=Double.parseDouble(m.get("lon").toString());
      }
 catch (      NumberFormatException ignored) {
        throw new IllegalArgumentException("" + "Latitude and longitude must be doubles (e.g. 32.1234).");
      }
    }
 else {
      throw new IllegalArgumentException("Location properties require two fields - " + "latitude and longitude, or lat and lon");
    }
    return new LocationField(fieldName,new Location(latVal,lonVal));
  }
 else {
    logger.warn("entity cannot process location values that don't have valid location{latitude,longitude} values, changing to generic object");
    return new EntityObjectField(fieldName,fromMap(value,false));
  }
}
