{
  Field processedField;
  if (value instanceof String) {
    String stringValue=(String)value;
    processedField=new StringField(fieldName,stringValue,unique);
  }
 else   if (value instanceof Boolean) {
    processedField=new BooleanField(fieldName,(Boolean)value,unique);
  }
 else   if (value instanceof Integer) {
    processedField=new IntegerField(fieldName,(Integer)value,unique);
  }
 else   if (value instanceof Double) {
    processedField=new DoubleField(fieldName,(Double)value,unique);
  }
 else   if (value instanceof Float) {
    processedField=new FloatField(fieldName,(Float)value,unique);
  }
 else   if (value instanceof Long) {
    processedField=new LongField(fieldName,(Long)value,unique);
  }
 else   if (value instanceof List) {
    processedField=processListValue(fieldName,(List)value);
  }
 else   if (value instanceof UUID) {
    processedField=new UUIDField(fieldName,(UUID)value,unique);
  }
 else   if (value instanceof Map) {
    processedField=processMapValue(value,fieldName);
  }
 else   if (value instanceof Enum) {
    processedField=new StringField(fieldName,value.toString(),unique);
  }
 else   if (value == null) {
    processedField=new NullField(fieldName,unique);
  }
 else {
    byte[] valueSerialized;
    try {
      valueSerialized=objectMapper.writeValueAsBytes(value);
    }
 catch (    JsonProcessingException e) {
      throw new RuntimeException("Can't serialize object ",e);
    }
    ByteBuffer byteBuffer=ByteBuffer.wrap(valueSerialized);
    ByteArrayField bf=new ByteArrayField(fieldName,byteBuffer.array(),value.getClass());
    processedField=bf;
  }
  return processedField;
}
