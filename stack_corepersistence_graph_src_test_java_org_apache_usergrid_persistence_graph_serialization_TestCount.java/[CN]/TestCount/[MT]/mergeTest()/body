{
  final int sizePerObservable=2000;
  Observable<Integer> input1=getObservables(sizePerObservable);
  Observable<Integer> input2=getObservables(sizePerObservable);
  int returned=Observable.merge(input1,input2).buffer(1000).flatMap(new Func1<List<Integer>,Observable<Integer>>(){
    @Override public Observable<Integer> call(    final List<Integer> integers){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      return Observable.from(integers);
    }
  }
).count().defaultIfEmpty(0).toBlockingObservable().last();
  assertEquals("Count was correct",sizePerObservable * 2,returned);
}
