{
  ApplicationScope scope=new ApplicationScopeImpl(new SimpleId("organization"));
  IntegerField field=new IntegerField("count",5);
  Id entityId1=new SimpleId(UUIDGenerator.newTimeUUID(),"entity");
  Id entityId2=new SimpleId(UUIDGenerator.newTimeUUID(),"entity");
  Id entityId3=new SimpleId(UUIDGenerator.newTimeUUID(),"entity");
  UUID version1=UUIDGenerator.newTimeUUID();
  UUID version2=UUIDGenerator.newTimeUUID();
  UUID version3=UUIDGenerator.newTimeUUID();
  UUID version4=UUIDGenerator.newTimeUUID();
  UUID version5=UUIDGenerator.newTimeUUID();
  UniqueValue stored1=new UniqueValueImpl(field,entityId1,version5);
  UniqueValue stored2=new UniqueValueImpl(field,entityId2,version4);
  UniqueValue stored3=new UniqueValueImpl(field,entityId1,version3);
  UniqueValue stored4=new UniqueValueImpl(field,entityId3,version2);
  UniqueValue stored5=new UniqueValueImpl(field,entityId3,version1);
  session.execute(strategy.writeCQL(scope,stored1,-1));
  session.execute(strategy.writeCQL(scope,stored2,-1));
  session.execute(strategy.writeCQL(scope,stored3,-1));
  session.execute(strategy.writeCQL(scope,stored4,-1));
  session.execute(strategy.writeCQL(scope,stored5,-1));
  UniqueValueSet fields=strategy.load(scope,ConsistencyLevel.LOCAL_QUORUM,entityId1.getType(),Collections.<Field>singleton(field),true);
  UniqueValue retrieved=fields.getValue(field.getName());
  assertEquals(stored1,retrieved);
}
