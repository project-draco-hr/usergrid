{
  startSpring();
  setVerbose(line);
  accessId=(String)properties.get(WarehouseExport.ACCESS_ID_PROPNAME);
  secretKey=(String)properties.get(WarehouseExport.SECRET_KEY_PROPNAME);
  bucketName=(String)properties.get(WarehouseExport.BUCKET_PROPNAME);
  dbusername=(String)properties.get(DBUSER_PROPNAME);
  dbpassword=(String)properties.get(DBPASSWORD_PROPNAME);
  dbhost=(String)properties.get(DBHOST_PROPNAME);
  dbname=(String)properties.get(DBNAME_PROPNAME);
  dbport=(String)properties.get(DBPORT_PROPNAME);
  tableSchema=IOUtils.toString(getClass().getResourceAsStream("/warehouse-schema.sql"));
  String constr=String.format("jdbc:postgresql://%s:%s/%s?user=%s&password=%s",dbhost,dbport,dbname,dbusername,dbpassword);
  Class.forName("org.postgresql.Driver");
  Connection con=DriverManager.getConnection(constr);
  String mainTableName=(String)properties.get(MAIN_TABLE_PROPNAME);
  try {
    con.createStatement().execute(createWarehouseTable(mainTableName));
    logger.info("Created main table " + mainTableName);
  }
 catch (  SQLException ex) {
    if (!ex.getMessage().contains("already exists")) {
      logger.error("Error creating main table: " + ex.getMessage(),ex);
    }
 else {
      logger.info("Using existing main table " + mainTableName);
    }
  }
  String stagingTableName=(String)properties.get(STAGING_TABLE_PROPNAME);
  String dropStagingTable=String.format("drop table %s",stagingTableName);
  try {
    con.createStatement().execute(dropStagingTable);
    logger.info("Dropped existing staging table " + stagingTableName);
  }
 catch (  SQLException ex) {
    if (!ex.getMessage().contains("does not exist")) {
      logger.error("Error dropping staging table: " + ex.getMessage(),ex);
    }
 else {
      logger.info("Using existing staging table " + stagingTableName);
    }
  }
  logger.info("Creating new staging table");
  con.createStatement().execute(createWarehouseTable(stagingTableName));
  logger.info("Copying data from S3");
  String copyFromS3=String.format("COPY %s FROM 's3://%s' " + "CREDENTIALS 'aws_access_key_id=%s;aws_secret_access_key=%s' IGNOREHEADER 2 EMPTYASNULL",stagingTableName,bucketName,accessId,secretKey);
  logger.debug(copyFromS3);
  con.createStatement().execute(copyFromS3);
  logger.info("Upsert: updating");
  String upsertUpdate=String.format("UPDATE %s SET id = s.id FROM %s s WHERE %s.created = s.created ",mainTableName,stagingTableName,mainTableName);
  logger.debug(upsertUpdate);
  con.createStatement().execute(upsertUpdate);
  logger.info("Upsert: inserting");
  String upsertInsert=String.format("INSERT INTO %s SELECT s.* FROM %s s LEFT JOIN %s n ON s.id = n.id WHERE n.id IS NULL",mainTableName,stagingTableName,mainTableName);
  logger.debug(upsertInsert);
  con.createStatement().execute(upsertInsert);
  logger.info("Dropping existing staging table");
  con.createStatement().execute(dropStagingTable);
}
