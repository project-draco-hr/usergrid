{
  logger.info("Started rebuildIndex()");
  String rand=RandomStringUtils.randomAlphanumeric(5);
  final UUID appId=setup.createApplication("org_" + rand,"app_" + rand);
  final EntityManager em=setup.getEmf().getEntityManager(appId);
  Map<String,Object> entityMap=new HashMap<String,Object>(){
{
      put("key1",1000);
      put("key2",2000);
      put("key3","Some value");
    }
  }
;
  Map<String,Object> cat1map=new HashMap<String,Object>(){
{
      put("name","enzo");
      put("color","orange");
    }
  }
;
  Map<String,Object> cat2map=new HashMap<String,Object>(){
{
      put("name","marquee");
      put("color","grey");
    }
  }
;
  Map<String,Object> cat3map=new HashMap<String,Object>(){
{
      put("name","bertha");
      put("color","tabby");
    }
  }
;
  Entity cat1=em.create("cat",cat1map);
  Entity cat2=em.create("cat",cat2map);
  Entity cat3=em.create("cat",cat3map);
  final long stopTime=System.currentTimeMillis() + RUNTIME_MS;
  List<EntityRef> entityRefs=new ArrayList<EntityRef>();
  int entityCount=0;
  while (System.currentTimeMillis() < stopTime) {
    final Entity entity;
    try {
      entityMap.put("key",entityCount);
      entity=em.create("testType",entityMap);
      app.refreshIndex();
      em.createConnection(entity,"herds",cat1);
      em.createConnection(entity,"herds",cat2);
      em.createConnection(entity,"herds",cat3);
    }
 catch (    Exception ex) {
      throw new RuntimeException("Error creating entity",ex);
    }
    entityRefs.add(new SimpleEntityRef(entity.getType(),entity.getUuid()));
    if (entityCount % 10 == 0) {
      logger.info("Created {} entities",entityCount);
    }
    entityCount++;
    try {
      Thread.sleep(WRITE_DELAY_MS);
    }
 catch (    InterruptedException ignored) {
    }
  }
  logger.info("Created {} entities",entityCount);
  app.refreshIndex();
  logger.debug("Read the data");
  readData(em,"testTypes",entityCount,3);
  logger.debug("Deleting app index and system app index");
  logger.debug("Preparing to rebuild all indexes");
  ;
  final String meterName=this.getClass().getSimpleName() + ".rebuildIndex";
  final Meter meter=registry.meter(meterName);
  EntityManagerFactory.ProgressObserver po=new EntityManagerFactory.ProgressObserver(){
    int counter=0;
    @Override public void onProgress(    final EntityRef entity){
      meter.mark();
      logger.debug("Indexing {}:{}",entity.getType(),entity.getUuid());
      if (counter % 100 == 0) {
        logger.info("Reindexed {} entities",counter);
      }
      counter++;
    }
  }
;
  try {
    setup.getEmf().rebuildInternalIndexes(po);
    setup.getEmf().rebuildApplicationIndexes(em.getApplicationId(),po);
    reporter.report();
    registry.remove(meterName);
    logger.info("Rebuilt index");
    app.refreshIndex();
  }
 catch (  Exception ex) {
    logger.error("Error rebuilding index",ex);
    fail();
  }
  readData(em,"testTypes",entityCount,3);
}
