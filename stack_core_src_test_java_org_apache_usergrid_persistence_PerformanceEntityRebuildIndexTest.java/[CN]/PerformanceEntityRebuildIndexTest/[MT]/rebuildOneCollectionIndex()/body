{
  logger.info("Started rebuildIndex()");
  String rand=RandomStringUtils.randomAlphanumeric(5);
  final UUID appId=setup.createApplication("org_" + rand,"app_" + rand);
  final EntityManager em=setup.getEmf().getEntityManager(appId);
  final ReIndexService reIndexService=setup.getInjector().getInstance(ReIndexService.class);
  Map<String,Object> entityMap=new HashMap<String,Object>(){
{
      put("key1",1000);
      put("key2",2000);
      put("key3","Some value");
    }
  }
;
  List<EntityRef> entityRefs=new ArrayList<EntityRef>();
  int herderCount=0;
  int shepardCount=0;
  for (int i=0; i < ENTITIES_TO_INDEX; i++) {
    final Entity entity;
    try {
      entityMap.put("key",i);
      if (i % 2 == 0) {
        entity=em.create("catherder",entityMap);
        herderCount++;
      }
 else {
        entity=em.create("catshepard",entityMap);
        shepardCount++;
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException("Error creating entity",ex);
    }
    entityRefs.add(new SimpleEntityRef(entity.getType(),entity.getUuid()));
    if (i % 10 == 0) {
      logger.info("Created {} entities",i);
    }
  }
  logger.info("Created {} entities",ENTITIES_TO_INDEX);
  app.refreshIndex();
  logger.debug("Read the data");
  readData(em,"catherders",herderCount,0);
  readData(em,"catshepards",shepardCount,0);
  logger.debug("Deleting apps");
  deleteIndex(em.getApplicationId());
  logger.debug("Reading data, should fail this time ");
  readData(em,"testTypes",0,0);
  logger.debug("Preparing to rebuild all indexes");
  final IndexServiceRequestBuilder builder=reIndexService.getBuilder().withApplicationId(em.getApplicationId()).withCollection("catherders");
  ReIndexService.ReIndexStatus status=reIndexService.rebuildIndex(builder);
  assertNotNull(status.getJobId(),"JobId is present");
  logger.info("Rebuilt index");
  waitForRebuild(status,reIndexService);
  readData(em,"catherders",herderCount,0);
  readData(em,"catshepards",0,0);
}
