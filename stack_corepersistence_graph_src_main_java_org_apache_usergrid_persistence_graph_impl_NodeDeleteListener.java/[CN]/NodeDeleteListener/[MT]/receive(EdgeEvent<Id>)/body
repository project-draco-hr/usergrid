{
  final Id node=edgeEvent.getData();
  final OrganizationScope scope=edgeEvent.getOrganizationScope();
  final UUID version=edgeEvent.getVersion();
  return Observable.from(node).subscribeOn(scheduler).map(new Func1<Id,Optional<UUID>>(){
    @Override public Optional<UUID> call(    final Id id){
      return nodeSerialization.getMaxVersion(scope,node);
    }
  }
).takeWhile(new Func1<Optional<UUID>,Boolean>(){
    @Override public Boolean call(    final Optional<UUID> uuidOptional){
      LOG.debug("Node with id {} has max version of {}",node,uuidOptional.orNull());
      return uuidOptional.isPresent();
    }
  }
).flatMap(new Func1<Optional<UUID>,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final Optional<UUID> uuidOptional){
      Observable<MarkedEdge> targetEdges=getEdgesTypesToTarget(scope,new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<MarkedEdge>>(){
        @Override public Observable<MarkedEdge> call(        final String edgeType){
          return loadEdgesToTarget(scope,new SimpleSearchByEdgeType(node,edgeType,version,null));
        }
      }
).distinctUntilChanged(new Func1<Edge,Id>(){
        @Override public Id call(        final Edge edge){
          return edge.getSourceNode();
        }
      }
);
      Observable<MarkedEdge> sourceEdges=getEdgesTypesFromSource(scope,new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<MarkedEdge>>(){
        @Override public Observable<MarkedEdge> call(        final String edgeType){
          return loadEdgesFromSource(scope,new SimpleSearchByEdgeType(node,edgeType,version,null));
        }
      }
).distinctUntilChanged(new Func1<Edge,Id>(){
        @Override public Id call(        final Edge edge){
          return edge.getTargetNode();
        }
      }
);
      return Observable.concat(targetEdges,sourceEdges);
    }
  }
).flatMap(new Func1<MarkedEdge,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final MarkedEdge edge){
      LOG.debug("Deleting edge {}",edge);
      return edgeDeleteRepair.repair(scope,edge);
    }
  }
).flatMap(new Func1<MarkedEdge,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final MarkedEdge edge){
      Observable<Integer> sourceMetaRepaired=edgeMetaRepair.repairSources(scope,edge.getSourceNode(),edge.getType(),version);
      Observable<Integer> targetMetaRepaired=edgeMetaRepair.repairTargets(scope,edge.getTargetNode(),edge.getType(),version);
      return Observable.concat(sourceMetaRepaired,targetMetaRepaired).last().map(new Func1<Integer,MarkedEdge>(){
        @Override public MarkedEdge call(        final Integer integer){
          LOG.debug("Retained {} subtypes for edge {}",integer,edge);
          return edge;
        }
      }
);
    }
  }
).count().defaultIfEmpty(0).doOnCompleted(new Action0(){
    @Override public void call(){
      try {
        nodeSerialization.delete(scope,node,version).execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete marked graph node " + node,e);
      }
    }
  }
);
}
