{
  final Id node=edgeEvent.getData();
  final OrganizationScope scope=edgeEvent.getOrganizationScope();
  return Observable.from(node).map(new Func1<Id,Optional<UUID>>(){
    @Override public Optional<UUID> call(    final Id id){
      return nodeSerialization.getMaxVersion(scope,node);
    }
  }
).flatMap(new Func1<Optional<UUID>,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final Optional<UUID> uuidOptional){
      return getEdgesTypesToTarget(scope,new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<MarkedEdge>>(){
        @Override public Observable<MarkedEdge> call(        final String edgeType){
          return loadEdgesToTarget(scope,new SimpleSearchByEdgeType(node,edgeType,uuidOptional.get(),null)).doOnEach(new Action1<MarkedEdge>(){
            @Override public void call(            final MarkedEdge markedEdge){
              edgeSerialization.deleteEdge(scope,markedEdge);
            }
          }
);
        }
      }
);
    }
  }
).map(new Func1<MarkedEdge,EdgeEvent<Id>>(){
    @Override public EdgeEvent<Id> call(    final MarkedEdge edge){
      return edgeEvent;
    }
  }
);
}
