{
  final Id node=edgeEvent.getData();
  final OrganizationScope scope=edgeEvent.getOrganizationScope();
  final UUID version=edgeEvent.getVersion();
  return Observable.from(node).subscribeOn(Schedulers.io()).map(new Func1<Id,Optional<UUID>>(){
    @Override public Optional<UUID> call(    final Id id){
      return nodeSerialization.getMaxVersion(scope,node);
    }
  }
).takeWhile(new Func1<Optional<UUID>,Boolean>(){
    @Override public Boolean call(    final Optional<UUID> uuidOptional){
      LOG.debug("Node with id {} has max version of {}",node,uuidOptional.orNull());
      return uuidOptional.isPresent();
    }
  }
).flatMap(new Func1<Optional<UUID>,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final Optional<UUID> uuidOptional){
      Observable<MarkedEdge> targetEdges=getEdgesTypesToTarget(scope,new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<MarkedEdge>>(){
        @Override public Observable<MarkedEdge> call(        final String edgeType){
          return loadEdgesToTarget(scope,new SimpleSearchByEdgeType(node,edgeType,version,null));
        }
      }
);
      Observable<MarkedEdge> sourceEdges=getEdgesTypesFromSource(scope,new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<MarkedEdge>>(){
        @Override public Observable<MarkedEdge> call(        final String edgeType){
          return loadEdgesFromSource(scope,new SimpleSearchByEdgeType(node,edgeType,version,null));
        }
      }
);
      return Observable.merge(targetEdges,sourceEdges);
    }
  }
).buffer(graphFig.getScanPageSize()).flatMap(new Func1<List<MarkedEdge>,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final List<MarkedEdge> markedEdges){
      LOG.debug("Batching {} edges for deletion",markedEdges.size());
      final MutationBatch batch=keyspace.prepareMutationBatch();
      for (      MarkedEdge edge : markedEdges) {
        LOG.debug("Deleting edge {}",edge);
        final MutationBatch delete=edgeSerialization.deleteEdge(scope,edge);
        batch.mergeShallow(delete);
      }
      try {
        batch.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete edges",e);
      }
      return Observable.from(markedEdges);
    }
  }
).count().defaultIfEmpty(0).doOnCompleted(new Action0(){
    @Override public void call(){
      try {
        nodeSerialization.delete(scope,node,version).execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete marked graph node " + node,e);
      }
    }
  }
);
}
