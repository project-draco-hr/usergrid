{
  timestamp*=kClockMultiplierL;
  timestamp+=kClockOffset;
  timestamp+=timeOffset;
  uuidBytes[BYTE_OFFSET_CLOCK_SEQUENCE]=(byte)(clockSeq >> 8);
  uuidBytes[BYTE_OFFSET_CLOCK_SEQUENCE + 1]=(byte)clockSeq;
  uuidBytes[BYTE_OFFSET_CLOCK_SEQUENCE]&=0x3F;
  uuidBytes[BYTE_OFFSET_CLOCK_SEQUENCE]|=0x80;
  int clockHi=(int)(timestamp >>> 32);
  int clockLo=(int)timestamp;
  uuidBytes[BYTE_OFFSET_CLOCK_HI]=(byte)(clockHi >>> 24);
  uuidBytes[BYTE_OFFSET_CLOCK_HI + 1]=(byte)(clockHi >>> 16);
  uuidBytes[BYTE_OFFSET_CLOCK_MID]=(byte)(clockHi >>> 8);
  uuidBytes[BYTE_OFFSET_CLOCK_MID + 1]=(byte)clockHi;
  uuidBytes[BYTE_OFFSET_CLOCK_LO]=(byte)(clockLo >>> 24);
  uuidBytes[BYTE_OFFSET_CLOCK_LO + 1]=(byte)(clockLo >>> 16);
  uuidBytes[BYTE_OFFSET_CLOCK_LO + 2]=(byte)(clockLo >>> 8);
  uuidBytes[BYTE_OFFSET_CLOCK_LO + 3]=(byte)clockLo;
  uuidBytes[BYTE_OFFSET_CLOCK_HI]&=0x0F;
  uuidBytes[BYTE_OFFSET_CLOCK_HI]|=0x10;
}
