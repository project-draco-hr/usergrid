{
  File f=null;
  try {
    f=new File("test.json");
    f.delete();
  }
 catch (  Exception e) {
  }
  S3Export s3Export=new MockS3ExportImpl();
  ExportService exportService=setup.getExportService();
  HashMap<String,Object> payload=new HashMap<String,Object>();
  Map<String,Object> properties=new HashMap<String,Object>();
  Map<String,Object> storage_info=new HashMap<String,Object>();
  storage_info.put("admin_token","insert_token_data_here");
  storage_info.put("s3_key","insert key here");
  storage_info.put("s3_accessId","insert access id here");
  storage_info.put("bucket_location","insert bucket name here");
  properties.put("storage_provider","s3");
  properties.put("storage_info",storage_info);
  payload.put("path","test-organization/test-app/user");
  payload.put("properties",properties);
  ExportInfo exportInfo=new ExportInfo(payload);
  JobData jobData=new JobData();
  jobData.setProperty("jobName","exportJob");
  jobData.setProperty("ExportInfo",exportInfo);
  JobExecution jobExecution=mock(JobExecution.class);
  UUID uuid=UUIDUtils.newTimeUUID();
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Map<String,Object> userProperties=null;
  Entity[] entity;
  entity=new Entity[10];
  for (int i=0; i < 10; i++) {
    userProperties=new LinkedHashMap<String,Object>();
    userProperties.put("username","billybob" + i);
    userProperties.put("email","test" + i + "@anuff.com");
    entity[i]=em.create("user",userProperties);
  }
  em.createConnection(em.getRef(entity[0].getUuid()),"Vibrations",em.getRef(entity[1].getUuid()));
  em.createConnection(em.getRef(entity[1].getUuid()),"Vibrations",em.getRef(entity[0].getUuid()));
  exportService.setS3Export(s3Export);
  exportService.doExport(exportInfo,jobExecution);
  JSONParser parser=new JSONParser();
  org.json.simple.JSONArray a=(org.json.simple.JSONArray)parser.parse(new FileReader(f));
  if (a.size() > 0) {
    org.json.simple.JSONObject objOrg=(org.json.simple.JSONObject)a.get(0);
    String appName=(String)objOrg.get("applicationName");
    assertEquals("ed-application",appName);
    String path=(String)objOrg.get("name");
    assertEquals("ed-organization/ed-application",path);
  }
 else {
    assert(false);
  }
  org.json.simple.JSONObject objEnt=(org.json.simple.JSONObject)a.get(1);
  org.json.simple.JSONObject objConnections=(org.json.simple.JSONObject)objEnt.get("connections");
  org.json.simple.JSONArray objVibrations=(org.json.simple.JSONArray)objConnections.get("Vibrations");
  assertNotNull(objVibrations);
  f.delete();
}
