{
  String orgName=clientSetup.getOrganization().getName();
  String appToDeleteName=clientSetup.getAppName() + "_appToDelete";
  Token orgAdminToken=getAdminToken(clientSetup.getUsername(),clientSetup.getUsername());
  List<Entity> entities=new ArrayList<>();
  UUID appToDeleteId=createAppWithCollection(orgName,appToDeleteName,orgAdminToken,entities);
  clientSetup.getRestClient().management().orgs().org(orgName).apps().app(appToDeleteId.toString()).getTarget().queryParam("access_token",orgAdminToken.getAccessToken()).queryParam(CONFIRM_APPLICATION_IDENTIFIER,appToDeleteId).request().delete();
  ApiResponse appCreateAgainResponse=null;
  int retries=0;
  while (retries++ < 30) {
    try {
      appCreateAgainResponse=clientSetup.getRestClient().management().orgs().org(orgName).app().getTarget().queryParam("access_token",orgAdminToken.getAccessToken()).request().post(javax.ws.rs.client.Entity.json(new Application(appToDeleteName)),ApiResponse.class);
      break;
    }
 catch (    Exception e) {
      logger.error("App not deleted yet. Waiting ... ({})",retries);
      Thread.sleep(1000);
    }
  }
  Assert.assertNotNull(appCreateAgainResponse);
  Assert.assertEquals("Must be able to create app with same name as deleted app",(orgName + "/" + appToDeleteName).toLowerCase(),appCreateAgainResponse.getEntities().get(0).get("name"));
}
