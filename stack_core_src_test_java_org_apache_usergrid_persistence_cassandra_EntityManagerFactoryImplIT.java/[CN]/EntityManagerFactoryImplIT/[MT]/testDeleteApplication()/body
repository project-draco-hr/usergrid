{
  String rand=UUIDGenerator.newTimeUUID().toString();
  UUID applicationId=setup.createApplication("test-org-" + rand,"test-app-" + rand);
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Map<String,Object> properties1=new LinkedHashMap<String,Object>();
  properties1.put("Name","12 Angry Men");
  properties1.put("Year",1957);
  Entity film1=em.create("film",properties1);
  Map<String,Object> properties2=new LinkedHashMap<String,Object>();
  properties2.put("Name","Reservoir Dogs");
  properties2.put("Year",1992);
  Entity film2=em.create("film",properties2);
  em.refreshIndex();
  setup.getEmf().deleteApplication(applicationId);
  em.refreshIndex();
  boolean found=false;
  Map<String,UUID> deletedApps=emf.getDeletedApplications();
  for (  String appName : deletedApps.keySet()) {
    UUID appId=deletedApps.get(appName);
    if (appId.equals(applicationId)) {
      found=true;
      break;
    }
  }
  assertTrue("Deleted app must be found in in deleted apps collection",found);
  assertNull(setup.getEmf().lookupApplication("test-app-" + rand));
  Map<String,UUID> appMap=setup.getEmf().getApplications();
  for (  String appName : appMap.keySet()) {
    UUID appId=appMap.get(appName);
    assertNotEquals(appId,applicationId);
    assertNotEquals(appName,"test-app-" + rand);
  }
  emf.restoreApplication(applicationId);
  emf.rebuildAllIndexes(new EntityManagerFactory.ProgressObserver(){
    @Override public void onProgress(    EntityRef entity){
      logger.debug("Reindexing {}:{}",entity.getType(),entity.getUuid());
    }
  }
);
  found=false;
  deletedApps=emf.getDeletedApplications();
  for (  String appName : deletedApps.keySet()) {
    UUID appId=deletedApps.get(appName);
    if (appId.equals(applicationId)) {
      found=true;
      break;
    }
  }
  assertFalse("Restored app found in deleted apps collection",found);
  found=false;
  appMap=setup.getEmf().getApplications();
  for (  String appName : appMap.keySet()) {
    UUID appId=appMap.get(appName);
    if (appId.equals(applicationId)) {
      found=true;
      break;
    }
  }
  assertTrue("Restored app not found in apps collection",found);
}
