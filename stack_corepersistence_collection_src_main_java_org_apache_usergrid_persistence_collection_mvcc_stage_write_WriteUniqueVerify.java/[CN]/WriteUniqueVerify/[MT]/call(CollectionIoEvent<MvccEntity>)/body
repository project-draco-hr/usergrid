{
  MvccValidationUtils.verifyMvccEntityWithEntity(ioevent.getEvent());
  final Entity entity=ioevent.getEvent().getEntity().get();
  final List<Observable<FieldUniquenessResult>> fields=new ArrayList<Observable<FieldUniquenessResult>>();
  for (  final Field field : entity.getFields()) {
    if (field.isUnique()) {
      Observable<FieldUniquenessResult> result=Observable.from(field).subscribeOn(Schedulers.io()).map(new Func1<Field,FieldUniquenessResult>(){
        @Override public FieldUniquenessResult call(        Field field){
          UniqueValue written=new UniqueValueImpl(ioevent.getEntityCollection(),field,entity.getId(),entity.getVersion());
          MutationBatch mb=uniqueValueStrat.write(written,serializationFig.getTimeout());
          try {
            mb.execute();
          }
 catch (          ConnectionException ex) {
            throw new WriteUniqueVerifyException(entity,ioevent.getEntityCollection(),"Error writing unique value " + field.toString(),ex);
          }
          UniqueValue loaded;
          try {
            loaded=uniqueValueStrat.load(ioevent.getEntityCollection(),field);
          }
 catch (          ConnectionException ex) {
            throw new WriteUniqueVerifyException(entity,ioevent.getEntityCollection(),"Error verifying write",ex);
          }
          return new FieldUniquenessResult(field,loaded.equals(written));
        }
      }
);
      fields.add(result);
    }
  }
  if (fields.size() == 0) {
    return Observable.from(ioevent).subscribeOn(Schedulers.io());
  }
  final FuncN<CollectionIoEvent<MvccEntity>> zipFunction=new FuncN<CollectionIoEvent<MvccEntity>>(){
    @Override public CollectionIoEvent<MvccEntity> call(    final Object... args){
      Map<String,Field> uniquenessVioloations=new HashMap<String,Field>();
      for (      Object resultObj : args) {
        FieldUniquenessResult result=(FieldUniquenessResult)resultObj;
        if (!result.isUnique()) {
          Field field=result.getField();
          uniquenessVioloations.put(field.getName(),field);
        }
      }
      if (!uniquenessVioloations.isEmpty()) {
        throw new WriteUniqueVerifyException(entity,ioevent.getEntityCollection(),uniquenessVioloations);
      }
      return ioevent;
    }
  }
;
  return Observable.zip(fields,zipFunction);
}
