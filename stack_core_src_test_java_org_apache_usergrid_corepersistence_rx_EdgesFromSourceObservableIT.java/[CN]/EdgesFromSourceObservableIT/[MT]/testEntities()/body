{
  final EntityManager em=app.getEntityManager();
  final Application createdApplication=em.getApplication();
  final String type1="targetthings";
  final String type2="sourcethings";
  final int size=10;
  final Set<Id> sourceIdentities=EntityWriteHelper.createTypes(em,type2,size);
  final Entity entity=em.create(type1,new HashMap<String,Object>(){
{
      put("property","value");
    }
  }
);
  final Id target=new SimpleId(entity.getUuid(),entity.getType());
  for (  Id source : sourceIdentities) {
    em.createConnection(SimpleEntityRef.fromId(source),"likes",SimpleEntityRef.fromId(target));
  }
  ManagerCache managerCache=SpringResource.getInstance().getBean(Injector.class).getInstance(ManagerCache.class);
  final ApplicationScope scope=CpNamingUtils.getApplicationScope(app.getId());
  final GraphManager gm=managerCache.getGraphManager(scope);
  EdgesToTargetObservable.getEdgesToTarget(gm,target).doOnNext(new Action1<Edge>(){
    @Override public void call(    final Edge edge){
      final String edgeType=edge.getType();
      final Id source=edge.getSourceNode();
      if (CpNamingUtils.isCollectionEdgeType(edgeType)) {
        final String collectionName=CpNamingUtils.getCollectionName(edgeType);
        assertEquals("application source returned",createdApplication.getUuid(),source.getUuid());
        final String expectedCollection=Schema.defaultCollectionName(target.getType());
        assertEquals("right type returned",expectedCollection,collectionName);
        return;
      }
      if (!CpNamingUtils.isConnectionEdgeType(edgeType)) {
        fail("Only connection edges should be encountered");
      }
      final String connectionType=CpNamingUtils.getConnectionType(edgeType);
      assertEquals("Same connection type expected","likes",connectionType);
      assertTrue("Element should be present on removal",sourceIdentities.remove(source));
    }
  }
).toBlocking().lastOrDefault(null);
}
