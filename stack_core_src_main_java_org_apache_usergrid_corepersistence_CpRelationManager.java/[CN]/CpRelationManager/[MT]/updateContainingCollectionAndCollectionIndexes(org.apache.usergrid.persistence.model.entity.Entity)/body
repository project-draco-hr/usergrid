{
  final GraphManager gm=managerCache.getGraphManager(applicationScope);
  Iterator<String> edgeTypesToTarget=gm.getEdgeTypesToTarget(new SimpleSearchEdgeType(cpHeadEntity.getId(),null,null)).toBlockingObservable().getIterator();
  logger.debug("updateContainingCollectionsAndCollections(): " + "Searched for edges to target {}:{}\n   in scope {}\n   found: {}",new Object[]{cpHeadEntity.getId().getType(),cpHeadEntity.getId().getUuid(),applicationScope.getApplication(),edgeTypesToTarget.hasNext()});
  final EntityIndex ei=managerCache.getEntityIndex(applicationScope);
  final EntityIndexBatch entityIndexBatch=ei.createBatch();
  final int count=gm.getEdgeTypesToTarget(new SimpleSearchEdgeType(cpHeadEntity.getId(),null,null)).flatMap(new Func1<String,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final String etype){
      return gm.loadEdgesToTarget(new SimpleSearchByEdgeType(cpHeadEntity.getId(),etype,Long.MAX_VALUE,SearchByEdgeType.Order.DESCENDING,null));
    }
  }
).doOnNext(new Action1<Edge>(){
    @Override public void call(    final Edge edge){
      EntityRef sourceEntity=new SimpleEntityRef(edge.getSourceNode().getType(),edge.getSourceNode().getUuid());
      IndexScope indexScope;
      if (CpNamingUtils.isCollectionEdgeType(edge.getType())) {
        String collName=CpNamingUtils.getCollectionName(edge.getType());
        indexScope=new IndexScopeImpl(new SimpleId(sourceEntity.getUuid(),sourceEntity.getType()),CpNamingUtils.getCollectionScopeNameFromCollectionName(collName));
      }
 else {
        String connName=CpNamingUtils.getConnectionType(edge.getType());
        indexScope=new IndexScopeImpl(new SimpleId(sourceEntity.getUuid(),sourceEntity.getType()),CpNamingUtils.getConnectionScopeName(connName));
      }
      entityIndexBatch.index(indexScope,cpEntity);
    }
  }
).count().toBlocking().lastOrDefault(0);
  entityIndexBatch.execute().get();
  logger.debug("updateContainingCollectionsAndCollections() updated {} indexes",count);
}
