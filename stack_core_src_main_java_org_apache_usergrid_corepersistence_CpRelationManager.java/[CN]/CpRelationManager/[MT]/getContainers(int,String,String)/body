{
  Map<EntityRef,Set<String>> results=new LinkedHashMap<EntityRef,Set<String>>();
  final GraphManager gm=managerCache.getGraphManager(applicationScope);
  Observable<Edge> edges=gm.getEdgeTypesToTarget(new SimpleSearchEdgeType(cpHeadEntity.getId(),edgeType,null)).flatMap(new Func1<String,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final String edgeType){
      return gm.loadEdgesToTarget(new SimpleSearchByEdgeType(cpHeadEntity.getId(),edgeType,Long.MAX_VALUE,SearchByEdgeType.Order.DESCENDING,null));
    }
  }
);
  if (limit > -1) {
    edges=edges.take(limit);
  }
  return edges.collect(results,new Action2<Map<EntityRef,Set<String>>,Edge>(){
    @Override public void call(    final Map<EntityRef,Set<String>> entityRefSetMap,    final Edge edge){
      if (fromEntityType != null && !fromEntityType.equals(edge.getSourceNode().getType())) {
        logger.debug("Ignoring edge from entity type {}",edge.getSourceNode().getType());
        return;
      }
      final EntityRef eref=new SimpleEntityRef(edge.getSourceNode().getType(),edge.getSourceNode().getUuid());
      String name;
      if (CpNamingUtils.isConnectionEdgeType(edge.getType())) {
        name=CpNamingUtils.getConnectionType(edge.getType());
      }
 else {
        name=CpNamingUtils.getCollectionName(edge.getType());
      }
      addMapSet(entityRefSetMap,eref,name);
    }
  }
).toBlocking().last();
}
