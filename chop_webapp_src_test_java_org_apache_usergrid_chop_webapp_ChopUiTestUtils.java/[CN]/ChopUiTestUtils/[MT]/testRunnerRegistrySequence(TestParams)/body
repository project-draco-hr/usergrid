{
  String commitId=UUID.randomUUID().toString();
  String hostname=RandomStringUtils.randomAlphabetic(8);
  RunnerBuilder builder=new RunnerBuilder();
  builder.setTempDir(".").setServerPort(19023).setUrl("https://localhost:19023").setHostname(hostname).setIpv4Address("127.0.0.1");
  Boolean result=testParams.addQueryParameters(QUERY_PARAMS).setEndpoint(RunnerRegistryResource.ENDPOINT).newWebResource(null).queryParam(RestParams.COMMIT_ID,commitId).path("/register").type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).post(Boolean.class,builder.getRunner());
  assertTrue(result);
  List<Runner> runnerList=testParams.setEndpoint(RunnerRegistryResource.ENDPOINT).newWebResource(null).queryParam(RestParams.COMMIT_ID,commitId).path("/list").type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).get(new GenericType<List<Runner>>(){
  }
);
  assertNotNull(runnerList);
  assertEquals(1,runnerList.size());
  Runner runner=runnerList.get(0);
  assertEquals(19023,runner.getServerPort());
  assertEquals("https://localhost:19023",runner.getUrl());
  assertEquals(hostname,runner.getHostname());
  assertEquals("127.0.0.1",runner.getIpv4Address());
  assertEquals(".",runner.getTempDir());
  result=testParams.newWebResource(null).queryParam(RestParams.RUNNER_URL,runner.getUrl()).path("/unregister").type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).post(Boolean.class);
  assertTrue(result);
  runnerList.clear();
  runnerList=testParams.setEndpoint(RunnerRegistryResource.ENDPOINT).newWebResource(null).queryParam(RestParams.COMMIT_ID,commitId).path("/list").type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).get(new GenericType<List<Runner>>(){
  }
);
  assertNotNull(runnerList);
  assertEquals(0,runnerList.size());
}
