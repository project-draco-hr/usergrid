{
  context.clearUser();
  refreshIndex(context.getOrgName(),context.getAppName());
  String email="testuser1@usergrid.org";
  TestUser user1=new TestAppUser(email,"password",email).create(context);
  refreshIndex(context.getOrgName(),context.getAppName());
  user1.login(context).makeActive(context);
  JsonNode data=context.application().collection("restaurants").create(MapUtils.hashMap("name","4peaks"));
  refreshIndex(context.getOrgName(),context.getAppName());
  data=context.application().users().user("me").connection("likes").collection("restaurants").entity("4peaks").post();
  refreshIndex(context.getOrgName(),context.getAppName());
  String peaksId=getEntity(data,0).get("uuid").asText();
  context.clearUser();
  email="testuser2@usergrid.org";
  TestUser user2=new TestAppUser(email,"password",email).create(context);
  refreshIndex(context.getOrgName(),context.getAppName());
  user2.login(context).makeActive(context);
  refreshIndex(context.getOrgName(),context.getAppName());
  data=context.application().collection("restaurants").create(MapUtils.hashMap("name","arrogantbutcher"));
  refreshIndex(context.getOrgName(),context.getAppName());
  data=context.application().users().user("me").connection("likes").collection("restaurants").entity("arrogantbutcher").post();
  refreshIndex(context.getOrgName(),context.getAppName());
  String arrogantButcherId=getEntity(data,0).get("uuid").asText();
  CustomCollection likeRestaurants=context.withUser(user1).application().users().user("me").connection("likes").collection("restaurants");
  refreshIndex(context.getOrgName(),context.getAppName());
  data=likeRestaurants.entity(peaksId).get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=likeRestaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=likeRestaurants.entity("arrogantbutcher").get();
  assertNull(data);
  data=likeRestaurants.entity(arrogantButcherId).get();
  assertNull(data);
  data=likeRestaurants.get();
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  assertNull(getEntity(data,1));
  likeRestaurants=context.withUser(user2).application().users().user("me").connection("likes").collection("restaurants");
  data=likeRestaurants.entity(arrogantButcherId).get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  data=likeRestaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  data=likeRestaurants.entity("4peaks").get();
  assertNull(data);
  data=likeRestaurants.entity(peaksId).get();
  assertNull(data);
  data=likeRestaurants.get();
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  assertNull(getEntity(data,1));
  CustomCollection restaurants=context.withUser(user1).application().collection("restaurants");
  data=restaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=restaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
  restaurants=context.withUser(user1).application().collection("restaurants");
  data=restaurants.entity("4peaks").get();
  assertNotNull(data);
  assertEquals("4peaks",getEntity(data,0).get("name").asText());
  data=restaurants.entity("arrogantbutcher").get();
  assertNotNull(data);
  assertEquals("arrogantbutcher",getEntity(data,0).get("name").asText());
}
