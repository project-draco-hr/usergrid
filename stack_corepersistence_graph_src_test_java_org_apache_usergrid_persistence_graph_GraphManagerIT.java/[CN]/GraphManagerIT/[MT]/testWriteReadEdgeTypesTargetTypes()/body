{
  final GraphManager gm=getHelper(emf.createEdgeManager(scope));
  Id sourceId1=new SimpleId("source");
  Id sourceId2=new SimpleId("source2");
  Id targetId1=new SimpleId("target");
  Edge testTargetEdge=createEdge(sourceId1,"test",targetId1,System.currentTimeMillis());
  gm.writeEdge(testTargetEdge).toBlocking().singleOrDefault(null);
  Edge testTarget2Edge=createEdge(sourceId2,"test",targetId1,System.currentTimeMillis());
  gm.writeEdge(testTarget2Edge).toBlocking().singleOrDefault(null);
  Edge test2TargetEdge=createEdge(sourceId1,"test2",targetId1,System.currentTimeMillis());
  gm.writeEdge(test2TargetEdge).toBlocking().singleOrDefault(null);
  final SearchEdgeType edgeTypes=new SimpleSearchEdgeType(testTargetEdge.getTargetNode(),null,null);
  Observable<String> edges=gm.getEdgeTypesToTarget(edgeTypes);
  Iterator<String> results=edges.toBlocking().getIterator();
  assertEquals("Edges correct","test",results.next());
  assertEquals("Edges correct","test2",results.next());
  assertFalse("No more edges",results.hasNext());
  edges=gm.getIdTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test",null,null));
  results=edges.toBlocking().getIterator();
  assertEquals("Types correct",sourceId1.getType(),results.next());
  assertEquals("Types correct",sourceId2.getType(),results.next());
  assertFalse("No more edges",results.hasNext());
  edges=gm.getIdTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test2",null,null));
  results=edges.toBlocking().getIterator();
  assertEquals("Types correct",sourceId1.getType(),results.next());
  assertFalse("No more edges",results.hasNext());
}
