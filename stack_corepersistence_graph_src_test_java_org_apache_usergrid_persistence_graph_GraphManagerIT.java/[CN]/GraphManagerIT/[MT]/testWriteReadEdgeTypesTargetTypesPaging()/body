{
  final GraphManager gm=getHelper(emf.createEdgeManager(scope));
  Id sourceId1=new SimpleId("source");
  Id sourceId2=new SimpleId("source2");
  Id targetId=new SimpleId("target");
  Edge testTargetEdge=createEdge(sourceId1,"test",targetId,UUIDGenerator.newTimeUUID());
  gm.writeEdge(testTargetEdge).toBlockingObservable().singleOrDefault(null);
  Edge testTargetEdge2=createEdge(sourceId2,"test",targetId,UUIDGenerator.newTimeUUID());
  gm.writeEdge(testTargetEdge2).toBlockingObservable().singleOrDefault(null);
  Edge test2TargetEdge=createEdge(sourceId2,"test2",targetId,UUIDGenerator.newTimeUUID());
  gm.writeEdge(test2TargetEdge).toBlockingObservable().singleOrDefault(null);
  SearchEdgeType edgeTypes=new SimpleSearchEdgeType(testTargetEdge.getTargetNode(),null);
  Observable<String> edges=gm.getEdgeTypesToTarget(edgeTypes);
  Iterator<String> results=edges.toBlockingObservable().getIterator();
  assertEquals("Edges correct","test",results.next());
  assertEquals("Edges correct","test2",results.next());
  assertFalse("No more edges",results.hasNext());
  edgeTypes=new SimpleSearchEdgeType(testTargetEdge2.getTargetNode(),"test");
  edges=gm.getEdgeTypesToTarget(edgeTypes);
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Edges correct","test2",results.next());
  assertFalse("No more edges",results.hasNext());
  edges=gm.getIdTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test",null));
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Types correct",sourceId1.getType(),results.next());
  assertEquals("Types correct",sourceId2.getType(),results.next());
  assertFalse("No more edges",results.hasNext());
  edges=gm.getIdTypesToTarget(new SimpleSearchIdType(testTargetEdge.getTargetNode(),"test",sourceId1.getType()));
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Types correct",sourceId2.getType(),results.next());
  assertFalse("No more results",results.hasNext());
}
