{
  final GraphManager gm=getHelper(emf.createEdgeManager(scope));
  Id sourceId=new SimpleId("source");
  Id targetId1=new SimpleId("target");
  Id targetId2=new SimpleId("target2");
  Edge edge1=createEdge(sourceId,"test",targetId1,UUIDGenerator.newTimeUUID());
  gm.writeEdge(edge1).toBlockingObservable().singleOrDefault(null);
  Edge edge2=createEdge(sourceId,"test",targetId2,UUIDGenerator.newTimeUUID());
  gm.writeEdge(edge2).toBlockingObservable().singleOrDefault(null);
  final UUID maxVersion=UUIDGenerator.newTimeUUID();
  assertTrue(UUIDComparator.staticCompare(maxVersion,edge2.getVersion()) > 0);
  assertTrue(UUIDComparator.staticCompare(maxVersion,edge1.getVersion()) > 0);
  ByteBuffer edge1Buff=UUIDSerializer.get().toByteBuffer(edge1.getVersion());
  ByteBuffer edge2Buff=UUIDSerializer.get().toByteBuffer(edge2.getVersion());
  ByteBuffer maxBuff=UUIDSerializer.get().toByteBuffer(maxVersion);
  assertTrue(UUIDType.instance.compare(maxBuff.duplicate(),edge1Buff.duplicate()) > 0);
  assertTrue(UUIDType.instance.compare(maxBuff.duplicate(),edge2Buff.duplicate()) > 0);
  Observable<Edge> edges=gm.loadEdgesFromSource(createSearchByEdge(edge1.getSourceNode(),edge1.getType(),maxVersion,null));
  Iterator<Edge> results=edges.toBlockingObservable().getIterator();
  System.out.println("\n\n\n\n\n\n\n\n\n\n");
  assertEquals("Edges correct",edge2,results.next());
  assertEquals("Edges correct",edge1,results.next());
  assertFalse("No more edges",results.hasNext());
  System.out.println("\n\n\n\n\n\n\n\n\n\n");
  gm.deleteEdge(edge1).toBlockingObservable().last();
  System.out.println("\n\n\n\n\n\n\n\n\n\n");
  edges=gm.loadEdgesFromSource(createSearchByEdge(edge1.getSourceNode(),edge1.getType(),maxVersion,null));
  results=edges.toBlockingObservable().getIterator();
  assertEquals("Edges correct",edge2,results.next());
  assertFalse("No more edges",results.hasNext());
  System.out.println("\n\n\n\n\n\n\n\n\n\n");
  gm.deleteEdge(edge2).toBlockingObservable().last();
  System.out.println("\n\n\n\n\n\n\n\n\n\n");
  edges=gm.loadEdgesFromSource(createSearchByEdge(edge1.getSourceNode(),edge1.getType(),maxVersion,null));
  results=edges.toBlockingObservable().getIterator();
  assertFalse("No more edges",results.hasNext());
}
