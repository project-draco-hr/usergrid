{
  ApplicationScope applicationScope=new ApplicationScopeImpl(new SimpleId(UUID.randomUUID(),"application"));
  final EntityIndex EntityIndex=entityIndexFactory.createEntityIndex(indexLocationStrategyFactory.getIndexLocationStrategy(applicationScope));
  final GraphManager graphManager=graphManagerFactory.createEdgeManager(applicationScope);
  final Entity testEntity=new Entity(createId("thing"),UUIDGenerator.newTimeUUID());
  testEntity.setField(new StringField("string","foo"));
  Edge collectionEdge=createEntityandCollectionEdge(applicationScope,graphManager,testEntity);
  final int edgeCount=5;
  final List<Edge> connectionSearchEdges=createConnectionSearchEdges(testEntity,graphManager,edgeCount);
  indexService.indexEntity(applicationScope,testEntity).toBlocking().getIterator();
  final SearchEdge collectionSearchEdge=CpNamingUtils.createSearchEdgeFromSource(collectionEdge);
  getResults(EntityIndex,collectionSearchEdge,SearchTypes.fromTypes(testEntity.getId().getType()),1);
  for (int i=0; i < edgeCount; i++) {
    final SearchEdge connectionSearchEdge=CpNamingUtils.createSearchEdgeFromSource(connectionSearchEdges.get(i));
    getResults(EntityIndex,connectionSearchEdge,SearchTypes.fromTypes(testEntity.getId().getType()),1);
  }
  for (  Edge connectionSearch : connectionSearchEdges) {
    final Edge toBeMarkedEdge=graphManager.markEdge(connectionSearch).toBlocking().firstOrDefault(null);
    final Edge toBeDeletedEdge=graphManager.deleteEdge(toBeMarkedEdge).toBlocking().first();
    final SearchEdge connectionSearchEdge=CpNamingUtils.createSearchEdgeFromSource(connectionSearch);
    IndexOperationMessage indexOperationMessage=indexService.deleteIndexEdge(applicationScope,toBeDeletedEdge).toBlocking().lastOrDefault(null);
    assertEquals(1,indexOperationMessage.getDeIndexRequests().size());
    final CandidateResults connectionResultsEmpty=EntityIndex.search(connectionSearchEdge,SearchTypes.fromTypes("things"),"select *",10,0);
    assertEquals(0,connectionResultsEmpty.size());
  }
}
