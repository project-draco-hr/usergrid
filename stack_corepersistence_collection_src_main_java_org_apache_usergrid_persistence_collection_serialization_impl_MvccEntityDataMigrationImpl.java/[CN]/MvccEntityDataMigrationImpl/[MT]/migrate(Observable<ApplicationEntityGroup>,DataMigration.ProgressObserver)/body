{
  final AtomicLong atomicLong=new AtomicLong();
  final UUID now=UUIDGenerator.newTimeUUID();
  return applicationEntityGroupObservable.flatMap(new Func1<ApplicationEntityGroup,Observable<Long>>(){
    @Override public Observable<Long> call(    final ApplicationEntityGroup applicationEntityGroup){
      final List<EntityIdScope<CollectionScope>> entityIds=applicationEntityGroup.entityIds;
      return Observable.from(entityIds).subscribeOn(Schedulers.io()).parallel(new Func1<Observable<EntityIdScope<CollectionScope>>,Observable<Long>>(){
        @Override public Observable<Long> call(        final Observable<EntityIdScope<CollectionScope>> entityIdScopeObservable){
          final MutationBatch totalBatch=keyspace.prepareMutationBatch();
          return entityIdScopeObservable.doOnNext(new Action1<EntityIdScope<CollectionScope>>(){
            @Override public void call(            final EntityIdScope<CollectionScope> idScope){
              MigrationStrategy.MigrationRelationship<MvccEntitySerializationStrategy> migration=entityMigrationStrategy.getMigration();
              CollectionScope currentScope=idScope.getCollectionScope();
              EntitySet allVersions=migration.from().load(currentScope,Collections.singleton(idScope.getId()),now);
              final MvccEntity version=allVersions.getEntity(idScope.getId());
              final MutationBatch versionBatch=migration.to().write(currentScope,version);
              totalBatch.mergeShallow(versionBatch);
            }
          }
).buffer(100).doOnNext(new Action1<List<EntityIdScope<CollectionScope>>>(){
            @Override public void call(            final List<EntityIdScope<CollectionScope>> ids){
              atomicLong.addAndGet(100);
              executeBatch(totalBatch,observer,atomicLong);
            }
          }
).reduce(0l,new Func2<Long,List<EntityIdScope<CollectionScope>>,Long>(){
            @Override public Long call(            final Long aLong,            final List<EntityIdScope<CollectionScope>> ids){
              return aLong + ids.size();
            }
          }
);
        }
      }
);
    }
  }
);
}
