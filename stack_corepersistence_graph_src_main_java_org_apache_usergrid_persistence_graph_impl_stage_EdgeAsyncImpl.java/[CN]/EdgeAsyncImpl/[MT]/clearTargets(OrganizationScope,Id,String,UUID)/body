{
  ValidationUtils.validateOrganizationScope(scope);
  ValidationUtils.verifyIdentity(targetId);
  Preconditions.checkNotNull(edgeType,"edge type is required");
  Preconditions.checkNotNull(version,"version is required");
  return loadEdgeIdsToTarget(scope,new SimpleSearchIdType(targetId,edgeType,null)).buffer(graphFig.getRepairConcurrentSize()).flatMap(new Func1<List<String>,Observable<Integer>>(){
    @Override public Observable<Integer> call(    final List<String> types){
      final MutationBatch batch=keyspace.prepareMutationBatch();
      final List<Observable<Integer>> checks=new ArrayList<Observable<Integer>>(types.size());
      for (      final String sourceIdType : types) {
        final SearchByIdType searchData=new SimpleSearchByIdType(targetId,edgeType,version,sourceIdType,null);
        Observable<Integer> search=getEdgesToTargetBySourceType(scope,searchData).distinctUntilChanged(new Func1<MarkedEdge,Id>(){
          @Override public Id call(          final MarkedEdge markedEdge){
            return markedEdge.getSourceNode();
          }
        }
).take(1).count().doOnNext(new Action1<Integer>(){
          @Override public void call(          final Integer count){
            if (count != 0) {
              return;
            }
            batch.mergeShallow(edgeMetadataSerialization.removeIdTypeToTarget(scope,targetId,edgeType,sourceIdType,version));
          }
        }
);
        checks.add(search);
      }
      return MathObservable.sumInteger(Observable.merge(checks)).doOnNext(new Action1<Integer>(){
        @Override public void call(        final Integer count){
          if (batch.isEmpty()) {
            return;
          }
          try {
            batch.execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to execute mutation",e);
          }
        }
      }
);
    }
  }
).map(new Func1<Integer,Integer>(){
    @Override public Integer call(    final Integer subTypes){
      if (subTypes != 0) {
        return subTypes;
      }
      try {
        edgeMetadataSerialization.removeEdgeTypeToTarget(scope,targetId,edgeType,version).execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to execute mutation");
      }
      return subTypes;
    }
  }
).defaultIfEmpty(0);
}
