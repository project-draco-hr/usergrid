{
  ValidationUtils.validateApplicationScope(scope);
  Preconditions.checkNotNull(edgeMetadataSerialization,"edgeMetadataSerialization must not be null");
  Preconditions.checkNotNull(storageEdgeSerialization,"storageEdgeSerialization must not be null");
  Preconditions.checkNotNull(nodeSerialization,"nodeSerialization must not be null");
  Preconditions.checkNotNull(graphFig,"consistencyFig must not be null");
  Preconditions.checkNotNull(scope,"scope must not be null");
  Preconditions.checkNotNull(nodeDeleteListener,"nodeDeleteListener must not be null");
  this.scope=scope;
  this.edgeMetadataSerialization=edgeMetadataSerialization;
  this.storageEdgeSerialization=storageEdgeSerialization;
  this.nodeSerialization=nodeSerialization;
  this.graphFig=graphFig;
  this.edgeDeleteListener=edgeDeleteListener;
  this.nodeDeleteListener=nodeDeleteListener;
  this.edgeDeleteSubcriber=MetricSubscriber.INSTANCE;
  this.nodeDelete=MetricSubscriber.INSTANCE;
  this.writeEdgeMeter=metricsFactory.getMeter(GraphManagerImpl.class,"write.edge.meter");
  this.writeEdgeTimer=metricsFactory.getTimer(GraphManagerImpl.class,"write.edge.timer");
  this.deleteEdgeMeter=metricsFactory.getMeter(GraphManagerImpl.class,"delete.edge.meter");
  this.deleteEdgeTimer=metricsFactory.getTimer(GraphManagerImpl.class,"delete.edge.timer");
  this.deleteNodeMeter=metricsFactory.getMeter(GraphManagerImpl.class,"delete.node.meter");
  this.deleteNodeTimer=metricsFactory.getTimer(GraphManagerImpl.class,"delete.node.timer");
  this.loadEdgesFromSourceMeter=metricsFactory.getMeter(GraphManagerImpl.class,"load.from.meter");
  this.loadEdgesFromSourceTimer=metricsFactory.getTimer(GraphManagerImpl.class,"load.from.timer");
  this.loadEdgesToTargetMeter=metricsFactory.getMeter(GraphManagerImpl.class,"load.to.meter");
  this.loadEdgesToTargetTimer=metricsFactory.getTimer(GraphManagerImpl.class,"load.to.timer");
  this.loadEdgesVersionsMeter=metricsFactory.getMeter(GraphManagerImpl.class,"load.versions.meter");
  this.loadEdgesVersionsTimer=metricsFactory.getTimer(GraphManagerImpl.class,"load.versions.timer");
  this.loadEdgesFromSourceByTypeMeter=metricsFactory.getMeter(GraphManagerImpl.class,"load.from.type.meter");
  this.loadEdgesFromSourceByTypeTimer=metricsFactory.getTimer(GraphManagerImpl.class,"load.from.type.timer");
  this.loadEdgesToTargetByTypeMeter=metricsFactory.getMeter(GraphManagerImpl.class,"load.to.type.meter");
  this.loadEdgesToTargetByTypeTimer=metricsFactory.getTimer(GraphManagerImpl.class,"load.to.type.timer");
  this.getEdgeTypesFromSourceTimer=metricsFactory.getTimer(GraphManagerImpl.class,"get.edge.from.timer");
  this.getEdgeTypesFromSourceMeter=metricsFactory.getMeter(GraphManagerImpl.class,"get.edge.from.meter");
  this.getIdTypesFromSourceTimer=metricsFactory.getTimer(GraphManagerImpl.class,"get.idtype.from.timer");
  this.getIdTypesFromSourceMeter=metricsFactory.getMeter(GraphManagerImpl.class,"get.idtype.from.meter");
  this.getEdgeTypesToTargetTimer=metricsFactory.getTimer(GraphManagerImpl.class,"get.edge.to.timer");
  this.getEdgeTypesToTargetMeter=metricsFactory.getMeter(GraphManagerImpl.class,"get.edge.to.meter");
  this.getIdTypesToTargetTimer=metricsFactory.getTimer(GraphManagerImpl.class,"get.idtype.to.timer");
  this.getIdTypesToTargetMeter=metricsFactory.getMeter(GraphManagerImpl.class,"get.idtype.to.meter");
}
