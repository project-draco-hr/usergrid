{
  ValidationUtils.validateApplicationScope(scope);
  Preconditions.checkNotNull(edgeMetadataSerialization,"edgeMetadataSerialization must not be null");
  Preconditions.checkNotNull(mergedEdgeReader,"mergedEdgeReader must not be null");
  Preconditions.checkNotNull(commitLogSerialization,"commitLogSerialization must not be null");
  Preconditions.checkNotNull(nodeSerialization,"nodeSerialization must not be null");
  Preconditions.checkNotNull(graphFig,"consistencyFig must not be null");
  Preconditions.checkNotNull(asyncProcessorFactory,"asyncProcessorFactory must not be null");
  Preconditions.checkNotNull(scope,"scope must not be null");
  Preconditions.checkNotNull(consistencyFig,"consistencyFig must not be null");
  this.scope=scope;
  this.edgeMetadataSerialization=edgeMetadataSerialization;
  this.mergedEdgeReader=mergedEdgeReader;
  this.commitLogSerialization=commitLogSerialization;
  this.nodeSerialization=nodeSerialization;
  this.graphFig=graphFig;
  this.consistencyFig=consistencyFig;
  this.edgeDeleteAsyncProcessor=asyncProcessorFactory.getProcessor(EdgeDeleteEvent.class);
  this.nodeDeleteAsyncProcessor=asyncProcessorFactory.getProcessor(NodeDeleteEvent.class);
  this.edgeWriteAsyncProcessor=asyncProcessorFactory.getProcessor(EdgeWriteEvent.class);
}
