{
  EdgeUtils.validateEdge(edge);
  final MarkedEdge markedEdge=new SimpleMarkedEdge(edge,false);
  return HystrixGraphObservable.user(Observable.from(markedEdge).subscribeOn(Schedulers.io()).map(new Func1<MarkedEdge,Edge>(){
    @Override public Edge call(    final MarkedEdge edge){
      final AsynchronousMessage<EdgeEvent<MarkedEdge>> event=edgeWriteAsyncProcessor.setVerification(new EdgeEvent<>(scope,edge.getVersion(),edge),getTimeout());
      final MutationBatch mutation=edgeMetadataSerialization.writeEdge(scope,edge);
      final MutationBatch edgeMutation=commitLogSerialization.writeEdge(scope,edge);
      mutation.mergeShallow(edgeMutation);
      try {
        LOG.debug("Writing edge {} to metadata and commit log",edge);
        mutation.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to connect to cassandra",e);
      }
      edgeWriteAsyncProcessor.start(event);
      return edge;
    }
  }
));
}
