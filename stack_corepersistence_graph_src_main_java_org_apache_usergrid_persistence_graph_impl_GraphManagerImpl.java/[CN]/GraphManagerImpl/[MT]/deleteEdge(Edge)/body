{
  EdgeUtils.validateEdge(edge);
  final MarkedEdge markedEdge=new SimpleMarkedEdge(edge,true);
  return HystrixGraphObservable.user(Observable.from(markedEdge).subscribeOn(Schedulers.io()).map(new Func1<MarkedEdge,Edge>(){
    @Override public Edge call(    final MarkedEdge edge){
      final UUID timestamp=UUIDGenerator.newTimeUUID();
      final MutationBatch edgeMutation=commitLogSerialization.writeEdge(scope,edge,timestamp);
      final AsynchronousMessage<EdgeDeleteEvent> event=edgeDeleteAsyncProcessor.setVerification(new EdgeDeleteEvent(scope,timestamp,edge),getTimeout());
      try {
        LOG.debug("Marking edge {} as deleted to commit log",edge);
        edgeMutation.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to connect to cassandra",e);
      }
      edgeDeleteAsyncProcessor.start(event);
      return edge;
    }
  }
));
}
