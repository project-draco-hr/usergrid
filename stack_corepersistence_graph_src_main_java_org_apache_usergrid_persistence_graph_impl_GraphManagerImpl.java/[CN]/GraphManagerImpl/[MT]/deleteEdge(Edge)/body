{
  GraphValidation.validateEdge(edge);
  final MarkedEdge markedEdge=new SimpleMarkedEdge(edge,true);
  return Observable.from(markedEdge).map(new Func1<MarkedEdge,Edge>(){
    @Override public Edge call(    final MarkedEdge edge){
      final UUID timestamp=UUIDGenerator.newTimeUUID();
      final MutationBatch edgeMutation=storageEdgeSerialization.writeEdge(scope,edge,timestamp);
      LOG.debug("Marking edge {} as deleted to commit log",edge);
      HystrixCassandra.user(edgeMutation);
      edgeDeleteListener.receive(scope,markedEdge,timestamp).subscribeOn(Schedulers.io()).subscribe(edgeDeleteSubcriber);
      return edge;
    }
  }
);
}
