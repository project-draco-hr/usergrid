{
  ApplicationScope scope=new ApplicationScopeImpl(new SimpleId("organization"));
  Id entityId=new SimpleId(UUIDGenerator.newTimeUUID(),"entity");
  final UUID version1=UUIDGenerator.newTimeUUID();
  IntegerField version1Field1=new IntegerField("count",1);
  StringField version1Field2=new StringField("field","v1value");
  UniqueValue version1Field1Value=new UniqueValueImpl(version1Field1,entityId,version1);
  UniqueValue version1Field2Value=new UniqueValueImpl(version1Field2,entityId,version1);
  final MutationBatch batch=strategy.write(scope,version1Field1Value);
  batch.mergeShallow(strategy.write(scope,version1Field2Value));
  final UUID version2=UUIDGenerator.newTimeUUID();
  IntegerField version2Field1=new IntegerField("count",2);
  StringField version2Field2=new StringField("field","v2value");
  UniqueValue version2Field1Value=new UniqueValueImpl(version2Field1,entityId,version2);
  UniqueValue version2Field2Value=new UniqueValueImpl(version2Field2,entityId,version2);
  batch.mergeShallow(strategy.write(scope,version2Field1Value));
  batch.mergeShallow(strategy.write(scope,version2Field2Value));
  batch.execute();
  UniqueValueSet fields=strategy.load(scope,entityId.getType(),Arrays.<Field>asList(version1Field1,version1Field2));
  UniqueValue retrieved=fields.getValue(version1Field1.getName());
  assertEquals(version1Field1Value,retrieved);
  retrieved=fields.getValue(version1Field2.getName());
  assertEquals(version1Field2Value,retrieved);
  Iterator<UniqueValue> allFieldsWritten=strategy.getAllUniqueFields(scope,entityId);
  assertTrue(allFieldsWritten.hasNext());
  UniqueValue allFieldsValue=allFieldsWritten.next();
  assertEquals(version2Field1,allFieldsValue.getField());
  assertEquals(version2,allFieldsValue.getEntityVersion());
  allFieldsValue=allFieldsWritten.next();
  assertEquals(version2Field2,allFieldsValue.getField());
  assertEquals(version2,allFieldsValue.getEntityVersion());
  allFieldsValue=allFieldsWritten.next();
  assertEquals(version1Field1,allFieldsValue.getField());
  assertEquals(version1,allFieldsValue.getEntityVersion());
  allFieldsValue=allFieldsWritten.next();
  assertEquals(version1Field2,allFieldsValue.getField());
  assertEquals(version1,allFieldsValue.getEntityVersion());
  assertFalse(allFieldsWritten.hasNext());
}
