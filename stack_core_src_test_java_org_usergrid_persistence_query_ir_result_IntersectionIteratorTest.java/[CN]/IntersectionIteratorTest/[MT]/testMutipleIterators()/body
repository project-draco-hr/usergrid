{
  UUID id1=UUIDUtils.minTimeUUID(1);
  UUID id2=UUIDUtils.minTimeUUID(2);
  UUID id3=UUIDUtils.minTimeUUID(3);
  UUID id4=UUIDUtils.minTimeUUID(4);
  UUID id5=UUIDUtils.minTimeUUID(5);
  UUID id6=UUIDUtils.minTimeUUID(6);
  UUID id7=UUIDUtils.minTimeUUID(7);
  UUID id8=UUIDUtils.minTimeUUID(8);
  UUID id9=UUIDUtils.minTimeUUID(9);
  UUID id10=UUIDUtils.minTimeUUID(10);
  TreeIterator first=new TreeIterator();
  first.add(id1);
  first.add(id2);
  first.add(id3);
  first.add(id8);
  first.add(id9);
  TreeIterator second=new TreeIterator();
  second.add(id1);
  second.add(id2);
  second.add(id3);
  second.add(id4);
  second.add(id8);
  second.add(id10);
  TreeIterator third=new TreeIterator();
  third.add(id1);
  third.add(id3);
  third.add(id5);
  third.add(id6);
  third.add(id7);
  third.add(id8);
  TreeIterator fourth=new TreeIterator();
  fourth.add(id1);
  fourth.add(id2);
  fourth.add(id3);
  fourth.add(id6);
  fourth.add(id8);
  fourth.add(id10);
  IntersectionIterator union=new IntersectionIterator();
  union.addIterator(first);
  union.addIterator(second);
  union.addIterator(third);
  union.addIterator(fourth);
  assertTrue(union.hasNext());
  assertEquals(id1,union.next());
  assertTrue(union.hasNext());
  assertEquals(id3,union.next());
  assertTrue(union.hasNext());
  assertEquals(id8,union.next());
  assertFalse(union.hasNext());
}
