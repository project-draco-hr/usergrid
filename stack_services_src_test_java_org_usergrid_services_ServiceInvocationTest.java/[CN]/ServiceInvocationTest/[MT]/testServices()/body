{
  logger.info("testServices");
  UUID applicationId=createApplication("ServiceInvocationTest","testServices");
  ServiceManager sm=smf.getServiceManager(applicationId);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  Entity user=testRequest(sm,ServiceAction.POST,1,properties,"users").getEntity();
  assertNotNull(user);
  testRequest(sm,ServiceAction.GET,1,null,"users");
  testRequest(sm,ServiceAction.GET,1,null,"users",user.getUuid());
  testRequest(sm,ServiceAction.GET,1,null,"users",Query.fromQL("select * where username='edanuff'"));
  properties=new LinkedHashMap<String,Object>();
  properties.put("foo","bar");
  testRequest(sm,ServiceAction.PUT,1,properties,"users",user.getUuid());
  properties=new LinkedHashMap<String,Object>();
  properties.put("name","nico");
  testRequest(sm,ServiceAction.POST,1,properties,"cats");
  testRequest(sm,ServiceAction.GET,0,null,"users",user.getUuid(),"messages");
  testRequest(sm,ServiceAction.GET,0,null,"users",Query.fromQL("select * where username='edanuff'"),"messages");
  Entity cat=doCreate(sm,"cat","dylan");
  testRequest(sm,ServiceAction.GET,2,null,"cats");
  testRequest(sm,ServiceAction.GET,1,null,"cats",Query.fromQL("select * where name='dylan'"));
  testRequest(sm,ServiceAction.POST,1,null,"users","edanuff","likes",cat.getUuid());
  Entity restaurant=doCreate(sm,"restaurant","Brickhouse");
  sm.getEntityManager().createConnection(user,"likes",restaurant);
  restaurant=doCreate(sm,"restaurant","Axis Cafe");
  testRequest(sm,ServiceAction.GET,2,null,"restaurants");
  testRequest(sm,ServiceAction.POST,1,null,"users",user.getUuid(),"connections","likes",restaurant.getUuid());
  testRequest(sm,ServiceAction.GET,1,null,"users","edanuff","likes","cats");
  testRequest(sm,ServiceAction.GET,3,null,"users","edanuff","likes");
  testRequest(sm,ServiceAction.GET,2,null,"users","edanuff","likes","restaurants");
  testRequest(sm,ServiceAction.GET,1,null,"users","edanuff","likes","restaurants",Query.fromQL("select * where name='Brickhouse'"));
  testRequest(sm,ServiceAction.GET,1,null,"users","edanuff","likes",Query.fromQL("select * where name='axis*'"));
  testRequest(sm,ServiceAction.GET,3,null,"users","edanuff","connections");
  properties=new LinkedHashMap<String,Object>();
  properties.put("color","blacknwhite");
  testRequest(sm,ServiceAction.PUT,1,properties,"users","edanuff","likes",cat.getUuid());
  properties=new LinkedHashMap<String,Object>();
  properties.put("eats","petfood");
  testRequest(sm,ServiceAction.PUT,1,properties,"users","edanuff","likes","cats","dylan");
  properties=new LinkedHashMap<String,Object>();
  properties.put("Todays special","Coffee");
  testRequest(sm,ServiceAction.PUT,1,properties,"users","edanuff","likes","restaurants",Query.fromQL("select * where name='Brickhouse'"));
  testRequest(sm,ServiceAction.DELETE,1,null,"users",user.getUuid(),"connections","likes",restaurant.getUuid());
  testRequest(sm,ServiceAction.GET,2,null,"users","edanuff","connections");
  testRequest(sm,ServiceAction.GET,1,null,"users","edanuff","likes","restaurants");
  UUID uuid=UUID.randomUUID();
  properties=new LinkedHashMap<String,Object>();
  properties.put("visits",5);
  testRequest(sm,ServiceAction.PUT,1,properties,"devices",uuid);
}
