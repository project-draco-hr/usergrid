{
  try {
    int _type=CONTAINS;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      if (input.LA(1) == 'C' || input.LA(1) == 'c') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'O' || input.LA(1) == 'o') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'N' || input.LA(1) == 'n') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'T' || input.LA(1) == 't') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'A' || input.LA(1) == 'a') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'I' || input.LA(1) == 'i') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'N' || input.LA(1) == 'n') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      if (input.LA(1) == 'S' || input.LA(1) == 's') {
        input.consume();
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
    }
    state.type=_type;
    state.channel=_channel;
  }
  finally {
  }
}
