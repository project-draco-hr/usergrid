{
  final ApplicationScope applicationScope=new ApplicationScopeImpl(new SimpleId("application"));
  final GraphManager gm=graphManagerFactory.createEdgeManager(applicationScope);
  final Id source=new SimpleId("source");
  final Id target=new SimpleId("target");
  final String connectionType="testConnection";
  final String collectionName="testCollection";
  final Edge collectionEdge=CpNamingUtils.createCollectionEdge(applicationScope.getApplication(),collectionName,source);
  final Edge writtenCollection=gm.writeEdge(collectionEdge).toBlocking().last();
  assertNotNull("Collection edge written",writtenCollection);
  final Edge connection1=CpNamingUtils.createConnectionEdge(source,connectionType,target);
  final Edge written1=gm.writeEdge(connection1).toBlocking().last();
  final Edge connection2=CpNamingUtils.createConnectionEdge(source,connectionType,target);
  final Edge written2=gm.writeEdge(connection2).toBlocking().last();
  final Edge connection3=CpNamingUtils.createConnectionEdge(source,connectionType,target);
  final Edge written3=gm.writeEdge(connection3).toBlocking().last();
  final List<ConnectionScope> deletedConnections=connectionService.deDupeConnections(Observable.just(applicationScope)).toList().toBlocking().last();
  assertEquals("2 edges deleted",2,deletedConnections.size());
  assertEquals(written2,deletedConnections.get(0));
  assertEquals(written3,deletedConnections.get(1));
  final SearchByEdge simpleSearchByEdge=new SimpleSearchByEdge(source,connection1.getType(),target,Long.MAX_VALUE,SearchByEdgeType.Order.DESCENDING,Optional.absent());
  final List<Edge> edges=gm.loadEdgeVersions(simpleSearchByEdge).toList().toBlocking().last();
  assertEquals(1,edges.size());
  assertEquals(written1,edges.get(0));
}
