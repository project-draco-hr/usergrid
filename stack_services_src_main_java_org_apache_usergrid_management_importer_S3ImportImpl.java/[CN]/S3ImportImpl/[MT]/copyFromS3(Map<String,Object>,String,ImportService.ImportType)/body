{
  Map<String,Object> properties=(Map<String,Object>)importInfo.get("properties");
  Map<String,Object> storage_info=(Map<String,Object>)properties.get("storage_info");
  String bucketName=(String)storage_info.get("bucket_location");
  String accessId=(String)storage_info.get("s3_access_id");
  String secretKey=(String)storage_info.get("s3_key");
  Properties overrides=new Properties();
  overrides.setProperty("s3" + ".identity",accessId);
  overrides.setProperty("s3" + ".credential",secretKey);
  final Iterable<? extends Module> MODULES=ImmutableSet.of(new JavaUrlHttpCommandExecutorServiceModule(),new Log4JLoggingModule(),new NettyPayloadModule());
  BlobStoreContext context=ContextBuilder.newBuilder("s3").credentials(accessId,secretKey).modules(MODULES).overrides(overrides).buildView(BlobStoreContext.class);
  try {
    blobStore=context.getBlobStore();
    PageSet<? extends StorageMetadata> pageSet=blobStore.list(bucketName,new ListContainerOptions().recursive());
    Iterator itr=pageSet.iterator();
    while (itr.hasNext()) {
      String fname=((MutableBlobMetadata)itr.next()).getName();
switch (type) {
case COLLECTION:
        if (fname.contains(filename)) {
          copyFile(bucketName,fname);
          i++;
        }
      break;
case APPLICATION:
    if (fname.matches(filename + "[0-9]+\\.json")) {
      copyFile(bucketName,fname);
      i++;
    }
  break;
case ORGANIZATION:
if (fname.matches(filename + "[-a-zA-Z0-9]+\\.[0-9]+\\.json")) {
  copyFile(bucketName,fname);
  i++;
}
break;
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
return files;
}
