{
  logger.debug("copyFileFromS3(): copying file={} type={}",filenamePrefix,type.toString());
  ArrayList<File> files=new ArrayList<>();
  Map<String,Object> properties=(Map<String,Object>)importInfo.get("properties");
  Map<String,Object> storage_info=(Map<String,Object>)properties.get("storage_info");
  String bucketName=(String)storage_info.get("bucket_location");
  String accessId=(String)storage_info.get("s3_access_id");
  String secretKey=(String)storage_info.get("s3_key");
  Properties overrides=new Properties();
  overrides.setProperty("s3" + ".identity",accessId);
  overrides.setProperty("s3" + ".credential",secretKey);
  final Iterable<? extends Module> MODULES=ImmutableSet.of(new JavaUrlHttpCommandExecutorServiceModule(),new Log4JLoggingModule(),new NettyPayloadModule());
  BlobStoreContext context=ContextBuilder.newBuilder("s3").credentials(accessId,secretKey).modules(MODULES).overrides(overrides).buildView(BlobStoreContext.class);
  try {
    BlobStore blobStore=context.getBlobStore();
    PageSet<? extends StorageMetadata> pageSet=blobStore.list(bucketName,new ListContainerOptions().recursive());
    logger.debug("   Found {} files in bucket {}",pageSet.size(),bucketName);
    Iterator itr=pageSet.iterator();
    while (itr.hasNext()) {
      String blobStoreFileName=((MutableBlobMetadata)itr.next()).getName();
      ParsedFileName pfn=new ParsedFileName(blobStoreFileName);
switch (type) {
case COLLECTION:
{
          List<String> errors=new ArrayList<>();
          if (pfn.organizationName == null) {
            errors.add("Filename does not specify organization name");
          }
          if (pfn.applicationName == null) {
            errors.add("Filename does not specify application name");
          }
          if (pfn.collectionName == null) {
            errors.add("Filename does not specify collection name");
          }
 else           if (!pfn.collectionName.equals(importInfo.get("collectionName"))) {
            errors.add("Collection name in input file should be " + pfn.collectionName);
          }
          if (!errors.isEmpty()) {
            throw new IllegalArgumentException("Input errors " + errors.toString());
          }
          files.add(copyFile(blobStore,bucketName,blobStoreFileName));
          break;
        }
case APPLICATION:
{
        List<String> errors=new ArrayList<>();
        if (pfn.organizationName == null) {
          errors.add("Filename does not specify organization name");
        }
        if (pfn.applicationName == null) {
          errors.add("Filename does not specify application name");
        }
        if (!errors.isEmpty()) {
          throw new IllegalArgumentException("Input errors " + errors.toString());
        }
        files.add(copyFile(blobStore,bucketName,blobStoreFileName));
        break;
      }
case ORGANIZATION:
{
      List<String> errors=new ArrayList<>();
      if (pfn.organizationName == null) {
        errors.add("Filename does not specify organization name");
      }
      if (!errors.isEmpty()) {
        throw new IllegalArgumentException("Input errors " + errors.toString());
      }
      files.add(copyFile(blobStore,bucketName,blobStoreFileName));
      break;
    }
default :
{
    throw new IllegalArgumentException("Unrecognized import type " + type.toString());
  }
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
logger.debug("   Returning {} files",files.size());
return files;
}
