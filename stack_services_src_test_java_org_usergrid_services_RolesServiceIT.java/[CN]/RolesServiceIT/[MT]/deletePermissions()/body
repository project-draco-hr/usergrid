{
  UUID applicationId=createApplication("testOrganization","deletePermissions");
  assertNotNull(applicationId);
  createAndTestRoles(applicationId,ServiceAction.PUT,"manager","Manager Title",600000l);
  createAndTestPermission(applicationId,ServiceAction.PUT,"manager","access:/**");
  createAndTestPermission(applicationId,ServiceAction.PUT,"manager","access:/places/**");
  createAndTestPermission(applicationId,ServiceAction.PUT,"manager","access:/faces/names/**");
  ServiceManager sm=setup.getSmf().getServiceManager(applicationId);
  assertNotNull(sm);
  EntityManager em=sm.getEntityManager();
  assertNotNull(em);
  Query query=new Query();
  query.setPermissions(Collections.singletonList("access:/places/**"));
  ServiceResults results=invokeService(sm,ServiceAction.DELETE,null,"roles","manager","permissions",query);
  Set<String> data=(Set<String>)results.getData();
  assertTrue(data.contains("access:/**"));
  assertTrue(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
  Set<String> permissions=em.getRolePermissions("manager");
  assertTrue(permissions.contains("access:/**"));
  assertTrue(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
  query=new Query();
  query.setPermissions(Collections.singletonList("access:/faces/names/**"));
  results=invokeService(sm,ServiceAction.DELETE,null,"roles","manager","permissions",query);
  data=(Set<String>)results.getData();
  assertTrue(data.contains("access:/**"));
  assertFalse(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
  permissions=em.getRolePermissions("manager");
  assertTrue(permissions.contains("access:/**"));
  assertFalse(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
  query=new Query();
  query.setPermissions(Collections.singletonList("access:/**"));
  results=invokeService(sm,ServiceAction.DELETE,null,"roles","manager","permissions",query);
  data=(Set<String>)results.getData();
  assertFalse(data.contains("access:/**"));
  assertFalse(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
  permissions=em.getRolePermissions("manager");
  assertFalse(permissions.contains("access:/**"));
  assertFalse(data.contains("access:/faces/names/**"));
  assertFalse(data.contains("access:/places/**"));
}
