{
  Preconditions.checkNotNull(entityId,"entityId cannot be null");
  Preconditions.checkArgument(limit > 0,"limit must be > 0");
  SearchResponse searchResponse;
  List<CandidateResult> candidates=new ArrayList<>();
  final ParsedQuery parsedQuery=ParsedQueryBuilder.build("select *");
  final SearchRequestBuilder srb=searchRequestBuilderStrategyV2.getBuilder();
  FilterBuilder termFilter=FilterBuilders.termFilter(IndexingUtils.ENTITY_ID_FIELDNAME,IndexingUtils.idString(entityId));
  srb.setPostFilter(termFilter);
  if (logger.isDebugEnabled()) {
    logger.debug("Searching for edge index (read alias): {}\n  nodeId: {},\n   query: {} ",this.alias.getReadAlias(),entityId,srb);
  }
  try {
    Timer.Context timeSearch=searchTimer.time();
    searchResponse=srb.setScroll(new TimeValue(6000)).setSize(100).execute().actionGet();
    while (true) {
      candidates=aggregateScrollResults(candidates,searchResponse);
      searchResponse=searchRequestBuilderStrategyV2.getScrollBuilder(searchResponse.getScrollId()).setScroll(new TimeValue(6000)).execute().actionGet();
      if (searchResponse.getHits().getHits().length == 0) {
        break;
      }
    }
    timeSearch.stop();
  }
 catch (  Throwable t) {
    logger.error("Unable to communicate with Elasticsearch",t);
    failureMonitor.fail("Unable to execute batch",t);
    throw t;
  }
  failureMonitor.success();
  return new CandidateResults(candidates,parsedQuery.getSelectFieldMappings());
}
