{
  ValidationUtils.validateApplicationScope(scope);
  Preconditions.checkNotNull(nodeIds,"nodeIds cannot be null");
  final ColumnFamilyQuery<ScopedRowKey<ApplicationScope,Id>,Boolean> query=keyspace.prepareQuery(GRAPH_DELETE).setConsistencyLevel(fig.getReadCL());
  final List<ScopedRowKey<ApplicationScope,Id>> keys=new ArrayList<ScopedRowKey<ApplicationScope,Id>>(nodeIds.size());
  final Map<Id,Long> versions=new HashMap<>(nodeIds.size());
  for (  final Edge edge : nodeIds) {
    keys.add(ScopedRowKey.fromKey(scope,edge.getSourceNode()));
    keys.add(ScopedRowKey.fromKey(scope,edge.getTargetNode()));
  }
  try {
    final Rows<ScopedRowKey<ApplicationScope,Id>,Boolean> results=query.getRowSlice(keys).withColumnSlice(Collections.singletonList(COLUMN_NAME)).execute().getResult();
    for (    Row<ScopedRowKey<ApplicationScope,Id>,Boolean> row : results) {
      Column<Boolean> column=row.getColumns().getColumnByName(COLUMN_NAME);
      if (column != null) {
        versions.put(row.getKey().getKey(),column.getLongValue());
      }
    }
  }
 catch (  ConnectionException e) {
    throw new GraphRuntimeException("Unable to execute multiget for all max versions",e);
  }
  return versions;
}
