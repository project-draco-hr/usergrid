{
  final ApplicationScope scope=new ApplicationScopeImpl(IdGenerator.createId("application"));
  final DirectedEdgeMeta directedEdgeMeta=DirectedEdgeMeta.fromSourceNode(IdGenerator.createId("source"),"test");
  final ShardGroupCompaction shardGroupCompaction=mock(ShardGroupCompaction.class);
  final Shard minShard=new Shard(0,0,true);
  final long delta=10000;
  final Iterator<Shard> noShards=Collections.singleton(minShard).iterator();
  ShardEntryGroupIterator entryGroupIterator=new ShardEntryGroupIterator(noShards,delta,shardGroupCompaction,scope,directedEdgeMeta);
  assertTrue("Root shard always present",entryGroupIterator.hasNext());
  ShardEntryGroup group=entryGroupIterator.next();
  assertNotNull("Group returned",group);
  verify(shardGroupCompaction).evaluateShardGroup(same(scope),same(directedEdgeMeta),eq(group));
  Collection<Shard> readShards=group.getReadShards();
  assertEquals("Min shard present",1,readShards.size());
  assertTrue("Min shard present",readShards.contains(minShard));
  Collection<Shard> writeShards=group.getWriteShards(0);
  assertEquals("Min shard present",1,writeShards.size());
  assertTrue("Min shard present",writeShards.contains(minShard));
  writeShards=group.getWriteShards(Long.MAX_VALUE);
  assertEquals("Min shard present",1,writeShards.size());
  assertTrue("Min shard present",writeShards.contains(minShard));
}
