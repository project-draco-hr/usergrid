{
  final Shard shardGroup1Shard1=new Shard(0,0,true);
  final Shard shardGroup1Shard2=new Shard(10000,100,false);
  final Shard shardGroup1Shard3=new Shard(20000,200,false);
  final Shard shardGroup2Shard1=new Shard(30000,300,true);
  final Shard shardGroup2Shard2=new Shard(40000,400,false);
  final Shard shardGroup3Shard1=new Shard(50000,500,true);
  final Shard shardGroup3Shard2=new Shard(60000,600,false);
  final Shard shardGroup3Shard3=new Shard(70000,700,false);
  final long delta=10000;
  final Iterator<Shard> noShards=Arrays.asList(shardGroup3Shard3,shardGroup3Shard2,shardGroup3Shard1,shardGroup2Shard2,shardGroup2Shard1,shardGroup1Shard3,shardGroup1Shard2,shardGroup1Shard1).iterator();
  ShardEntryGroupIterator entryGroupIterator=new ShardEntryGroupIterator(noShards,delta);
  assertTrue("max group present",entryGroupIterator.hasNext());
  ShardEntryGroup group=entryGroupIterator.next();
  assertNotNull("Group returned",group);
  Collection<Shard> readShards=group.getReadShards();
  assertEquals("Min shard present",3,readShards.size());
  assertTrue("shardGroup3Shard3 shard present",readShards.contains(shardGroup3Shard3));
  assertTrue("shardGroup3Shard2 shard present",readShards.contains(shardGroup3Shard2));
  assertTrue("shardGroup3Shard1 shard present",readShards.contains(shardGroup3Shard1));
  Collection<Shard> writeShards=group.getWriteShards(0);
  assertEquals("Min shard present",3,writeShards.size());
  assertTrue("shardGroup3Shard3 shard present",writeShards.contains(shardGroup3Shard3));
  assertTrue("shardGroup3Shard2 shard present",writeShards.contains(shardGroup3Shard2));
  assertTrue("shardGroup3Shard1 shard present",writeShards.contains(shardGroup3Shard1));
  assertTrue("middle group present",entryGroupIterator.hasNext());
  group=entryGroupIterator.next();
  assertNotNull("Group returned",group);
  readShards=group.getReadShards();
  assertEquals("Min shard present",2,readShards.size());
  assertTrue("shardGroup2Shard1 shard present",readShards.contains(shardGroup2Shard1));
  assertTrue("shardGroup2Shard2 shard present",readShards.contains(shardGroup2Shard2));
  writeShards=group.getWriteShards(0);
  assertEquals("Min shard present",2,writeShards.size());
  assertTrue("shardGroup2Shard1 shard present",writeShards.contains(shardGroup2Shard1));
  assertTrue("shardGroup2Shard2 shard present",writeShards.contains(shardGroup2Shard2));
  assertTrue("min group present",entryGroupIterator.hasNext());
  group=entryGroupIterator.next();
  assertNotNull("Group returned",group);
  readShards=group.getReadShards();
  assertEquals("Min shard present",3,readShards.size());
  assertTrue("shardGroup1Shard3 shard present",readShards.contains(shardGroup1Shard3));
  assertTrue("shardGroup1Shard2 shard present",readShards.contains(shardGroup1Shard2));
  assertTrue("shardGroup1Shard1 shard present",readShards.contains(shardGroup1Shard1));
  writeShards=group.getWriteShards(0);
  assertEquals("Min shard present",3,writeShards.size());
  assertTrue("shardGroup1Shard3 shard present",writeShards.contains(shardGroup1Shard3));
  assertTrue("shardGroup1Shard2 shard present",writeShards.contains(shardGroup1Shard2));
  assertTrue("shardGroup1Shard1 shard present",writeShards.contains(shardGroup1Shard1));
}
