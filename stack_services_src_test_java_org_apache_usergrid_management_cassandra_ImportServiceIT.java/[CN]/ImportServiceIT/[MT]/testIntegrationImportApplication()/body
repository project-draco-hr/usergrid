{
  createEntities();
  createTestConnections();
  createTestPermissions();
  ExportService exportService=setup.getExportService();
  S3Export s3Export=new S3ExportImpl();
  HashMap<String,Object> payload=payloadBuilder();
  payload.put("organizationId",organization.getUuid());
  payload.put("applicationId",applicationId);
  UUID exportUUID=exportService.schedule(payload);
  JobData jobData=jobExportDataCreator(payload,exportUUID,s3Export);
  JobExecution jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  exportService.doExport(jobExecution);
  while (!exportService.getState(exportUUID).equals("FINISHED")) {
    ;
  }
  S3Import s3Import=new S3ImportImpl();
  ImportService importService=setup.getImportService();
  UUID importUUID=importService.schedule(payload);
  jobData=jobImportDataCreator(payload,importUUID,s3Import);
  jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  importService.doImport(jobExecution);
  while (!importService.getState(importUUID).equals("FINISHED")) {
    ;
  }
  assertThat(importService.getEphemeralFile().size(),is(not(0)));
  Set<String> collections=em.getApplicationCollections();
  Iterator<String> collectionsItr=collections.iterator();
  while (collectionsItr.hasNext()) {
    String collectionName=collectionsItr.next();
    Results collection=em.getCollection(applicationId,collectionName,null,Results.Level.ALL_PROPERTIES);
    List<Entity> entities=collection.getEntities();
    for (    Entity entity : entities) {
      Long created=entity.getCreated();
      Long modified=entity.getModified();
      assertThat(created,not(equalTo(modified)));
      EntityRef er;
      Map<Object,Object> dictionaries;
      if (collectionName.equals("roles")) {
        if (entity.getName().equalsIgnoreCase("admin")) {
          er=em.getRef(entity.getUuid());
          dictionaries=em.getDictionaryAsMap(er,"permissions");
          assertThat(dictionaries.size(),is(0));
        }
 else {
          er=em.getRef(entity.getUuid());
          dictionaries=em.getDictionaryAsMap(er,"permissions");
          assertThat(dictionaries.size(),is(not(0)));
        }
      }
    }
    if (collectionName.equals("users")) {
      Results r;
      List<ConnectionRef> connections;
      r=em.getConnectedEntities(entities.get(0).getUuid(),"related",null,Results.Level.IDS);
      connections=r.getConnections();
      assertNotNull(connections);
      r=em.getConnectedEntities(entities.get(1).getUuid(),"related",null,Results.Level.IDS);
      connections=r.getConnections();
      assertNotNull(connections);
    }
  }
}
