{
  createEntites();
  createTestConnections();
  ExportService exportService=setup.getExportService();
  S3Export s3Export=new S3ExportImpl();
  HashMap<String,Object> payload=payloadBuilder();
  payload.put("organizationId",organization.getUuid());
  payload.put("applicationId",applicationId);
  payload.put("collectionName","users");
  UUID exportUUID=exportService.schedule(payload);
  JobData jobData=jobExportDataCreator(payload,exportUUID,s3Export);
  JobExecution jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  exportService.doExport(jobExecution);
  while (!exportService.getState(exportUUID).equals("FINISHED")) {
    ;
  }
  S3Import s3Import=new S3ImportImpl();
  ImportService importService=setup.getImportService();
  UUID importUUID=importService.schedule(payload);
  jobData=jobImportDataCreator(payload,importUUID,s3Import);
  jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  importService.doImport(jobExecution);
  while (!importService.getState(importUUID).equals("FINISHED")) {
    ;
  }
  assertThat(importService.getEphemeralFile().size(),is(not(0)));
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Results collections=em.getCollection(applicationId,"users",null,Results.Level.ALL_PROPERTIES);
  List<Entity> entities=collections.getEntities();
  for (  Entity entity : entities) {
    Long created=entity.getCreated();
    Long modified=entity.getModified();
    assertNotEquals(created,modified);
  }
  Results r;
  List<ConnectionRef> connections;
  for (int i=0; i < 2; i++) {
    r=em.getConnectedEntities(entities.get(i).getUuid(),"related",null,Results.Level.IDS);
    connections=r.getConnections();
    assertNotNull(connections);
  }
  EntityRef er;
  Map<Object,Object> dictionaries1, dictionaries2;
  for (int i=0; i < 3; i++) {
    er=em.getRef(entities.get(i).getUuid());
    dictionaries1=em.getDictionaryAsMap(er,"connected_types");
    dictionaries2=em.getDictionaryAsMap(er,"connecting_types");
    if (i == 2) {
      assertThat(dictionaries1.size(),is(0));
      assertThat(dictionaries2.size(),is(0));
    }
 else {
      assertThat(dictionaries1.size(),is(not(0)));
      assertThat(dictionaries2.size(),is(not(0)));
    }
  }
}
