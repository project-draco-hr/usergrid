{
  Map<String,String> data=hashMap("name",ROLE);
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,data));
  assertNull(node.get("error"));
  assertEquals(ROLE,getEntity(node,0).get("name").asText());
  reindex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/roles/" + ROLE + "/users/"+ USER).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertNull(node.get("error"));
  reindex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + USER + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertEquals(ROLE,getEntity(node,0).get("name").asText());
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + USER + "/roles/"+ ROLE).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  reindex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/users/" + USER + "/roles").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class));
  assertNull(getEntity(node,0));
}
