{
  UUID id=UUIDUtils.newTimeUUID();
  String groupPath="groupPath" + id;
  Map<String,String> data=hashMap("type","group").map("path",groupPath);
  JsonNode node=mapper.readTree(resource().path("/test-organization/test-app/groups").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,data));
  assertNull(node.get("error"));
  reindex("test-organization","test-app");
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + groupPath + "/users/"+ USER).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class));
  assertNull(node.get("error"));
  reindex("test-organization","test-app");
  Map<String,Group> groups=client.getGroupsForUser(USER);
  assertNotNull(groups.get(groupPath));
  node=mapper.readTree(resource().path("/test-organization/test-app/groups/" + groupPath + "/users/"+ USER).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).delete(String.class));
  assertNull(node.get("error"));
  reindex("test-organization","test-app");
  groups=client.getGroupsForUser(USER);
  assertNull(groups.get(groupPath));
}
