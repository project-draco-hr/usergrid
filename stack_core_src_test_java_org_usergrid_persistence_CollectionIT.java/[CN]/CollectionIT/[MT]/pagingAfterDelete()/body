{
  UUID applicationId=createApplication("testOrganization","pagingAfterDelete");
  assertNotNull(applicationId);
  EntityManager em=emf.getEntityManager(applicationId);
  assertNotNull(em);
  int size=20;
  List<UUID> entityIds=new ArrayList<UUID>();
  for (int i=0; i < size; i++) {
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("name","object" + i);
    Entity created=em.create("objects",properties);
    entityIds.add(created.getUuid());
  }
  Query query=new Query();
  query.setLimit(50);
  Results r=em.searchCollection(em.getApplicationRef(),"objects",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  assertEquals(size,r.size());
  for (int i=0; i < size; i++) {
    assertEquals(entityIds.get(i),r.getEntities().get(i).getUuid());
  }
  for (int i=5; i < 10; i++) {
    Entity entity=r.getEntities().get(i);
    em.delete(entity);
    entityIds.remove(entity.getUuid());
  }
  query=new Query();
  r=em.searchCollection(em.getApplicationRef(),"objects",query);
  assertEquals(10,r.size());
  for (int i=0; i < 10; i++) {
    assertEquals(entityIds.get(i),r.getEntities().get(i).getUuid());
  }
  query=new Query();
  query.setCursor(r.getCursor());
  r=em.searchCollection(em.getApplicationRef(),"objects",query);
  assertEquals(5,r.size());
  for (int i=10; i < 15; i++) {
    assertEquals(entityIds.get(i),r.getEntities().get(i - 10).getUuid());
  }
}
