{
  UUID applicationId=setup.createApplication("testOrganization","orQuery");
  assertNotNull(applicationId);
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  assertNotNull(em);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("keywords","blah,test,game");
  properties.put("title","Solitaire");
  Entity game1=em.create("orquerygame",properties);
  assertNotNull(game1);
  properties=new LinkedHashMap<String,Object>();
  properties.put("keywords","random,test");
  properties.put("title","Hearts");
  Entity game2=em.create("orquerygame",properties);
  assertNotNull(game2);
  Query query=Query.fromQL("select * where keywords contains 'Random' OR keywords contains 'Game'");
  Results r=em.searchCollection(em.getApplicationRef(),"orquerygames",query);
  assertEquals(2,r.size());
  Entity returned=r.getEntities().get(0);
  assertEquals(game2.getUuid(),returned.getUuid());
  returned=r.getEntities().get(1);
  assertEquals(game1.getUuid(),returned.getUuid());
  query=Query.fromQL("select * where( keywords contains 'Random' OR keywords contains 'Game')");
  r=em.searchCollection(em.getApplicationRef(),"orquerygames",query);
  assertEquals(2,r.size());
  returned=r.getEntities().get(0);
  assertEquals(game2.getUuid(),returned.getUuid());
  returned=r.getEntities().get(1);
  assertEquals(game1.getUuid(),returned.getUuid());
  query=Query.fromQL("select * where keywords contains 'blah' OR title contains 'blah'");
  r=em.searchCollection(em.getApplicationRef(),"orquerygames",query);
  assertEquals(1,r.size());
  returned=r.getEntities().get(0);
  assertEquals(game1.getUuid(),returned.getUuid());
  query=Query.fromQL("select * where  title contains 'blah' OR keywords contains 'blah'");
  r=em.searchCollection(em.getApplicationRef(),"orquerygames",query);
  assertEquals(1,r.size());
  returned=r.getEntities().get(0);
  assertEquals(game1.getUuid(),returned.getUuid());
}
