{
  UUID applicationId=createApplication("testOrganization","testCollection");
  assertNotNull(applicationId);
  EntityManager em=emf.getEntityManager(applicationId);
  assertNotNull(em);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  Entity user=em.create("user",properties);
  assertNotNull(user);
  properties=new LinkedHashMap<String,Object>();
  properties.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  properties.put("verb","tweet");
  properties.put("content","I ate a sammich");
  properties.put("ordinal",3);
  Entity activity=em.create("activity",properties);
  assertNotNull(activity);
  LOG.info("" + activity.getClass());
  LOG.info(JsonUtils.mapToFormattedJsonString(activity));
  activity=em.get(activity.getUuid());
  LOG.info("" + activity.getClass());
  LOG.info(JsonUtils.mapToFormattedJsonString(activity));
  em.addToCollection(user,"activities",activity);
  properties=new LinkedHashMap<String,Object>();
  properties.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  properties.put("verb","tweet2");
  properties.put("content","I ate a pickle");
  properties.put("ordinal",2);
  Entity activity2=em.create("activity",properties);
  activity2=em.get(activity2.getUuid());
  em.addToCollection(user,"activities",activity2);
  properties=new LinkedHashMap<String,Object>();
  properties.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  properties.put("verb","tweet2");
  properties.put("content","I ate an apple");
  properties.put("ordinal",1);
  Entity activity3=em.create("activity",properties);
  activity3=em.get(activity3.getUuid());
  em.addToCollection(user,"activities",activity3);
  Query query=new Query();
  Results r=em.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  query=new Query().addEqualityFilter("verb","tweet2");
  r=em.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  query=new Query().addEqualityFilter("verb","tweet2");
  query.addSort("created");
  r=em.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  List<Entity> entities=r.getEntities();
  assertEquals(entities.get(0).getUuid(),activity2.getUuid());
  assertEquals(entities.get(1).getUuid(),activity3.getUuid());
  query=new Query().addEqualityFilter("verb","tweet2");
  query.addSort("ordinal");
  r=em.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  entities=r.getEntities();
  assertEquals(entities.get(0).getUuid(),activity3.getUuid());
  assertEquals(entities.get(1).getUuid(),activity2.getUuid());
  query=new Query();
  query.addSort("content");
  r=em.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  entities=r.getEntities();
  LOG.info(JsonUtils.mapToFormattedJsonString(entities));
  assertEquals(entities.get(0).getUuid(),activity2.getUuid());
  assertEquals(entities.get(1).getUuid(),activity.getUuid());
  assertEquals(entities.get(2).getUuid(),activity3.getUuid());
  query=new Query();
  query.addSort("verb");
  r=em.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  query=new Query();
  query.addSort("ordinal");
  r=em.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  entities=r.getEntities();
  assertEquals(entities.get(0).getUuid(),activity3.getUuid());
  assertEquals(entities.get(1).getUuid(),activity2.getUuid());
  assertEquals(entities.get(2).getUuid(),activity.getUuid());
  query=new Query().addEqualityFilter("ordinal",2);
  r=em.searchCollection(user,"activities",query);
  assertEquals(1,r.size());
  query=new Query().addEqualityFilter("ordinal",2);
  query.addSort("ordinal");
  r=em.searchCollection(user,"activities",query);
  assertEquals(1,r.size());
}
