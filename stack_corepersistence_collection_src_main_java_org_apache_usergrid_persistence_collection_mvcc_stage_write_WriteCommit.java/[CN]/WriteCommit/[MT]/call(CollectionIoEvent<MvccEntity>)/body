{
  final MvccEntity entity=ioEvent.getEvent();
  ValidationUtils.verifyMvccEntityWithEntity(entity);
  final Id entityId=entity.getId();
  final UUID version=entity.getVersion();
  final CollectionScope collectionScope=ioEvent.getEntityCollection();
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.COMMITTED);
  MutationBatch logMutation=logEntryStrat.write(collectionScope,startEntry);
  MutationBatch entityMutation=entityStrat.write(collectionScope,entity);
  logMutation.mergeShallow(entityMutation);
  for (  Field field : entity.getEntity().get().getFields()) {
    if (field.isUnique()) {
      UniqueValue written=new UniqueValueImpl(ioEvent.getEntityCollection(),field,entity.getId(),entity.getVersion());
      MutationBatch mb=uniqueValueStrat.write(written);
      logMutation.mergeShallow(mb);
    }
  }
  try {
    logMutation.execute();
  }
 catch (  ConnectionException e) {
    LOG.error("Failed to execute write asynchronously ",e);
    throw new WriteCommitException("Failed to execute write asynchronously ",e);
  }
  return entity.getEntity().get();
}
