{
  final MvccEntity mvccEntity=ioEvent.getEvent();
  MvccValidationUtils.verifyMvccEntityWithEntity(mvccEntity);
  final Id entityId=mvccEntity.getId();
  final UUID version=mvccEntity.getVersion();
  final CollectionScope collectionScope=ioEvent.getEntityCollection();
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.COMMITTED,MvccLogEntry.State.COMPLETE);
  MutationBatch logMutation=logEntryStrat.write(collectionScope,startEntry);
  MutationBatch entityMutation=entityStrat.write(collectionScope,mvccEntity);
  logMutation.mergeShallow(entityMutation);
  for (  Field field : mvccEntity.getEntity().get().getFields()) {
    if (field.isUnique()) {
      UniqueValue written=new UniqueValueImpl(ioEvent.getEntityCollection(),field,mvccEntity.getId(),mvccEntity.getVersion());
      MutationBatch mb=uniqueValueStrat.write(written);
      logMutation.mergeShallow(mb);
    }
  }
  try {
    logMutation.execute();
  }
 catch (  ConnectionException e) {
    LOG.error("Failed to execute write asynchronously ",e);
    throw new WriteCommitException(mvccEntity.getEntity().get(),collectionScope,"Failed to execute write asynchronously ",e);
  }
  return mvccEntity.getEntity().get();
}
