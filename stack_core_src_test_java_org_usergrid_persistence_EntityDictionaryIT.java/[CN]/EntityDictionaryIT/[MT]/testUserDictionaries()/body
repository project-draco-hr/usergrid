{
  LOG.info("EntityDictionaryIT.testUserDictionaries");
  UUID applicationId=createApplication("testOrganization","testUserDictionaries");
  assertNotNull(applicationId);
  EntityManager em=emf.getEntityManager(applicationId);
  assertNotNull(em);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  Entity user=em.create("user",properties);
  assertNotNull(user);
  CredentialsInfo credentials=new CredentialsInfo();
  credentials.setSecret("test");
  credentials.setEncrypted(false);
  credentials.setRecoverable(true);
  credentials.setCryptoChain(new String[]{"plaintext"});
  em.addToDictionary(user,"credentials","plaintext",credentials);
  Object o=em.getDictionaryElementValue(user,"credentials","plaintext");
  LOG.info(JsonUtils.mapToFormattedJsonString(o));
  assertEquals(CredentialsInfo.class,o.getClass());
  CredentialsInfo returned=(CredentialsInfo)o;
  assertEquals(credentials.getSecret(),returned.getSecret());
  assertEquals(credentials.getEncrypted(),returned.getEncrypted());
  assertEquals(credentials.getRecoverable(),returned.getRecoverable());
  assertArrayEquals(credentials.getCryptoChain(),returned.getCryptoChain());
  credentials=new CredentialsInfo();
  credentials.setEncrypted(true);
  credentials.setRecoverable(false);
  credentials.setSecret("salt");
  credentials.setCryptoChain(new String[]{"sha-1"});
  em.addToDictionary(user,"credentials","encrypted",credentials);
  o=em.getDictionaryElementValue(user,"credentials","encrypted");
  LOG.info(JsonUtils.mapToFormattedJsonString(o));
  assertEquals(CredentialsInfo.class,o.getClass());
  returned=(CredentialsInfo)o;
  assertEquals(credentials.getSecret(),returned.getSecret());
  assertEquals(credentials.getEncrypted(),returned.getEncrypted());
  assertEquals(credentials.getRecoverable(),returned.getRecoverable());
  assertArrayEquals(credentials.getCryptoChain(),returned.getCryptoChain());
}
