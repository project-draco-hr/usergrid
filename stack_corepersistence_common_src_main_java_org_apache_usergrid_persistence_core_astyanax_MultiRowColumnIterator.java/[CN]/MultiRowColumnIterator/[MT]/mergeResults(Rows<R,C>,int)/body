{
  final List<T> mergedResults=new ArrayList<>(maxSize);
  for (  final R key : result.getKeys()) {
    final ColumnList<C> columns=result.getRow(key).getColumns();
    for (    final Column<C> column : columns) {
      final T returnedValue=columnParser.parseColumn(column);
      int searchIndex=Collections.binarySearch(mergedResults,returnedValue,comparator);
      if (searchIndex > -1) {
        continue;
      }
      final int insertIndex=(searchIndex + 1) * -1;
      if (insertIndex >= maxSize) {
        continue;
      }
      mergedResults.add(insertIndex,returnedValue);
      while (mergedResults.size() > maxSize) {
        mergedResults.remove(mergedResults.size() - 1);
      }
    }
    LOG.trace("Candidate result set size is {}",mergedResults.size());
  }
  return mergedResults;
}
