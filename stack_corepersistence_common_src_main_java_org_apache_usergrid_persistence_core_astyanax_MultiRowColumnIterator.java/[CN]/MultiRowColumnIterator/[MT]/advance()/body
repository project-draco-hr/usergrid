{
  if (logger.isTraceEnabled())   logger.trace("Advancing multi row column iterator");
  final boolean skipFirstColumn=startColumn != null;
  final int selectSize=skipFirstColumn ? pageSize + 1 : pageSize;
  final RangeBuilder rangeBuilder=new RangeBuilder();
  if (currentShardIterator == null) {
    if (ascending) {
      Collections.reverse(rowKeysWithShardEnd);
    }
    currentShardIterator=rowKeysWithShardEnd.iterator();
  }
  if (currentShard == null) {
    if (logger.isTraceEnabled()) {
      logger.trace(Thread.currentThread().getName() + " - currentShard: {}",currentShard);
    }
    currentShard=currentShardIterator.next();
    if (logger.isTraceEnabled()) {
      logger.trace(Thread.currentThread().getName() + " - all shards when starting: {}",rowKeysWithShardEnd);
      logger.trace(Thread.currentThread().getName() + " - initializing iterator with shard: {}",currentShard);
    }
  }
  if (logger.isTraceEnabled()) {
    logger.trace(Thread.currentThread().getName() + " - startColumn={}",startColumn);
  }
  if (startColumn == null) {
    columnSearch.buildRange(rangeBuilder);
  }
 else {
    columnSearch.buildRange(rangeBuilder,startColumn);
  }
  rangeBuilder.setLimit(selectSize);
  if (logger.isTraceEnabled())   logger.trace("Executing cassandra query with shard {}",currentShard);
  final RowSliceQuery<R,C> query=keyspace.prepareQuery(cf).setConsistencyLevel(consistencyLevel).getKeySlice((R)currentShard.getRowKey()).withColumnRange(rangeBuilder.build());
  final Rows<R,C> result;
  try {
    result=query.execute().getResult();
  }
 catch (  ConnectionException e) {
    throw new RuntimeException("Unable to connect to casandra",e);
  }
  final List<T> mergedResults;
  skipSize=0;
  mergedResults=processResults(result,selectSize);
  if (logger.isTraceEnabled()) {
    logger.trace("skipped amount: {}",skipSize);
  }
  final int size=mergedResults.size();
  if (logger.isTraceEnabled()) {
    logger.trace(Thread.currentThread().getName() + " - current shard: {}, retrieved size: {}",currentShard,size);
    logger.trace(Thread.currentThread().getName() + " - selectSize={}, size={}, ",selectSize,size);
  }
  moreToReturn=size == selectSize;
  if (selectSize == 1001 && mergedResults.size() == 1000) {
    moreToReturn=true;
  }
  if (skipSize == selectSize || skipSize == selectSize - 1) {
    moreToReturn=true;
  }
  if (size > 0) {
    final T firstResult=mergedResults.get(0);
    if (columnSearch.skipFirst(firstResult) || (skipFirstColumn && comparator.compare(startColumn,firstResult) == 0)) {
      if (logger.isTraceEnabled()) {
        logger.trace("removing an entry");
      }
      mergedResults.remove(0);
    }
  }
  if (moreToReturn && mergedResults.size() > 0) {
    startColumn=mergedResults.get(mergedResults.size() - 1);
  }
  currentColumnIterator=mergedResults.iterator();
  if (size == 0 && currentShardIterator.hasNext()) {
    hasNext();
  }
  if (logger.isTraceEnabled()) {
    logger.trace(Thread.currentThread().getName() + " - currentColumnIterator.hasNext()={}, " + "moreToReturn={}, currentShardIterator.hasNext()={}",currentColumnIterator.hasNext(),moreToReturn,currentShardIterator.hasNext());
  }
}
