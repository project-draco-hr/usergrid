{
  this.lastReturnCount=0;
  final boolean skipFirstColumn=startColumn != null;
  final int selectSize=skipFirstColumn ? pageSize + 1 : pageSize;
  final RangeBuilder rangeBuilder=new RangeBuilder();
  if (startColumn == null) {
    columnSearch.buildRange(rangeBuilder);
  }
 else {
    columnSearch.buildRange(rangeBuilder,startColumn);
  }
  rangeBuilder.setLimit(selectSize);
  final RowSliceQuery<R,C> query=keyspace.prepareQuery(cf).setConsistencyLevel(consistencyLevel).getKeySlice(rowKeys).withColumnRange(rangeBuilder.build());
  final Rows<R,C> result=HystrixCassandra.user(query).getResult();
  final Iterator<T> mergedResults;
  if (containsSingleRowOnly(result)) {
    mergedResults=singleRowResult(result);
  }
 else {
    mergedResults=mergeResults(result,selectSize);
  }
  PushbackIterator<T> iterator=new PushbackIterator<>(mergedResults);
  if (skipFirstColumn && iterator.hasNext()) {
    final T firstResult=iterator.next();
    if (comparator.compare(startColumn,firstResult) != 0) {
      iterator.pushback(firstResult);
    }
  }
  currentColumnIterator=iterator;
  LOG.trace("Finished parsing {} rows for results",rowKeys.size());
}
