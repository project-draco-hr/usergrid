{
  final MarkedEdge edge1=new SimpleMarkedEdge(createId("source1"),"edgeType1",createId("target1"),100,false,false,false);
  final MarkedEdge edge2=new SimpleMarkedEdge(createId("source2"),"edgeType2",createId("target2"),110,false,false,false);
  final Integer query1=10;
  final Integer query2=20;
  final EdgePath<Integer> filter3Path=new EdgePath<>(3,query2,ElasticsearchCursorSerializer.INSTANCE,Optional.absent());
  final EdgePath<MarkedEdge> filter2Path=new EdgePath<>(2,edge2,EdgeCursorSerializer.INSTANCE,Optional.of(filter3Path));
  final EdgePath<Integer> filter1Path=new EdgePath<>(1,query1,ElasticsearchCursorSerializer.INSTANCE,Optional.of(filter2Path));
  final EdgePath<MarkedEdge> filter0Path=new EdgePath<>(0,edge1,EdgeCursorSerializer.INSTANCE,Optional.of(filter1Path));
  ResponseCursor responseCursor=new ResponseCursor(Optional.of(filter0Path));
  final Optional<String> cursor=responseCursor.encodeAsString();
  final RequestCursor requestCursor=new RequestCursor(cursor);
  final Integer parsedQuery2=requestCursor.getCursor(3,ElasticsearchCursorSerializer.INSTANCE);
  assertEquals(query2,parsedQuery2);
  final MarkedEdge parsedEdge2=requestCursor.getCursor(2,EdgeCursorSerializer.INSTANCE);
  assertEquals(edge2,parsedEdge2);
  final Integer parsedQuery1=requestCursor.getCursor(1,ElasticsearchCursorSerializer.INSTANCE);
  assertEquals(query1,parsedQuery1);
  final MarkedEdge parsedEdge1=requestCursor.getCursor(0,EdgeCursorSerializer.INSTANCE);
  assertEquals(edge1,parsedEdge1);
}
