{
  final AtomicLong atomicLong=new AtomicLong();
  final UUID startTime=UUIDGenerator.newTimeUUID();
  final MigrationRelationship<MvccEntitySerializationStrategy> migration=allVersions.getMigrationRelationship(getCurrentSystemVersion());
  final long migrated=migrationDataProvider.getData().subscribeOn(Schedulers.io()).parallel(new Func1<Observable<EntityIdScope>,Observable<Long>>(){
    @Override public Observable<Long> call(    final Observable<EntityIdScope> entityIdScopeObservable){
      return entityIdScopeObservable.flatMap(new Func1<EntityIdScope,Observable<EntityToSaveMessage>>(){
        @Override public Observable<EntityToSaveMessage> call(        final EntityIdScope entityIdScope){
          final CollectionScope currentScope=entityIdScope.getCollectionScope();
          final Iterator<MvccEntity> allVersions=migration.from.loadAscendingHistory(currentScope,entityIdScope.getId(),startTime,100);
          return Observable.create(new Observable.OnSubscribe<EntityToSaveMessage>(){
            @Override public void call(            final Subscriber<? super EntityToSaveMessage> subscriber){
              while (allVersions.hasNext()) {
                final EntityToSaveMessage message=new EntityToSaveMessage(currentScope,allVersions.next());
                subscriber.onNext(message);
              }
              subscriber.onCompleted();
            }
          }
);
        }
      }
).buffer(100).doOnNext(new Action1<List<EntityToSaveMessage>>(){
        @Override public void call(        final List<EntityToSaveMessage> messages){
          atomicLong.addAndGet(messages.size());
          final MutationBatch totalBatch=keyspace.prepareMutationBatch();
          for (          EntityToSaveMessage message : messages) {
            final MutationBatch entityRewrite=migration.to.write(message.scope,message.entity);
            totalBatch.mergeShallow(entityRewrite);
            if (message.entity.getEntity().isPresent()) {
              final Entity entity=message.entity.getEntity().get();
              final Id entityId=entity.getId();
              final UUID version=message.entity.getVersion();
              for (              Field field : EntityUtils.getUniqueFields(message.entity.getEntity().get())) {
                UniqueValue written=new UniqueValueImpl(field,entityId,version);
                MutationBatch mb=uniqueValueSerializationStrategy.write(message.scope,written);
                totalBatch.mergeShallow(mb);
              }
            }
          }
          executeBatch(totalBatch,observer,atomicLong);
        }
      }
).reduce(0l,new Func2<Long,List<EntityToSaveMessage>,Long>(){
        @Override public Long call(        final Long aLong,        final List<EntityToSaveMessage> ids){
          return aLong + ids.size();
        }
      }
);
    }
  }
).toBlocking().last();
  observer.update(getVersion(),"Finished for this step.  Migrated " + migrated + "entities total. ");
}
