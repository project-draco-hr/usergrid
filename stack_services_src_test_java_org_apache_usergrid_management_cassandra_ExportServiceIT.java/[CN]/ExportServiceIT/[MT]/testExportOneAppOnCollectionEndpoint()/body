{
  File f=null;
  String orgName="george-organization";
  String appName="testAppCollectionTestNotExported";
  try {
    f=new File("exportOneApp.json");
  }
 catch (  Exception e) {
  }
  f.deleteOnExit();
  UUID appId=setup.getEmf().createApplication(orgName,appName);
  EntityManager em=setup.getEmf().getEntityManager(appId);
  Map<String,Object> userProperties=null;
  Entity[] entity;
  entity=new Entity[1];
  for (int i=0; i < 1; i++) {
    userProperties=new LinkedHashMap<String,Object>();
    userProperties.put("username","junkRealName");
    userProperties.put("email","test" + i + "@anuff.com");
    entity[i]=em.create("user",userProperties);
  }
  S3Export s3Export=new MockS3ExportImpl("exportOneApp.json");
  ExportService exportService=setup.getExportService();
  HashMap<String,Object> payload=payloadBuilder();
  payload.put("organizationId",organization.getUuid());
  payload.put("applicationId",applicationId);
  UUID exportUUID=exportService.schedule(payload);
  JobData jobData=jobDataCreator(payload,exportUUID,s3Export);
  JobExecution jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  exportService.doExport(jobExecution);
  JSONParser parser=new JSONParser();
  org.json.simple.JSONArray a=(org.json.simple.JSONArray)parser.parse(new FileReader(f));
  for (int i=0; i < a.size(); i++) {
    org.json.simple.JSONObject data=(org.json.simple.JSONObject)a.get(i);
    org.json.simple.JSONObject entityData=(JSONObject)data.get("Metadata");
    String entityName=(String)entityData.get("name");
    assertFalse("junkRealName".equals(entityName));
  }
}
