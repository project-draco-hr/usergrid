{
  this.indexBatchBufferProducer=indexBatchBufferProducer;
  this.indexFig=indexFig;
  ValidationUtils.validateApplicationScope(appScope);
  this.applicationScope=appScope;
  this.esProvider=provider;
  this.config=config;
  this.cursorTimeout=config.getQueryCursorTimeout();
  this.indexIdentifier=IndexingUtils.createIndexIdentifier(config,appScope);
  this.alias=indexIdentifier.getAlias();
  this.failureMonitor=new FailureMonitorImpl(config,provider);
  this.aliasCache=indexCache;
  this.addTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"add.timer");
  this.removeAliasTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"remove.alias.timer");
  this.addReadAliasTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"add.read.alias.timer");
  this.addWriteAliasTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"add.write.alias.timer");
  this.mappingTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"create.mapping.timer");
  this.refreshTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"refresh.timer");
  this.searchTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"search.timer");
  this.cursorTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"search.cursor.timer");
  this.getVersionsTimer=metricsFactory.getTimer(EsEntityIndexImpl.class,"get.versions.timer");
  final MapScope mapScope=new MapScopeImpl(appScope.getApplication(),"cursorcache");
  mapManager=mapManagerFactory.createMapManager(mapScope);
}
