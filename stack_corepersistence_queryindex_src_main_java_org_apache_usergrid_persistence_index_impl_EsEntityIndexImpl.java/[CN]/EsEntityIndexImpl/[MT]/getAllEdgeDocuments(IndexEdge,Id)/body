{
  IndexValidationUtils.validateSearchEdge(edge);
  Preconditions.checkNotNull(entityId,"entityId cannot be null");
  SearchResponse searchResponse;
  List<CandidateResult> candidates=new ArrayList<>();
  final int searchLimit=Math.min(100,indexFig.getVersionQueryLimit());
  final QueryBuilder entityQuery=QueryBuilders.termQuery(IndexingUtils.EDGE_NODE_ID_FIELDNAME,IndexingUtils.nodeId(edge.getNodeId()));
  final SearchRequestBuilder srb=searchRequestBuilderStrategyV2.getBuilder().addSort(IndexingUtils.EDGE_TIMESTAMP_FIELDNAME,SortOrder.ASC);
  if (logger.isDebugEnabled()) {
    logger.debug("Searching for edges in (read alias): {}\n  nodeId: {},\n   query: {} ",this.alias.getReadAlias(),entityId,srb);
  }
  try {
    long queryTimestamp=0L;
    QueryBuilder timestampQuery=QueryBuilders.rangeQuery(IndexingUtils.EDGE_TIMESTAMP_FIELDNAME).gte(queryTimestamp);
    QueryBuilder finalQuery=QueryBuilders.boolQuery().must(entityQuery).must(timestampQuery);
    searchResponse=srb.setQuery(finalQuery).setSize(searchLimit).execute().actionGet();
    candidates=aggregateScrollResults(candidates,searchResponse,null);
  }
 catch (  Throwable t) {
    logger.error("Unable to communicate with Elasticsearch",t.getMessage());
    failureMonitor.fail("Unable to execute batch",t);
    throw t;
  }
  failureMonitor.success();
  return new CandidateResults(candidates,Collections.EMPTY_SET);
}
