{
  final EntityCollection context=mock(EntityCollection.class);
  final CollectionEventBus bus=mock(CollectionEventBus.class);
  final MvccLogEntrySerializationStrategy logStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final ArgumentCaptor<MvccLogEntry> logEntry=ArgumentCaptor.forClass(MvccLogEntry.class);
  final MutationBatch mutation=mock(MutationBatch.class);
  when(logStrategy.write(same(context),logEntry.capture())).thenReturn(mutation);
  Result result=new Result();
  final Entity entity=generateEntity();
  EventStart start=new EventStart(context,entity,result);
  StartWrite newStage=new StartWrite(bus,logStrategy);
  newStage.performStage(start);
  ArgumentCaptor<EventVerify> eventVerify=ArgumentCaptor.forClass(EventVerify.class);
  MvccLogEntry entry=logEntry.getValue();
  assertEquals("entity id did not match ",entity.getUuid(),entry.getEntityId());
  assertEquals("version did not not match entityId",entity.getVersion(),entry.getVersion());
  assertEquals("EventStage is correct",Stage.ACTIVE,entry.getStage());
  verify(bus).post(eventVerify.capture());
  MvccEntity created=eventVerify.getValue().getData();
  assertEquals("entity id did not match generator",entity.getUuid(),created.getUuid());
  assertEquals("version did not not match entityId",entity.getVersion(),created.getVersion());
  assertSame("Entity correct",entity,created.getEntity().get());
}
