{
  OrganizationInfo orgInfo=managementService.getOrganizationByName(orgName);
  if (orgInfo == null) {
    OrganizationOwnerInfo ownerInfo=managementService.createOwnerAndOrganization(orgName,adminUsername + "@example.com",adminUsername,adminUsername + "@example.com",adminPassword,true,false);
    orgInfo=ownerInfo.getOrganization();
  }
  ApplicationInfo appInfo=managementService.getApplicationInfo(orgName + "/" + appName);
  if (appInfo == null) {
    UUID appId=managementService.createApplication(orgInfo.getUuid(),appName).getId();
    appInfo=managementService.getApplicationInfo(appId);
  }
  EntityManager em=emf.getEntityManager(appInfo.getId());
  Fairy fairy=Fairy.create();
  List<Entity> users=new ArrayList<Entity>(numUsers);
  for (int i=0; i < numUsers; i++) {
    final Person person=fairy.person();
    Entity userEntity=null;
    try {
      final Map<String,Object> userMap=new HashMap<String,Object>(){
{
          put("username",person.username());
          put("password",person.password());
          put("email",person.email());
          put("companyEmail",person.companyEmail());
          put("dateOfBirth",person.dateOfBirth());
          put("firstName",person.firstName());
          put("lastName",person.lastName());
          put("nationalIdentificationNumber",person.nationalIdentificationNumber());
          put("telephoneNumber",person.telephoneNumber());
          put("passportNumber",person.passportNumber());
          put("address",person.getAddress());
        }
      }
;
      userEntity=em.create("user",userMap);
      users.add(userEntity);
    }
 catch (    DuplicateUniquePropertyExistsException e) {
      logger.error("Dup user generated: " + person.username());
      continue;
    }
catch (    Exception e) {
      logger.error("Error creating user",e);
      continue;
    }
    final Company company=person.getCompany();
    try {
      EntityRef ref=em.getAlias("company",company.name());
      Entity companyEntity=(ref == null) ? null : em.get(ref);
      if (companyEntity == null) {
        final Map<String,Object> companyMap=new HashMap<String,Object>(){
{
            put("name",company.name());
            put("domain",company.domain());
            put("email",company.email());
            put("url",company.url());
            put("vatIdentificationNumber",company.vatIdentificationNumber());
          }
        }
;
        companyEntity=em.create("company",companyMap);
      }
 else {
        logger.info("Company {} already exists",company.name());
      }
      em.createConnection(userEntity,"employer",companyEntity);
    }
 catch (    DuplicateUniquePropertyExistsException e) {
      logger.error("Dup company generated {} property={}",company.name(),e.getPropertyName());
      continue;
    }
catch (    Exception e) {
      logger.error("Error creating or connecting company",e);
      continue;
    }
    try {
      for (int j=0; j < 5; j++) {
        Activity activity=new Activity();
        Activity.ActivityObject actor=new Activity.ActivityObject();
        actor.setEntityType("user");
        actor.setId(userEntity.getUuid().toString());
        activity.setActor(actor);
        activity.setVerb("POST");
        activity.setContent("User " + person.username() + " generated a random string "+ RandomStringUtils.randomAlphanumeric(5));
        em.createItemInCollection(userEntity,"activities","activity",activity.getProperties());
      }
      if (users.size() > 10) {
        for (int j=0; j < 5; j++) {
          try {
            em.createConnection(userEntity,"associate",users.get((int)(Math.random() * users.size())));
          }
 catch (          Exception e) {
            logger.error("Error connecting user to user: " + e.getMessage());
          }
        }
      }
    }
 catch (    Exception e) {
      logger.error("Error creating activities",e);
      continue;
    }
  }
}
