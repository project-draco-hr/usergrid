{
  QueueManager qm=app.getQm();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put("foo","alpha");
  Queue q=qm.updateQueue("/foo/1/",properties);
  logger.info(JsonUtils.mapToFormattedJsonString(q));
  q=qm.getQueue("/foo/1/");
  logger.info(JsonUtils.mapToFormattedJsonString(q));
  assertEquals("alpha",q.getStringProperty("foo"));
  properties=new HashMap<String,Object>();
  properties.put("foo","bravo");
  q=qm.updateQueue("/foo/2/",properties);
  logger.info(JsonUtils.mapToFormattedJsonString(q));
  properties=new HashMap<String,Object>();
  properties.put("foo","charlie");
  q=qm.updateQueue("/foo/3/",properties);
  logger.info(JsonUtils.mapToFormattedJsonString(q));
  qm.subscribeToQueue("/pubtest/","/foo/1/");
  qm.subscribeToQueue("/pubtest/","/foo/2/");
  qm.subscribeToQueue("/pubtest/","/foo/3/");
  QueueSet results=qm.searchSubscribers("/pubtest/",Query.findForProperty("foo","bravo"));
  logger.info(JsonUtils.mapToFormattedJsonString(results));
  assertEquals(1,results.size());
  properties=new HashMap<String,Object>();
  properties.put("foo","delta");
  q=qm.updateQueue("/foo/2/",properties);
  logger.info(JsonUtils.mapToFormattedJsonString(q));
  results=qm.searchSubscribers("/pubtest/",Query.findForProperty("foo","bravo"));
  logger.info(JsonUtils.mapToFormattedJsonString(results));
  assertEquals(0,results.size());
  results=qm.searchSubscribers("/pubtest/",Query.findForProperty("foo","delta"));
  logger.info(JsonUtils.mapToFormattedJsonString(results));
  assertEquals(1,results.size());
  qm.unsubscribeFromQueue("/pubtest/","/foo/2/");
  results=qm.searchSubscribers("/pubtest/",Query.findForProperty("foo","delta"));
  logger.info(JsonUtils.mapToFormattedJsonString(results));
  assertEquals(0,results.size());
}
