{
  if (rootNode == null) {
    return null;
  }
  final int resultSetSize=Math.min(size,Query.MAX_LIMIT);
  ResultIterator itr=new GatherIterator(resultSetSize,rootNode,searchVisitorFactory.createVisitors(),executorService);
  List<ScanColumn> entityIds=new ArrayList<ScanColumn>();
  CursorCache resultsCursor=new CursorCache();
  while (entityIds.size() < size && itr.hasNext()) {
    entityIds.addAll(itr.next());
  }
  if (entityIds.size() > 0) {
    int resultSize=Math.min(entityIds.size(),size);
    entityIds=entityIds.subList(0,resultSize);
    if (resultSize == size) {
      entityIds.get(resultSize - 1).addToCursor(resultsCursor);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Getting result for query: [{}],  returning entityIds size: {}",getQuery(),entityIds.size());
  }
  final ResultsLoader loader=loaderFactory.getResultsLoader(em,query,query.getResultsLevel());
  final Results results=loader.getResults(entityIds);
  if (results == null) {
    return null;
  }
  results.setCursor(resultsCursor.asString());
  results.setQuery(query);
  results.setQueryProcessor(this);
  results.setSearchVisitorFactory(searchVisitorFactory);
  return results;
}
