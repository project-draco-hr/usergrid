{
  final int NUM_DEVICES=50;
  int oldBatchSize=listener.getBatchSize();
  listener.setBatchSize(10);
  app.clear();
  app.put("name",UUID.randomUUID().toString());
  app.put("provider","noop");
  app.put("environment","mock");
  Entity entity=app.testRequest(ServiceAction.POST,1,"notifiers").getEntity();
  Notifier notifier=app.getEntityManager().get(entity.getUuid(),Notifier.class);
  final String notifierKey=notifier.getName() + NOTIFIER_ID_POSTFIX;
  setup.getEntityIndex().refresh();
  for (int i=0; i < NUM_DEVICES; i++) {
    app.clear();
    app.put(notifierKey,PUSH_TOKEN);
    app.put("name","device" + i * 10);
    app.testRequest(ServiceAction.POST,1,"devices").getEntity();
    setup.getEntityIndex().refresh();
  }
  app.clear();
  String payload=getPayload();
  Map<String,String> payloads=new HashMap<String,String>(1);
  payloads.put(notifier.getUuid().toString(),payload);
  app.put("payloads",payloads);
  app.put("queued",System.currentTimeMillis());
  app.put("debug",true);
  entity=app.testRequest(ServiceAction.POST,1,"devices","notifications").getEntity();
  app.testRequest(ServiceAction.GET,1,"notifications",entity.getUuid());
  setup.getEntityIndex().refresh();
  final Notification notification=(Notification)entity.toTypedEntity();
  try {
    scheduleNotificationAndWait(notification);
  }
  finally {
    listener.setBatchSize(oldBatchSize);
  }
  checkReceipts(notification,NUM_DEVICES);
}
