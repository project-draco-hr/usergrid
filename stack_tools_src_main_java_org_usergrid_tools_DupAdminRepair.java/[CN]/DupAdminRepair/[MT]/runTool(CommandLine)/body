{
  String outputDir=line.getOptionValue("output");
  String emailsDir=String.format("%s/emails",outputDir);
  String usernamesDir=String.format("%s/usernames",outputDir);
  createDir(emailsDir);
  createDir(usernamesDir);
  startSpring();
  logger.info("Starting crawl of all admins");
  EntityManager em=emf.getEntityManager(CassandraService.MANAGEMENT_APPLICATION_ID);
  Application app=em.getApplication();
  Query query=new Query();
  query.setLimit(PAGE_SIZE);
  Results r=null;
  Multimap<String,UUID> emails=HashMultimap.create();
  Multimap<String,UUID> usernames=HashMultimap.create();
  do {
    r=em.searchCollection(app,"users",query);
    for (    Entity entity : r.getEntities()) {
      emails.put(entity.getProperty("email").toString().toLowerCase(),entity.getUuid());
      usernames.put(entity.getProperty("username").toString().toLowerCase(),entity.getUuid());
    }
    query.setCursor(r.getCursor());
    logger.info("Searching next page");
  }
 while (r != null && r.size() == PAGE_SIZE);
  for (  String username : usernames.keySet()) {
    Collection<UUID> ids=usernames.get(username);
    if (ids.size() > 1) {
      logger.info("Found multiple users with the username {}",username);
      resolveUsernameConflicts(usernamesDir,username,ids);
    }
  }
  for (  String email : emails.keySet()) {
    Collection<UUID> ids=emails.get(email);
    if (ids.size() > 1) {
      UserInfo targetUser=managementService.getAdminUserByEmail(email);
      if (targetUser == null) {
        List<UUID> tempIds=new ArrayList<UUID>(ids);
        Collections.sort(tempIds);
        UUID toLoad=tempIds.get(0);
        logger.warn("Could not load target user by email {}, loading by UUID {} instead",email,toLoad);
        targetUser=managementService.getAdminUserByUuid(toLoad);
        ids.remove(toLoad);
      }
      UUID targetId=targetUser.getUuid();
      ids.remove(targetId);
      logger.warn("Found multiple admins with the email {}.  Retaining uuid {}",email,targetId);
      FileWriter file=new FileWriter(String.format("%s/%s.all",emailsDir,email));
      Map<String,Object> userOrganizationData=managementService.getAdminUserOrganizationData(targetId);
      file.write(JsonUtils.mapToFormattedJsonString(userOrganizationData));
      for (      UUID id : ids) {
        userOrganizationData=managementService.getAdminUserOrganizationData(id);
        file.write(JsonUtils.mapToFormattedJsonString(userOrganizationData));
        file.write("\n\n");
        mergeAdmins(emailsDir,id,targetId);
      }
      file.flush();
      file.close();
      logger.info("Forcing re-index of admin with email {} and id {}",email,targetId);
      User targetUserEntity=em.get(targetUser.getUuid(),User.class);
      em.update(targetUserEntity);
      FileWriter merged=new FileWriter(String.format("%s/%s.merged",emailsDir,email));
      userOrganizationData=managementService.getAdminUserOrganizationData(targetUser.getUuid());
      merged.write(JsonUtils.mapToFormattedJsonString(userOrganizationData));
      merged.flush();
      merged.close();
    }
  }
  logger.info("Repair complete");
}
