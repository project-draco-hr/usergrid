{
  QueryFilterParser.ql_return retval=new QueryFilterParser.ql_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal71=null;
  Token string_literal73=null;
  Token string_literal75=null;
  Token char_literal77=null;
  ParserRuleReturnScope select_expr72=null;
  ParserRuleReturnScope expression74=null;
  ParserRuleReturnScope order76=null;
  ParserRuleReturnScope order78=null;
  Object string_literal71_tree=null;
  Object string_literal73_tree=null;
  Object string_literal75_tree=null;
  Object char_literal77_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == 37)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          string_literal71=(Token)match(input,37,FOLLOW_37_in_ql1533);
          pushFollow(FOLLOW_select_expr_in_ql1536);
          select_expr72=select_expr();
          state._fsp--;
        }
      break;
  }
  int alt16=2;
  int LA16_0=input.LA(1);
  if ((LA16_0 == ID || LA16_0 == NOT || LA16_0 == 31 || LA16_0 == 38)) {
    alt16=1;
  }
switch (alt16) {
case 1:
{
      int alt15=2;
      int LA15_0=input.LA(1);
      if ((LA15_0 == 38)) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          string_literal73=(Token)match(input,38,FOLLOW_38_in_ql1542);
        }
      break;
  }
  pushFollow(FOLLOW_expression_in_ql1546);
  expression74=expression();
  state._fsp--;
  adaptor.addChild(root_0,expression74.getTree());
}
break;
}
int alt18=2;
int LA18_0=input.LA(1);
if ((LA18_0 == 36)) {
alt18=1;
}
switch (alt18) {
case 1:
{
string_literal75=(Token)match(input,36,FOLLOW_36_in_ql1551);
pushFollow(FOLLOW_order_in_ql1554);
order76=order();
state._fsp--;
loop17: while (true) {
int alt17=2;
int LA17_0=input.LA(1);
if ((LA17_0 == 34)) {
  alt17=1;
}
switch (alt17) {
case 1:
{
    char_literal77=(Token)match(input,34,FOLLOW_34_in_ql1558);
    pushFollow(FOLLOW_order_in_ql1561);
    order78=order();
    state._fsp--;
  }
break;
default :
break loop17;
}
}
}
break;
}
if ((expression74 != null ? ((Object)expression74.getTree()) : null) instanceof Operand) {
query.setRootOperand((Operand)(expression74 != null ? ((Object)expression74.getTree()) : null));
}
retval.query=query;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
