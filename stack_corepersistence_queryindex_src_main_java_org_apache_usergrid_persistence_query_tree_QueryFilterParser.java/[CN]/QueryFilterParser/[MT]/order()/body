{
  QueryFilterParser.order_return retval=new QueryFilterParser.order_return();
  retval.start=input.LT(1);
  Object root_0=null;
  ParserRuleReturnScope property58=null;
  ParserRuleReturnScope direction59=null;
  try {
{
      root_0=(Object)adaptor.nil();
{
        pushFollow(FOLLOW_property_in_order1424);
        property58=property();
        state._fsp--;
        adaptor.addChild(root_0,property58.getTree());
        int alt10=2;
        int LA10_0=input.LA(1);
        if ((LA10_0 == ASC || LA10_0 == DESC)) {
          alt10=1;
        }
switch (alt10) {
case 1:
{
            pushFollow(FOLLOW_direction_in_order1426);
            direction59=direction();
            state._fsp--;
            adaptor.addChild(root_0,direction59.getTree());
          }
        break;
    }
  }
  String property=(property58 != null ? input.toString(property58.start,property58.stop) : null);
  String direction=(direction59 != null ? input.toString(direction59.start,direction59.stop) : null);
  query.addSort(new SortPredicate(property,direction));
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
