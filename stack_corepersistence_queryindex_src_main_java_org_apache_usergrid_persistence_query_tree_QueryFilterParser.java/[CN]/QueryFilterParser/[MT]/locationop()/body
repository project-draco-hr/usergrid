{
  QueryFilterParser.locationop_return retval=new QueryFilterParser.locationop_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token WITHIN30=null;
  Token OF33=null;
  Token char_literal36=null;
  ParserRuleReturnScope withinproperty29=null;
  ParserRuleReturnScope floatliteral31=null;
  ParserRuleReturnScope longliteral32=null;
  ParserRuleReturnScope floatliteral34=null;
  ParserRuleReturnScope longliteral35=null;
  ParserRuleReturnScope floatliteral37=null;
  ParserRuleReturnScope longliteral38=null;
  Object WITHIN30_tree=null;
  Object OF33_tree=null;
  Object char_literal36_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_withinproperty_in_locationop1220);
      withinproperty29=withinproperty();
      state._fsp--;
      adaptor.addChild(root_0,withinproperty29.getTree());
      WITHIN30=(Token)match(input,WITHIN,FOLLOW_WITHIN_in_locationop1222);
      WITHIN30_tree=new WithinOperand(WITHIN30);
      root_0=(Object)adaptor.becomeRoot(WITHIN30_tree,root_0);
      int alt3=2;
      int LA3_0=input.LA(1);
      if ((LA3_0 == FLOAT)) {
        alt3=1;
      }
 else       if ((LA3_0 == LONG)) {
        alt3=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("",3,0,input);
        throw nvae;
      }
switch (alt3) {
case 1:
{
          pushFollow(FOLLOW_floatliteral_in_locationop1229);
          floatliteral31=floatliteral();
          state._fsp--;
          adaptor.addChild(root_0,floatliteral31.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_longliteral_in_locationop1231);
      longliteral32=longliteral();
      state._fsp--;
      adaptor.addChild(root_0,longliteral32.getTree());
    }
  break;
}
OF33=(Token)match(input,OF,FOLLOW_OF_in_locationop1234);
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == FLOAT)) {
alt4=1;
}
 else if ((LA4_0 == LONG)) {
alt4=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
  pushFollow(FOLLOW_floatliteral_in_locationop1238);
  floatliteral34=floatliteral();
  state._fsp--;
  adaptor.addChild(root_0,floatliteral34.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_longliteral_in_locationop1240);
longliteral35=longliteral();
state._fsp--;
adaptor.addChild(root_0,longliteral35.getTree());
}
break;
}
char_literal36=(Token)match(input,34,FOLLOW_34_in_locationop1243);
int alt5=2;
int LA5_0=input.LA(1);
if ((LA5_0 == FLOAT)) {
alt5=1;
}
 else if ((LA5_0 == LONG)) {
alt5=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
pushFollow(FOLLOW_floatliteral_in_locationop1247);
floatliteral37=floatliteral();
state._fsp--;
adaptor.addChild(root_0,floatliteral37.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_longliteral_in_locationop1249);
longliteral38=longliteral();
state._fsp--;
adaptor.addChild(root_0,longliteral38.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
