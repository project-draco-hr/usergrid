{
  QueryFilterParser.expression_return retval=new QueryFilterParser.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OR55=null;
  ParserRuleReturnScope andexp54=null;
  ParserRuleReturnScope andexp56=null;
  Object OR55_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andexp_in_expression1378);
      andexp54=andexp();
      state._fsp--;
      adaptor.addChild(root_0,andexp54.getTree());
      loop9:       while (true) {
        int alt9=2;
        int LA9_0=input.LA(1);
        if ((LA9_0 == OR)) {
          alt9=1;
        }
switch (alt9) {
case 1:
{
            OR55=(Token)match(input,OR,FOLLOW_OR_in_expression1381);
            OR55_tree=new OrOperand(OR55);
            root_0=(Object)adaptor.becomeRoot(OR55_tree,root_0);
            pushFollow(FOLLOW_andexp_in_expression1387);
            andexp56=andexp();
            state._fsp--;
            adaptor.addChild(root_0,andexp56.getTree());
          }
        break;
default :
      break loop9;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
