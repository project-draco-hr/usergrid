{
  QueryFilterParser.notexp_return retval=new QueryFilterParser.notexp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token NOT48=null;
  ParserRuleReturnScope operation49=null;
  ParserRuleReturnScope operation50=null;
  Object NOT48_tree=null;
  try {
    int alt7=2;
    int LA7_0=input.LA(1);
    if ((LA7_0 == NOT)) {
      alt7=1;
    }
 else     if ((LA7_0 == ID || LA7_0 == 31)) {
      alt7=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",7,0,input);
      throw nvae;
    }
switch (alt7) {
case 1:
{
        root_0=(Object)adaptor.nil();
        NOT48=(Token)match(input,NOT,FOLLOW_NOT_in_notexp1326);
        NOT48_tree=new NotOperand(NOT48);
        root_0=(Object)adaptor.becomeRoot(NOT48_tree,root_0);
        pushFollow(FOLLOW_operation_in_notexp1332);
        operation49=operation();
        state._fsp--;
        adaptor.addChild(root_0,operation49.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_operation_in_notexp1338);
    operation50=operation();
    state._fsp--;
    adaptor.addChild(root_0,operation50.getTree());
  }
break;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
  finally {
}
return retval;
}
