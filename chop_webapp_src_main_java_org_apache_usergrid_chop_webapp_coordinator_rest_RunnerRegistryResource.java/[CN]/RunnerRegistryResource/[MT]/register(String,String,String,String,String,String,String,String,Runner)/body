{
  if (inTestMode(testMode)) {
    LOG.info("Calling /runners/register in test mode ...");
    return Response.ok(false).build();
  }
  Preconditions.checkNotNull(user,"The 'user' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(artifactId,"The 'artifactId' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(groupId,"The 'groupId' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(version,"The 'version' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(version,"The 'testPackageBase' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(commitId,"The 'commitId' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(vcsRepoUrl,"The 'vcsRepoUrl' request parameter MUST NOT be null.");
  Preconditions.checkNotNull(runner,"The 'runner' request parameter MUST NOT be null.");
  String moduleId=BasicModule.createId(groupId,artifactId,version);
  Module module=moduleDao.get(moduleId);
  if (module == null) {
    LOG.warn("Module {} does not exist for runner {}. Creating and storing it ...",groupId + "." + artifactId+ "-"+ version,runner);
    module=new BasicModule(groupId,artifactId,version,vcsRepoUrl,testPackageBase);
    moduleDao.save(module);
  }
  boolean result=runnerCoordinator.register(user,commitId,moduleId,runner);
  if (result) {
    LOG.info("Registered runner at {} for commit {}",runner.getUrl(),commitId);
  }
 else {
    LOG.warn("Failed to register runner at {}",runner.getUrl());
  }
  return Response.ok(result).build();
}
