{
  Entity payload=new Entity();
  payload.put("fields","none");
  String unIndexedCollectionName="notifications";
  app().collection(unIndexedCollectionName).collection("_settings").post(payload);
  refreshIndex();
  Entity notifier=new Entity().chainPut("name","mynotifier").chainPut("provider","noop");
  ApiResponse notifierNode=this.pathResource(getOrgAppPath("notifier")).post(ApiResponse.class,notifier);
  assertEquals("noop",notifierNode.getEntities().get(0).get("provider").toString());
  int numDevices=2;
  int numNotifications=5;
  User user=new User("ed","ed","ed@anuff.com","sesame");
  Entity entity=this.app().collection("users").post(user);
  Token token=this.app().token().post(new Token("ed","sesame"));
  this.clientSetup.getRestClient().token().setToken(token);
  this.refreshIndex();
  int devicesCount=0;
  List<String> deviceIds=new ArrayList();
  for (int i=0; i < numDevices; i++) {
    final int deviceNum=i;
    Map<String,Object> device=new HashMap<String,Object>(){
{
        put("name","device" + deviceNum);
        put("deviceModel","iPhone6+");
        put("deviceOSVersion","iOS 8");
        put("devicePlatform","Apple");
        put("deviceOSVersion","8");
        put("mynotifier.notifier.id","pushtoken" + deviceNum);
      }
    }
;
    Entity deviceNode=this.app().collection("devices").post(new Entity(device));
    assertEquals("device" + i,deviceNode.getResponse().getEntities().get(0).get("name").toString());
    deviceIds.add(deviceNode.getResponse().getEntities().get(0).get("uuid").toString());
    devicesCount++;
  }
  refreshIndex();
  String postMeterName=getClass().getSimpleName() + ".postNotifications";
  Meter postMeter=registry.meter(postMeterName);
  int notificationCount=0;
  List<String> notificationUuids=new ArrayList<String>();
  for (int i=0; i < numNotifications; i++) {
    for (int j=0; j < deviceIds.size(); j++) {
      final String deviceId=deviceIds.get(j);
      Map<String,Object> notification=new HashMap<String,Object>(){
{
          put("payloads",new HashMap<String,Object>(){
{
              put("mynotifier","Hello device " + deviceId);
            }
          }
);
        }
      }
;
      Entity notificationNode=this.app().collection("notifications").post(new Entity(notification));
      postMeter.mark();
      notificationUuids.add(notificationNode.getResponse().getEntities().get(0).get("uuid").toString());
    }
    notificationCount++;
    if (notificationCount % 100 == 0) {
      logger.debug("Created {} notifications",notificationCount);
    }
  }
  registry.remove(postMeterName);
  refreshIndex();
  logger.info("Waiting for all notifications to be sent");
  StopWatch sw=new StopWatch();
  sw.start();
  boolean allSent=false;
  int count=0;
  while (!allSent) {
    Thread.sleep(100);
    int finished=pageThroughAllNotifications("FINISHED");
    if (finished == (numDevices * numNotifications)) {
      allSent=true;
    }
    count++;
    if (count > 100) {
      break;
    }
  }
  sw.stop();
  int nc=numDevices * numNotifications;
  logger.info("Processed {} notifications in {}ms",nc,sw.getTime());
  logger.info("Processing Notifications throughput = {} TPS",((float)nc) / (sw.getTime() / 1000));
  logger.info("Successfully Paged through {} notifications",pageThroughAllNotifications("FINISHED"));
}
