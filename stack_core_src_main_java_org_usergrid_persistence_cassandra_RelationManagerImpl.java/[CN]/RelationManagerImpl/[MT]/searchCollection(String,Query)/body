{
  if (query == null) {
    query=new Query();
  }
  headEntity=em.validate(headEntity);
  CollectionInfo collection=getDefaultSchema().getCollection(headEntity.getType(),collectionName);
  boolean reversed=query.isReversed();
  if (!query.hasQueryPredicates() && !query.hasSortPredicates()) {
    Map<UUID,UUID> ids=null;
    ids=cass.getIdPairList(cass.getApplicationKeyspace(applicationId),key(headEntity.getUuid(),DICTIONARY_COLLECTIONS,collectionName),query.getStartResult(),null,query.getLimit() + 1,reversed);
    Results results=Results.fromIdList(new ArrayList<UUID>(ids.keySet()),collection.getType());
    if (results != null) {
      results.setQuery(query);
    }
    return em.loadEntities(results,query.getResultsLevel(),ids,query.getLimit());
  }
  QueryProcessor qp=new QueryProcessor(query);
  SearchCollectionVisitor visitor=new SearchCollectionVisitor(query,qp,collection);
  qp.getFirstNode().visit(visitor);
  Results results=visitor.getResults();
  if (results == null) {
    return null;
  }
  Map<UUID,UUID> ids=null;
  if (query.getResultsLevel() == Results.Level.LINKED_PROPERTIES) {
    ids=new LinkedHashMap<UUID,UUID>();
    List<UUID> resultIds=results.getIds();
    for (    UUID id : resultIds) {
      ids.put(id,new SimpleCollectionRef(headEntity,collectionName,ref(id)).getUuid());
    }
  }
  results=em.loadEntities(results,query.getResultsLevel(),ids,query.getLimit());
  if (results != null) {
    results.setQuery(query);
    results.setCursor(null);
  }
  if (results.getLevel().ordinal() >= Results.Level.CORE_PROPERTIES.ordinal()) {
    List<Entity> entities=results.getEntities();
    if (entities != null) {
      qp.sort(entities);
    }
  }
  logger.info("Query cursor: " + results.getCursor());
  results.setCursor(qp.getCursor());
  return results;
}
