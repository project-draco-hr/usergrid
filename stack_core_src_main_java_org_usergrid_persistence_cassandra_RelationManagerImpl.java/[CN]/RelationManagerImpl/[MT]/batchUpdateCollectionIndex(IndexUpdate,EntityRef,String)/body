{
  logger.info("batchUpdateCollectionIndex");
  ApplicationCF indexesCf=ENTITY_INDEX;
  CollectionInfo collection=getDefaultSchema().getCollection(owner.getType(),collectionName);
  Object index_key=key(owner.getUuid(),collectionName,indexUpdate.getEntryName());
  for (  IndexEntry entry : indexUpdate.getPrevEntries()) {
    if (entry.getValue() != null) {
      index_key=key(owner.getUuid(),collectionName,entry.getPath());
      addDeleteToMutator(indexUpdate.getBatch(),indexesCf,index_key,entry.getIndexComposite(),indexUpdate.getTimestamp());
      if (collection != null) {
        if (collection.hasSubkeys()) {
          List<String[]> combos=collection.getSubkeyCombinations();
          for (          String[] combo : combos) {
            List<Object> subkey_props=new ArrayList<Object>();
            for (            String subkey_name : combo) {
              Object subkey_value=null;
              if (subkey_name != null) {
                subkey_value=indexUpdate.getEntity().getProperty(subkey_name);
              }
              subkey_props.add(subkey_value);
            }
            Object subkey_key=key(subkey_props.toArray());
            Object index_subkey_key=key(owner.getUuid(),collectionName,subkey_key,entry.getPath());
            addDeleteToMutator(indexUpdate.getBatch(),indexesCf,index_subkey_key,entry.getIndexComposite(),indexUpdate.getTimestamp());
          }
        }
      }
    }
 else {
      logger.error("Unexpected condition - deserialized property value is null");
    }
  }
  if ((indexUpdate.getNewEntries().size() > 0) && (!indexUpdate.isMultiValue() || (indexUpdate.isMultiValue() && !indexUpdate.isRemoveListEntry()))) {
    for (    IndexEntry indexEntry : indexUpdate.getNewEntries()) {
      index_key=key(owner.getUuid(),collectionName,indexEntry.getPath());
      addInsertToMutator(indexUpdate.getBatch(),indexesCf,index_key,indexEntry.getIndexComposite(),null,indexUpdate.getTimestamp());
      if (collection != null) {
        if (collection.hasSubkeys()) {
          List<String[]> combos=collection.getSubkeyCombinations();
          for (          String[] combo : combos) {
            List<Object> subkey_props=new ArrayList<Object>();
            for (            String subkey_name : combo) {
              Object subkey_value=null;
              if (subkey_name != null) {
                subkey_value=indexUpdate.getEntity().getProperty(subkey_name);
              }
              subkey_props.add(subkey_value);
            }
            Object subkey_key=key(subkey_props.toArray());
            Object index_subkey_key=key(owner.getUuid(),collectionName,subkey_key,indexEntry.getPath());
            addInsertToMutator(indexUpdate.getBatch(),indexesCf,index_subkey_key,indexEntry.getIndexComposite(),null,indexUpdate.getTimestamp());
          }
        }
      }
    }
  }
  for (  String index : indexUpdate.getIndexesSet()) {
    addInsertToMutator(indexUpdate.getBatch(),ENTITY_DICTIONARIES,key(owner.getUuid(),collectionName,Schema.DICTIONARY_INDEXES),index,null,indexUpdate.getTimestamp());
  }
  return indexUpdate;
}
