def run(self):
    self.logger.info('Initializing...')
    if (not self.is_endpoint_available()):
        exit_on_error('Endpoint is not available, aborting')
    if (self.start_date is not None):
        self.logger.info('Date Provided.  Re-index will run from date=[%s]', self.start_date)
    try:
        if self.is_appinfo_migrated():
            self.logger.info('AppInfo already migrated. Resetting version for re-migration.')
            self.reset_appinfo_migration()
            time.sleep(STATUS_INTERVAL_SECONDS)
        self.start_appinfo_migration()
        self.logger.info('AppInfo Migration Started.')
        self.metrics['appinfo_migration_start'] = get_current_time()
        is_appinfo_migrated = False
        while (not is_appinfo_migrated):
            is_appinfo_migrated = self.is_appinfo_migrated()
            time.sleep(STATUS_INTERVAL_SECONDS)
            if is_appinfo_migrated:
                self.metrics['appinfo_migration_end'] = get_current_time()
                break
        self.logger.info('AppInfo Migration Ended.')
        job = self.start_reindex()
        self.metrics['reindex_start'] = get_current_time()
        self.logger.info('Started Re-index.  Job=[%s]', job)
        is_running = True
        while is_running:
            time.sleep(STATUS_INTERVAL_SECONDS)
            is_running = self.is_reindex_running(job)
            if (not is_running):
                break
        self.logger.info('Finished Re-index. Job=[%s]', job)
        self.metrics['reindex_end'] = get_current_time()
        if self.force_migration:
            self.logger.info('Force option provided. Performing full data migration...')
            if self.is_data_migrated():
                self.reset_data_migration()
            time.sleep(STATUS_INTERVAL_SECONDS)
            self.is_data_migrated()
            self.start_fulldata_migration()
            self.metrics['full_data_migration_start'] = get_current_time()
            self.logger.info('Full Data Migration Started')
            is_migrated = False
            while (not is_migrated):
                time.sleep(STATUS_INTERVAL_SECONDS)
                is_migrated = self.is_data_migrated()
                if is_migrated:
                    break
            self.metrics['full_data_migration_end'] = get_current_time()
            self.logger.info('Full Data Migration completed')
        self.log_metrics()
        self.logger.info('Finished...')
    except KeyboardInterrupt:
        self.log_metrics()
        self.logger.error('Keyboard interrupted migration. Please run again to ensure the migration finished.')
