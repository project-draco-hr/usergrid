def _get_next_response(self, attempts=0):
    if (self.session is None):
        self.session = requests.Session()
    try:
        if (self.operation == 'PUT'):
            op = self.session.put
        elif (self.operation == 'DELETE'):
            op = self.session.delete
        else:
            op = self.session.get
        target_url = self.url
        if (self.next_cursor is not None):
            delim = ('&' if ('?' in target_url) else '?')
            target_url = ('%s%scursor=%s' % (self.url, delim, self.next_cursor))
        self.logger.debug(('Operation=[%s] URL=[%s]' % (self.operation, target_url)))
        r = op(target_url, data=json.dumps(self.data), headers=self.headers)
        if (r.status_code == 200):
            r_json = r.json()
            count_retrieved = len(r_json.get('entities', []))
            self.total_retrieved += count_retrieved
            self.logger.debug(('Retrieved [%s] entities in [%s]th page in [%s], total from [%s] is [%s]' % (count_retrieved, self.page_counter, r.elapsed, self.url, self.total_retrieved)))
            return r_json
        elif ((r.status_code in [401, 404]) and ('service_resource_not_found' in r.text)):
            self.logger.error(('Query Not Found [%s] on URL=[%s]: %s' % (r.status_code, target_url, r.text)))
            raise SystemError(('Query Not Found [%s] on URL=[%s]: %s' % (r.status_code, target_url, r.text)))
        elif (attempts < 10):
            self.logger.error(('Sleeping %s after HTTP [%s] for retry attempt=[%s] on URL=[%s], response: %s' % (self.sleep_time, r.status_code, attempts, target_url, r.text)))
            time.sleep(self.sleep_time)
            return self._get_next_response(attempts=(attempts + 1))
        else:
            raise SystemError(('Unable to get next response after %s attempts' % attempts))
    except:
        print traceback.format_exc()
