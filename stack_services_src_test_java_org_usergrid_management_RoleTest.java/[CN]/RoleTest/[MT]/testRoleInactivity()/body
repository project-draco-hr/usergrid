{
  OrganizationOwnerInfo ooi=management.createOwnerAndOrganization("ed-organization","edanuff","Ed Anuff","ed@anuff.com","test",true,false);
  OrganizationInfo organization=ooi.getOrganization();
  UUID applicationId=management.createApplication(organization.getUuid(),"test-app").getId();
  EntityManager em=emf.getEntityManager(applicationId);
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  properties.put("activated",true);
  User user=em.create(User.ENTITY_TYPE,User.class,properties);
  em.createRole("logged-in","Logged In",1000);
  em.addUserToRole(user.getUuid(),"logged-in");
  String accessToken=management.getAccessTokenForAppUser(applicationId,user.getUuid(),0);
  UserInfo user_info=management.getAppUserFromAccessToken(accessToken);
  PrincipalCredentialsToken token=PrincipalCredentialsToken.getFromAppUserInfoAndAccessToken(user_info,accessToken);
  Subject subject=SubjectUtils.getSubject();
  subject.login(token);
  subject.checkRole("application-role:" + applicationId + ":logged-in");
  logger.info("Has role \"logged-in\"");
  Thread.sleep(1000);
  subject.login(token);
  assertFalse(subject.hasRole("application-role:" + applicationId + ":logged-in"));
  logger.info("Doesn't have role \"logged-in\"");
}
