{
  Collection<SshValues> sshValues=new HashSet<SshValues>(cluster.getSize());
  StringBuilder sb=new StringBuilder();
  Collection<Command> commands=new ArrayList<Command>();
  for (  Instance instance : cluster.getInstances()) {
    sshValues.add(new InstanceValues(instance,keyFile));
  }
  for (  Object obj : cluster.getInstanceSpec().getScriptEnvironment().keySet()) {
    String envVar=obj.toString();
    String value=cluster.getInstanceSpec().getScriptEnvironment().getProperty(envVar);
    sb.append("export ").append(envVar).append("=\"").append(value).append("\";");
  }
  String exportVars=sb.toString();
  for (  URL scriptFile : cluster.getInstanceSpec().getSetupScripts()) {
    File file=new File(scriptFile.getPath());
    File fileToSave=new File(runnerJar.getParentFile(),file.getName());
    writeToFile(getResourceAsStreamFromRunnerJar(runnerJar,file.getName()),fileToSave.getPath());
    sb=new StringBuilder();
    sb.append("/home/").append(Utils.DEFAULT_USER).append("/").append(fileToSave.getName());
    String destFile=sb.toString();
    commands.add(new SCPCommand(fileToSave.getAbsolutePath(),destFile));
    sb=new StringBuilder();
    sb.append("chmod 0755 ").append("/home/").append(Utils.DEFAULT_USER).append("/").append(fileToSave.getName()).append(";");
    sb.append(exportVars).append("sudo -E ").append(destFile);
    commands.add(new SSHCommand(sb.toString()));
  }
  Collection<ResponseInfo> responses=null;
  try {
    AsyncSsh asyncSsh=new AsyncSsh(sshValues,commands);
    responses=asyncSsh.executeAll();
  }
 catch (  InterruptedException e) {
    LOG.error("Interrupted while trying to execute SSH command",e);
    return false;
  }
catch (  ExecutionException e) {
    LOG.error("Error while executing ssh commands",e);
    return false;
  }
  for (  ResponseInfo response : responses) {
    if (!response.isSuccessful()) {
      return false;
    }
  }
  return true;
}
