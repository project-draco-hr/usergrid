{
  Map<String,Object> originalProperties=getRemoteTestProperties();
  try {
    Mailbox.clearAll();
    setTestProperty(PROPERTIES_SYSADMIN_APPROVES_ADMIN_USERS,"false");
    setTestProperty(PROPERTIES_SYSADMIN_APPROVES_ORGANIZATIONS,"false");
    setTestProperty(PROPERTIES_ADMIN_USERS_REQUIRE_CONFIRMATION,"false");
    setTestProperty(PROPERTIES_SYSADMIN_EMAIL,"sysadmin-1@mockserver.com");
    String adminToken=getAdminToken().getAccessToken();
    Entity node=postAddAdminToOrg("test-organization","test-admin-nopwd@mockserver.com","");
    UUID userId=(UUID)node.getMap("data").get("user").get("uuid");
    refreshIndex();
    String subject="Password Reset";
    Map<String,Object> testProperties=this.getRemoteTestProperties();
    String reset_url=String.format((String)testProperties.get(PROPERTIES_ADMIN_RESETPW_URL),userId.toString());
    String invited="User Invited To Organization";
    Message[] msgs=getMessages("mockserver.com","test-admin-nopwd","password");
    assertTrue(msgs.length == 2);
    assertEquals(subject,msgs[0].getSubject());
    assertEquals(invited,msgs[1].getSubject());
    String mailContent=(String)((MimeMultipart)msgs[0].getContent()).getBodyPart(1).getContent();
    logger.info(mailContent);
    assertTrue(StringUtils.contains(mailContent,reset_url));
    String token=getTokenFromMessage(msgs[0]);
    this.management().orgs().organization("test-organization").users().getResource(false).queryParam("access_token",token).get(String.class);
    fail("Should not be able to authenticate an admin with no admin access allowed");
  }
 catch (  UniformInterfaceException uie) {
    assertEquals(401,uie.getResponse().getStatus());
  }
 finally {
    setTestProperties(originalProperties);
  }
}
