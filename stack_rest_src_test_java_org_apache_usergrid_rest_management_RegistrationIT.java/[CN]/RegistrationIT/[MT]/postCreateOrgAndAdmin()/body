{
  Map<String,Object> originalProperties=getRemoteTestProperties();
  try {
    setTestProperty(PROPERTIES_SYSADMIN_APPROVES_ADMIN_USERS,"false");
    setTestProperty(PROPERTIES_SYSADMIN_APPROVES_ORGANIZATIONS,"false");
    setTestProperty(PROPERTIES_ADMIN_USERS_REQUIRE_CONFIRMATION,"false");
    setTestProperty(PROPERTIES_SYSADMIN_EMAIL,"sysadmin-1@mockserver.com");
    final String username="registrationUser" + UUIDGenerator.newTimeUUID();
    final String email=username + "@usergrid.com";
    final String password="password";
    Organization organization=this.management().orgs().post(new Organization("org" + UUIDGenerator.newTimeUUID(),username,email,username,password,new HashMap<String,Object>()),this.getAdminToken());
    Application application=new Application("app" + UUIDGenerator.newTimeUUID());
    this.management().orgs().organization(organization.getName()).app().post(application);
    List<Message> inbox=org.jvnet.mock_javamail.Mailbox.get("test-user-1@mockserver.com");
    assertFalse(inbox.isEmpty());
    Message account_confirmation_message=inbox.get(0);
    assertEquals("User Account Confirmation: " + email,account_confirmation_message.getSubject());
    String token=getTokenFromMessage(account_confirmation_message);
    logger.info(token);
    setTestProperty(AccountCreationProps.PROPERTIES_SYSADMIN_LOGIN_ALLOWED,"false");
    refreshIndex();
    try {
      this.management().orgs().organization(organization.getName()).users().user(username).getResource(false).queryParam("username",username).queryParam("password",password).get(String.class);
      fail("request for disabled user should fail");
    }
 catch (    UniformInterfaceException uie) {
      assertEquals("user disabled",uie.getMessage());
    }
    this.management().orgs().organization(organization.getName()).users().user(username).put(new Entity().chainPut("activated",false).chainPut("deactivated",System.currentTimeMillis()));
    try {
      management().token().get(new QueryParameters().addParam("grant_type","password").addParam("username",username).addParam("password",password));
      fail("request for deactivated user should fail");
    }
 catch (    UniformInterfaceException uie) {
      assertEquals("user not activated",uie.getMessage());
    }
  }
  finally {
    setTestProperties(originalProperties);
  }
}
