{
  return Observable.from(node).map(new Func1<Id,Optional<UUID>>(){
    @Override public Optional<UUID> call(    final Id id){
      return nodeSerialization.getMaxVersion(scope,node);
    }
  }
).flatMap(new Func1<Optional<UUID>,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final Optional<UUID> uuidOptional){
      return getEdgeTypesToTarget(new SimpleSearchEdgeType(node,null)).flatMap(new Func1<String,Observable<Edge>>(){
        @Override public Observable<Edge> call(        final String edgeType){
          return loadEdgesToTarget(new SimpleSearchByEdgeType(node,edgeType,uuidOptional.get(),null)).doOnEach(new Action1<Edge>(){
            @Override public void call(            final Edge edge){
              deleteEdge(edge);
            }
          }
);
        }
      }
);
    }
  }
).map(new Func1<Edge,Id>(){
    @Override public Id call(    final Edge edge){
      return node;
    }
  }
);
}
