{
  final UUID maxVersion=delete.getVersion();
  return Observable.from(delete).flatMap(new Func1<Edge,Observable<MutationBatch>>(){
    @Override public Observable<MutationBatch> call(    final Edge edge){
      Observable<Integer> sourceIdType=loadEdgesFromSourceByType(new SimpleSearchByIdType(edge.getSourceNode(),edge.getType(),maxVersion,edge.getTargetNode().getType(),null)).take(2).count().doOnEach(new Action1<Integer>(){
        @Override public void call(        final Integer count){
          if (count == 2) {
            return;
          }
          try {
            edgeMetadataSerialization.removeEdgeTypeFromSource(scope,delete).execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to execute mutation",e);
          }
        }
      }
);
      Observable<Integer> targetIdType=loadEdgesToTargetByType(new SimpleSearchByIdType(edge.getTargetNode(),edge.getType(),maxVersion,edge.getSourceNode().getType(),null)).take(2).count().doOnEach(new Action1<Integer>(){
        @Override public void call(        final Integer count){
          if (count == 2) {
            return;
          }
          try {
            edgeMetadataSerialization.removeEdgeTypeToTarget(scope,delete).execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to execute mutation",e);
          }
        }
      }
);
      Observable<Integer> sourceType=loadEdgesFromSource(new SimpleSearchByEdgeType(edge.getSourceNode(),edge.getType(),maxVersion,null)).take(2).count().doOnEach(new Action1<Integer>(){
        @Override public void call(        final Integer count){
          if (count == 2) {
            return;
          }
          try {
            edgeMetadataSerialization.removeEdgeTypeFromSource(scope,delete).execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to execute mutation",e);
          }
        }
      }
);
      Observable<MutationBatch> targetType=loadEdgesToTarget(new SimpleSearchByEdgeType(edge.getTargetNode(),edge.getType(),maxVersion,null)).take(2).count().map(new Func1<Integer,MutationBatch>(){
        @Override public MutationBatch call(        final Integer count){
          if (count == 2) {
            return null;
          }
          return edgeMetadataSerialization.removeEdgeTypeToTarget(scope,delete);
        }
      }
);
      return Observable.zip(sourceIdType,targetIdType,sourceType,targetType,new Func4<MutationBatch,MutationBatch,MutationBatch,MutationBatch,MutationBatch>(){
        @Override public MutationBatch call(        final MutationBatch mutationBatch,        final MutationBatch mutationBatch2,        final MutationBatch mutationBatch3,        final MutationBatch mutationBatch4){
          return join(join(join(mutationBatch,mutationBatch2),mutationBatch3),mutationBatch4);
        }
        private MutationBatch join(        MutationBatch first,        MutationBatch second){
          if (first == null) {
            if (second == null) {
              return null;
            }
            return second;
          }
 else           if (second == null) {
            return first;
          }
          first.mergeShallow(second);
          return first;
        }
      }
);
    }
  }
).map(new Func1<MutationBatch,MutationBatch>(){
    @Override public MutationBatch call(    final MutationBatch mutationBatch){
      return mutationBatch;
    }
  }
).count();
}
