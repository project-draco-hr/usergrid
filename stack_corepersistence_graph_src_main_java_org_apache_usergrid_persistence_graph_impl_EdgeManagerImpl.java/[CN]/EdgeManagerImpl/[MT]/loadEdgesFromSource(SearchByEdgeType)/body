{
  return Observable.create(new ObservableIterator<MarkedEdge>(){
    @Override protected Iterator<MarkedEdge> getIterator(){
      return edgeSerialization.getEdgesFromSource(scope,search);
    }
  }
).buffer(graphFig.getScanPageSize()).flatMap(new Func1<List<MarkedEdge>,Observable<MarkedEdge>>(){
    @Override public Observable<MarkedEdge> call(    final List<MarkedEdge> markedEdges){
      return Observable.from(markedEdges).filter(new EdgeFilter(search.getMaxVersion()));
    }
  }
).distinctUntilChanged(new Func1<Edge,Id>(){
    @Override public Id call(    final Edge edge){
      return edge.getTargetNode();
    }
  }
).cast(Edge.class);
}
