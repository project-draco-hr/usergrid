{
  final GraphManager gm=graphManagerFactory.createEdgeManager(applicationEntityGroup.applicationScope);
  final Observable<Edge> edgesFromSource=edgesFromSourceObservable.edgesFromSource(gm,applicationEntityGroup.applicationScope.getApplication());
  final AtomicLong counter=new AtomicLong();
  rx.Observable o=Observable.from(applicationEntityGroup.entityIds).flatMap(new Func1<EntityIdScope,Observable<List<Edge>>>(){
    @Override public Observable<List<Edge>> call(    final EntityIdScope idScope){
      logger.info("Migrating edges from node {} in scope {}",idScope.getId(),applicationEntityGroup.applicationScope);
      return edgesFromSource.buffer(1000).doOnNext(new Action1<List<Edge>>(){
        @Override public void call(        List<Edge> edges){
          final MutationBatch batch=keyspace.prepareMutationBatch();
          for (          Edge edge : edges) {
            logger.info("Migrating meta for edge {}",edge);
            final MutationBatch edgeBatch=edgeMigrationStrategy.getMigration().to().writeEdge(applicationEntityGroup.applicationScope,edge);
            batch.mergeShallow(edgeBatch);
          }
          try {
            batch.execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to perform migration",e);
          }
          final long newCount=counter.addAndGet(edges.size());
          observer.update(getVersion(),String.format("Currently running.  Rewritten %d edge types",newCount));
        }
      }
);
    }
  }
).map(new Func1<List<Edge>,Long>(){
    @Override public Long call(    List<Edge> edges){
      return counter.get();
    }
  }
);
  return o;
}
