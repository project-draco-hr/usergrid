{
  final AtomicLong counter=new AtomicLong();
  return scopes.flatMap(new Func1<ApplicationScope,Observable<?>>(){
    @Override public Observable call(    final ApplicationScope applicationScope){
      final GraphManager gm=graphManagerFactory.createEdgeManager(applicationScope);
      final Observable<Edge> edgesFromSource=edgesFromSourceObservable.edgesFromSource(gm,applicationScope.getApplication());
      logger.info("Migrating edges scope {}",applicationScope);
      return edgesFromSource.buffer(1000).doOnNext(new Action1<List<Edge>>(){
        @Override public void call(        List<Edge> edges){
          final MutationBatch batch=keyspace.prepareMutationBatch();
          for (          Edge edge : edges) {
            logger.info("Migrating meta for edge {}",edge);
            final MutationBatch edgeBatch=edgeMigrationStrategy.getMigration().to().writeEdge(applicationScope,edge);
            batch.mergeShallow(edgeBatch);
          }
          try {
            batch.execute();
          }
 catch (          ConnectionException e) {
            throw new RuntimeException("Unable to perform migration",e);
          }
          final long newCount=counter.addAndGet(edges.size());
          observer.update(getVersion(),String.format("Currently running.  Rewritten %d edge types",newCount));
        }
      }
);
    }
  }
);
}
