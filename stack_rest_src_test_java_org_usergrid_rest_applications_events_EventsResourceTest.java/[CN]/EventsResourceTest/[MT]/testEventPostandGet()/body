{
  Map<String,Object> payload=new LinkedHashMap<String,Object>();
  payload.put("timestamp",0);
  payload.put("category","advertising");
  payload.put("counters",new LinkedHashMap<String,Object>(){
{
      put("ad_clicks",5);
    }
  }
);
  JsonNode node=resource().path("/test-organization/test-app/events").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  assertNotNull(node.get("entities"));
  String advertising=node.get("entities").get(0).get("uuid").asText();
  payload=new LinkedHashMap<String,Object>();
  payload.put("timestamp",0);
  payload.put("category","sales");
  payload.put("counters",new LinkedHashMap<String,Object>(){
{
      put("ad_sales",20);
    }
  }
);
  node=resource().path("/test-organization/test-app/events").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  assertNotNull(node.get("entities"));
  String sales=node.get("entities").get(0).get("uuid").asText();
  payload=new LinkedHashMap<String,Object>();
  payload.put("timestamp",0);
  payload.put("category","marketing");
  payload.put("counters",new LinkedHashMap<String,Object>(){
{
      put("ad_clicks",10);
    }
  }
);
  node=resource().path("/test-organization/test-app/events").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
  assertNotNull(node.get("entities"));
  String marketing=node.get("entities").get(0).get("uuid").asText();
  String lastId=null;
  for (int i=0; i < 3; i++) {
    node=resource().path("/test-organization/test-app/events").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
    logNode(node);
    assertEquals("Expected Advertising",advertising,node.get("messages").get(0).get("uuid").asText());
    lastId=node.get("last").asText();
  }
  node=resource().path("/test-organization/test-app/events/?last=" + lastId).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(node);
  assertEquals("Expected Sales",sales,node.get("entities").get(0).get("uuid").asText());
  lastId=node.get("last").asText();
  node=resource().path("/test-organization/test-app/events?last=" + lastId).queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  logNode(node);
  assertEquals("Expected Marketing",marketing,node.get("entities").get(0).get("uuid").asText());
}
