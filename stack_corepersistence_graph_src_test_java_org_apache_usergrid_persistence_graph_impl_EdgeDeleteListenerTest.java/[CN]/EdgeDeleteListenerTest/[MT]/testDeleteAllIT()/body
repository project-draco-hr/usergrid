{
  final Id sourceId=createId("source");
  final String edgeType="test";
  final Id targetId=createId("target");
  final long timestamp=1000l;
  MarkedEdge edgeV1=createMarkedEdge(sourceId,edgeType,targetId,timestamp);
  MarkedEdge edgeV2=createMarkedEdge(sourceId,edgeType,targetId,timestamp + 1);
  MarkedEdge edgeV3=createMarkedEdge(sourceId,edgeType,targetId,timestamp + 2);
  final UUID foobar=UUIDGenerator.newTimeUUID();
  storageEdgeSerialization.writeEdge(scope,edgeV1,foobar).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV2,foobar).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV3,foobar).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV1).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV2).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV3).execute();
  edgeDeleteListener.receive(scope,edgeV2,UUIDGenerator.newTimeUUID()).toBlocking().single();
  edgeDeleteListener.receive(scope,edgeV1,UUIDGenerator.newTimeUUID()).toBlocking().single();
  edgeDeleteListener.receive(scope,edgeV3,UUIDGenerator.newTimeUUID()).toBlocking().single();
  long now=System.currentTimeMillis();
  Iterator<String> edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchEdge(sourceId,null));
  assertFalse(edgeTypes.hasNext());
  edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchIdType(sourceId,edgeType,null));
  assertFalse(edgeTypes.hasNext());
  edgeTypes=edgeMetadataSerialization.getEdgeTypesToTarget(scope,createSearchEdge(targetId,null));
  assertFalse(edgeTypes.hasNext());
  Iterator<MarkedEdge> edges=storageEdgeSerialization.getEdgeVersions(scope,createGetByEdge(sourceId,edgeType,targetId,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,edgeType,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,edgeType,now,targetId.getType(),null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTarget(scope,createSearchByEdge(targetId,edgeType,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId,edgeType,now,sourceId.getType(),null));
  assertFalse(edges.hasNext());
}
