{
  final Id sourceId=createId("source");
  final String edgeType="test";
  final Id targetId=createId("target");
  MarkedEdge edgeV1=createMarkedEdge(sourceId,edgeType,targetId);
  MarkedEdge edgeV2=createMarkedEdge(sourceId,edgeType,targetId);
  MarkedEdge edgeV3=createMarkedEdge(sourceId,edgeType,targetId);
  final UUID timestamp=UUIDGenerator.newTimeUUID();
  commitLogEdgeSerialization.writeEdge(scope,edgeV1,timestamp).execute();
  commitLogEdgeSerialization.writeEdge(scope,edgeV2,timestamp).execute();
  commitLogEdgeSerialization.writeEdge(scope,edgeV3,timestamp).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV1,timestamp).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV2,timestamp).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV3,timestamp).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV1).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV2).execute();
  edgeMetadataSerialization.writeEdge(scope,edgeV3).execute();
  EdgeDeleteEvent returned=edgeDeleteListener.receive(new EdgeDeleteEvent(scope,UUIDGenerator.newTimeUUID(),edgeV2)).toBlockingObservable().single();
  assertEquals(edgeV2,returned.getData());
  returned=edgeDeleteListener.receive(new EdgeDeleteEvent(scope,UUIDGenerator.newTimeUUID(),edgeV1)).toBlockingObservable().single();
  assertEquals(edgeV1,returned.getData());
  returned=edgeDeleteListener.receive(new EdgeDeleteEvent(scope,UUIDGenerator.newTimeUUID(),edgeV3)).toBlockingObservable().single();
  assertEquals(edgeV3,returned.getData());
  UUID now=UUIDGenerator.newTimeUUID();
  Iterator<MarkedEdge> edges=commitLogEdgeSerialization.getEdgeVersions(scope,createGetByEdge(sourceId,edgeType,targetId,now,null));
  assertFalse(edges.hasNext());
  edges=commitLogEdgeSerialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,edgeType,now,null));
  assertFalse(edges.hasNext());
  Iterator<String> edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchEdge(sourceId,null));
  assertFalse(edgeTypes.hasNext());
  edges=commitLogEdgeSerialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,edgeType,now,targetId.getType(),null));
  assertFalse(edges.hasNext());
  edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchIdType(sourceId,edgeType,null));
  assertFalse(edgeTypes.hasNext());
  edges=commitLogEdgeSerialization.getEdgesToTarget(scope,createSearchByEdge(targetId,edgeType,now,null));
  assertFalse(edges.hasNext());
  edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchEdge(targetId,null));
  assertFalse(edgeTypes.hasNext());
  edges=commitLogEdgeSerialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId,edgeType,now,sourceId.getType(),null));
  assertFalse(edges.hasNext());
  edgeTypes=edgeMetadataSerialization.getEdgeTypesFromSource(scope,createSearchIdType(targetId,edgeType,null));
  assertFalse(edgeTypes.hasNext());
  edges=storageEdgeSerialization.getEdgeVersions(scope,createGetByEdge(sourceId,edgeType,targetId,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,edgeType,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,edgeType,now,targetId.getType(),null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTarget(scope,createSearchByEdge(targetId,edgeType,now,null));
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId,edgeType,now,sourceId.getType(),null));
  assertFalse(edges.hasNext());
}
