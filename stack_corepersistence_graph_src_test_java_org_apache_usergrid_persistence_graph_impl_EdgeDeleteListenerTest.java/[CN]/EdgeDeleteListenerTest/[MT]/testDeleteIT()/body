{
  final Id sourceId=createId("source");
  final String edgeType="test";
  final Id targetId=createId("target");
  MarkedEdge edgeV1=createMarkedEdge(sourceId,edgeType,targetId);
  MarkedEdge edgeV2=createMarkedEdge(sourceId,edgeType,targetId);
  MarkedEdge edgeV3=createMarkedEdge(sourceId,edgeType,targetId);
  commitLogEdgeSerialization.writeEdge(scope,edgeV1).execute();
  commitLogEdgeSerialization.writeEdge(scope,edgeV2).execute();
  commitLogEdgeSerialization.writeEdge(scope,edgeV3).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV1).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV2).execute();
  storageEdgeSerialization.writeEdge(scope,edgeV3).execute();
  EdgeEvent<MarkedEdge> edgeDeleteEvent=new EdgeEvent<>(scope,edgeV3.getVersion(),edgeV3);
  EdgeEvent<MarkedEdge> returned=edgeDeleteListener.receive(edgeDeleteEvent).toBlockingObservable().single();
  assertEquals(edgeV3,returned.getData());
  UUID now=UUIDGenerator.newTimeUUID();
  Iterator<MarkedEdge> edges=commitLogEdgeSerialization.getEdgeVersions(scope,createGetByEdge(sourceId,edgeType,targetId,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=commitLogEdgeSerialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,edgeType,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=commitLogEdgeSerialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,edgeType,now,targetId.getType(),null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=commitLogEdgeSerialization.getEdgesToTarget(scope,createSearchByEdge(targetId,edgeType,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=commitLogEdgeSerialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId,edgeType,now,sourceId.getType(),null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgeVersions(scope,createGetByEdge(sourceId,edgeType,targetId,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,edgeType,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,edgeType,now,targetId.getType(),null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTarget(scope,createSearchByEdge(targetId,edgeType,now,null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
  edges=storageEdgeSerialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId,edgeType,now,sourceId.getType(),null));
  assertEquals(edgeV2,edges.next());
  assertEquals(edgeV1,edges.next());
  assertFalse(edges.hasNext());
}
