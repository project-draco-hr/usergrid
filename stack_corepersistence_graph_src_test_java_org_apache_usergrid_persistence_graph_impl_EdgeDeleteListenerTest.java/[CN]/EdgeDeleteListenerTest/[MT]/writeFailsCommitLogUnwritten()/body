{
  final Id sourceId=createId("source");
  final String edgeType="test";
  final Id targetId=createId("target");
  MarkedEdge edgeV1=createMarkedEdge(sourceId,edgeType,targetId);
  EdgeSerialization commitLog=mock(EdgeSerialization.class);
  EdgeSerialization storage=mock(EdgeSerialization.class);
  Keyspace keyspace=mock(Keyspace.class);
  EdgeWriteCompact compact=new EdgeWriteCompactImpl(commitLog,storage,keyspace,graphFig);
  when(commitLog.getEdgeVersions(same(scope),any(SearchByEdge.class))).thenReturn(Collections.singletonList(createEdge(edgeV1.getSourceNode(),edgeV1.getType(),edgeV1.getTargetNode(),edgeV1.getTimestamp())).iterator());
  MutationBatch commitLogBatch=mock(MutationBatch.class);
  MutationBatch storageBatch=mock(MutationBatch.class);
  when(keyspace.prepareMutationBatch()).thenReturn(commitLogBatch);
  when(keyspace.prepareMutationBatch()).thenReturn(storageBatch);
  RuntimeException exception=new RuntimeException("Something nasty happened when mutating");
  when(storageBatch.execute()).thenThrow(exception);
  try {
    compact.compact(scope,edgeV1,UUIDGenerator.newTimeUUID()).toBlockingObservable().last();
    fail("I should have thrown an exception");
  }
 catch (  RuntimeException re) {
    assertSame(exception,re);
  }
  verify(commitLogBatch,never()).execute();
}
