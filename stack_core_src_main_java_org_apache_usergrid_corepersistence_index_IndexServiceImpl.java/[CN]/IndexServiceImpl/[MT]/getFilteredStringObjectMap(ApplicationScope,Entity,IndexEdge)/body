{
  IndexOperation indexOperation=new IndexOperation();
  indexEdge.getNodeId().getUuid();
  Id mapOwner=new SimpleId(indexEdge.getNodeId().getUuid(),TYPE_APPLICATION);
  final MapScope ms=CpNamingUtils.getEntityTypeMapScope(mapOwner);
  MapManager mm=mapManagerFactory.createMapManager(ms);
  Set<String> defaultProperties;
  ArrayList fieldsToKeep;
  String jsonSchemaMap=mm.getString(indexEdge.getEdgeName().split("\\|")[1]);
  if (jsonSchemaMap != null) {
    Map jsonMapData=(Map)JsonUtils.parse(jsonSchemaMap);
    Schema schema=Schema.getDefaultSchema();
    defaultProperties=schema.getRequiredProperties(indexEdge.getEdgeName().split("\\|")[1]);
    fieldsToKeep=(ArrayList)jsonMapData.get("fields");
    defaultProperties.addAll(fieldsToKeep);
  }
 else {
    return null;
  }
  Map map=indexOperation.convertedEntityToBeIndexed(applicationScope,indexEdge,entity);
  HashSet mapFields=(HashSet)map.get("fields");
  Iterator collectionIterator=mapFields.iterator();
  while (collectionIterator.hasNext()) {
    EntityField testedField=(EntityField)collectionIterator.next();
    String fieldName=(String)(testedField).get("name");
    if (!defaultProperties.contains(fieldName)) {
      iterateThroughMapForFieldsToBeIndexed(fieldsToKeep,collectionIterator,fieldName);
    }
  }
  return map;
}
