{
  UUID exportId=(UUID)jobExecution.getJobData().getProperty(EXPORT_ID);
  EntityManager exportManager=emf.getEntityManager((UUID)config.get("applicationId"));
  Export export=exportManager.get(exportId,Export.class);
  String appFileName=null;
  BiMap<UUID,String> applications=managementService.getApplicationsForOrganization(organizationUUID);
  for (  Map.Entry<UUID,String> application : applications.entrySet()) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    JsonGenerator jg=getJsonGenerator(baos);
    if (application.getValue().equals(managementService.getOrganizationByUuid(organizationUUID).getName() + "/exporters")) {
      continue;
    }
    appFileName=prepareOutputFileName("application",application.getValue(),null);
    EntityManager em=emf.getEntityManager(application.getKey());
    jg.writeStartArray();
    Map<String,Object> metadata=em.getApplicationCollectionMetadata();
    long starting_time=System.currentTimeMillis();
    for (    String collectionName : metadata.keySet()) {
      if (collectionName.equals("exports")) {
        continue;
      }
      if ((config.get("collectionName") == null) || collectionName.equals(config.get("collectionName"))) {
        Query query=new Query();
        query.setLimit(MAX_ENTITY_FETCH);
        query.setResultsLevel(Results.Level.ALL_PROPERTIES);
        Results entities=em.searchCollection(em.getApplicationRef(),collectionName,query);
        PagingResultsIterator itr=new PagingResultsIterator(entities);
        for (        Object e : itr) {
          starting_time=checkTimeDelta(starting_time,jobExecution);
          Entity entity=(Entity)e;
          jg.writeStartObject();
          jg.writeFieldName("Metadata");
          jg.writeObject(entity);
          saveCollectionMembers(jg,em,(String)config.get("collectionName"),entity);
          jg.writeEndObject();
        }
      }
    }
    jg.writeEndArray();
    jg.close();
    baos.flush();
    baos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    try {
      s3Export.copyToS3(is,config,appFileName);
    }
 catch (    Exception e) {
      export.setState(Export.State.FAILED);
      return;
    }
  }
}
