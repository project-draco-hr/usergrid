{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  logger.info("" + organization);
  BiMap<UUID,String> applications=managementService.getApplicationsForOrganization(organization.getKey());
  for (  Map.Entry<UUID,String> application : applications.entrySet()) {
    logger.info(application.getValue() + " : " + application.getKey());
    String appFileName=prepareOutputFileName("application",application.getValue());
    JsonGenerator jg=getJsonGenerator(baos);
    EntityManager em=emf.getEntityManager(application.getKey());
    jg.writeStartArray();
    Map<String,Object> metadata=em.getApplicationCollectionMetadata();
    long starting_time=System.currentTimeMillis();
    for (    String collectionName : metadata.keySet()) {
      if (collectionName.equals("exports")) {
        continue;
      }
      Query query=new Query();
      query.setLimit(MAX_ENTITY_FETCH);
      query.setResultsLevel(Results.Level.ALL_PROPERTIES);
      Results entities=em.searchCollection(em.getApplicationRef(),collectionName,query);
      PagingResultsIterator itr=new PagingResultsIterator(entities);
      for (      Object e : itr) {
        starting_time=checkTimeDelta(starting_time,jobExecution);
        Entity entity=(Entity)e;
        jg.writeStartObject();
        jg.writeFieldName("Metadata");
        jg.writeObject(entity);
        saveCollectionMembers(jg,em,application.getValue(),entity);
        jg.writeEndObject();
      }
    }
    jg.writeEndArray();
    jg.close();
    baos.flush();
    baos.close();
    InputStream is=new ByteArrayInputStream(baos.toByteArray());
    s3Export.copyToS3(is,config,appFileName);
  }
}
