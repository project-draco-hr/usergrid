{
  Observable<List<MvccLogEntry>> deleteFieldsObservable=Observable.create(new Observable.OnSubscribe<MvccLogEntry>(){
    @Override public void call(    final Subscriber<? super MvccLogEntry> subscriber){
      throw new NotImplementedException("Implement me");
    }
  }
).skip(1).buffer(serializationFig.getBufferSize()).doOnNext(new Action1<List<MvccLogEntry>>(){
    @Override public void call(    final List<MvccLogEntry> mvccEntities){
      final MutationBatch batch=keyspace.prepareMutationBatch();
      final MutationBatch logBatch=keyspace.prepareMutationBatch();
      for (      MvccLogEntry logEntry : mvccEntities) {
        final UUID entityVersion=logEntry.getVersion();
        final Id entityId=logEntry.getEntityId();
        throw new UnsupportedOperationException("This needs to delete unique fields differently.  Think about this a bit " + "more");
      }
      try {
        batch.execute();
      }
 catch (      ConnectionException e1) {
        throw new RuntimeException("Unable to execute " + "unique value " + "delete",e1);
      }
      fireEvents(mvccEntities);
      try {
        logBatch.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete entities from the log",e);
      }
    }
  }
);
  final int removedCount=deleteFieldsObservable.count().toBlocking().last();
  logger.debug("Removed unique values for {} entities of entity {}",removedCount,entityId);
  return null;
}
