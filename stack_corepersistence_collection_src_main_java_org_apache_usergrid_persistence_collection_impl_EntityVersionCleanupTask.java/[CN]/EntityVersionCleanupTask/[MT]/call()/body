{
  Observable<List<MvccEntity>> deleteFieldsObservable=Observable.create(new ObservableIterator<MvccEntity>("deleteColumns"){
    @Override protected Iterator<MvccEntity> getIterator(){
      Iterator<MvccEntity> entities=entitySerializationStrategy.loadDescendingHistory(scope,entityId,version,1000);
      return entities;
    }
  }
).skip(numToSkip).buffer(serializationFig.getBufferSize()).doOnNext(new Action1<List<MvccEntity>>(){
    @Override public void call(    final List<MvccEntity> mvccEntities){
      final MutationBatch batch=keyspace.prepareMutationBatch();
      final MutationBatch entityBatch=keyspace.prepareMutationBatch();
      final MutationBatch logBatch=keyspace.prepareMutationBatch();
      for (      MvccEntity mvccEntity : mvccEntities) {
        final UUID entityVersion=mvccEntity.getVersion();
        if (mvccEntity.getEntity().isPresent()) {
          final Entity entity=mvccEntity.getEntity().get();
          for (          final Field field : entity.getFields()) {
            if (!field.isUnique()) {
              continue;
            }
            final UniqueValue unique=new UniqueValueImpl(field,entityId,entityVersion);
            final MutationBatch deleteMutation=uniqueValueSerializationStrategy.delete(scope,unique);
            batch.mergeShallow(deleteMutation);
          }
        }
        final MutationBatch entityDelete=entitySerializationStrategy.delete(scope,entityId,mvccEntity.getVersion());
        entityBatch.mergeShallow(entityDelete);
        final MutationBatch logDelete=logEntrySerializationStrategy.delete(scope,entityId,version);
        logBatch.mergeShallow(logDelete);
      }
      try {
        batch.execute();
      }
 catch (      ConnectionException e1) {
        throw new RuntimeException("Unable to execute " + "unique value " + "delete",e1);
      }
      fireEvents(mvccEntities);
      try {
        entityBatch.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete entities in cleanup",e);
      }
      try {
        logBatch.execute();
      }
 catch (      ConnectionException e) {
        throw new RuntimeException("Unable to delete entities from the log",e);
      }
    }
  }
);
  final int removedCount=deleteFieldsObservable.count().toBlocking().last();
  logger.debug("Removed unique values for {} entities of entity {}",removedCount,entityId);
  return null;
}
