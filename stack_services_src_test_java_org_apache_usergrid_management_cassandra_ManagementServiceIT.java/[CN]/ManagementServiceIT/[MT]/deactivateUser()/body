{
  UUID uuid=UUIDUtils.newTimeUUID();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","test" + uuid);
  properties.put("email",String.format("test%s@anuff.com",uuid));
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Entity entity=em.create("user",properties);
  assertNotNull(entity);
  User user=em.get(entity.getUuid(),User.class);
  assertFalse(user.activated());
  assertNull(user.getDeactivated());
  setup.getMgmtSvc().activateAppUser(applicationId,user.getUuid());
  em.refreshIndex();
  user=em.get(entity.getUuid(),User.class);
  assertTrue(user.activated());
  assertNull(user.getDeactivated());
  String token1=setup.getMgmtSvc().getAccessTokenForAppUser(applicationId,user.getUuid(),0);
  String token2=setup.getMgmtSvc().getAccessTokenForAppUser(applicationId,user.getUuid(),0);
  assertNotNull(setup.getTokenSvc().getTokenInfo(token1));
  assertNotNull(setup.getTokenSvc().getTokenInfo(token2));
  long startTime=System.currentTimeMillis();
  setup.getMgmtSvc().deactivateUser(applicationId,user.getUuid());
  long endTime=System.currentTimeMillis();
  user=em.get(entity.getUuid(),User.class);
  assertFalse(user.activated());
  assertNotNull(user.getDeactivated());
  assertTrue(startTime <= user.getDeactivated() && user.getDeactivated() <= endTime);
  boolean invalidTokenExcpetion=false;
  try {
    setup.getTokenSvc().getTokenInfo(token1);
  }
 catch (  InvalidTokenException ite) {
    invalidTokenExcpetion=true;
  }
  assertTrue(invalidTokenExcpetion);
  invalidTokenExcpetion=false;
  try {
    setup.getTokenSvc().getTokenInfo(token2);
  }
 catch (  InvalidTokenException ite) {
    invalidTokenExcpetion=true;
  }
  assertTrue(invalidTokenExcpetion);
}
