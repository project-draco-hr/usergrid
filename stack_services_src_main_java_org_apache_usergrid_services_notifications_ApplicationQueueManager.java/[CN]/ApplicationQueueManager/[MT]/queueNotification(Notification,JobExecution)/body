{
  final Meter queueMeter=metricsFactory.getMeter(ApplicationQueueManager.class,"queue");
  long startTime=System.currentTimeMillis();
  if (notification.getCanceled() == Boolean.TRUE) {
    LOG.info("ApplicationQueueMessage: notification " + notification.getUuid() + " canceled");
    if (jobExecution != null) {
      jobExecution.killed();
    }
    return;
  }
  LOG.info("ApplicationQueueMessage: notification {} start queuing",notification.getUuid());
  final PathQuery<Device> pathQuery=notification.getPathQuery();
  final AtomicInteger deviceCount=new AtomicInteger();
  final ConcurrentLinkedQueue<String> errorMessages=new ConcurrentLinkedQueue<String>();
  final HashMap<Object,Notifier> notifierMap=getNotifierMap();
  if (pathQuery != null) {
    LOG.info("ApplicationQueueMessage: notification {} start query",notification.getUuid());
    final Iterator<Device> iterator=pathQuery.iterator(em);
    if (iterator instanceof ResultsIterator && ((ResultsIterator)iterator).hasPages() && jobExecution == null) {
      jobScheduler.scheduleQueueJob(notification,true);
      return;
    }
    final CountMinSketch sketch=new CountMinSketch(0.0001,.99,7364181);
    final UUID appId=em.getApplication().getUuid();
    final Map<String,Object> payloads=notification.getPayloads();
    Observable o;
    final Func1<Entity,Entity> entityListFunct=new Func1<Entity,Entity>(){
      @Override public Entity call(      Entity entity){
        try {
          LOG.info("ApplicationQueueMessage: notification {} queue entity {}",notification.getUuid(),entity.getUuid());
          List<EntityRef> devicesRef=getDevices(entity);
          LOG.info("ApplicationQueueMessage: notification {} queue  {} devices",notification.getUuid(),devicesRef.size());
          for (          EntityRef deviceRef : devicesRef) {
            LOG.info("ApplicationQueueMessage: notification {} starting to queue device {} ",notification.getUuid(),deviceRef.getUuid());
            long hash=MurmurHash.hash(deviceRef.getUuid());
            if (sketch.estimateCount(hash) > 0) {
              LOG.debug("ApplicationQueueMessage: Maybe Found duplicate device: {}",deviceRef.getUuid());
              continue;
            }
 else {
              sketch.add(hash,1);
            }
            String notifierId=null;
            String notifierKey=null;
            for (            Map.Entry<String,Object> entry : payloads.entrySet()) {
              Notifier notifier=notifierMap.get(entry.getKey().toLowerCase());
              String providerId=getProviderId(deviceRef,notifier);
              if (providerId != null) {
                notifierId=providerId;
                notifierKey=entry.getKey().toLowerCase();
                break;
              }
            }
            if (notifierId == null) {
              LOG.debug("ApplicationQueueMessage: Notifier did not match for device {} ",deviceRef);
              continue;
            }
            ApplicationQueueMessage message=new ApplicationQueueMessage(appId,notification.getUuid(),deviceRef.getUuid(),notifierKey,notifierId);
            LOG.info("ApplicationQueueMessage: notification {} pre-queue to device {} ",notification.getUuid(),deviceRef.getUuid());
            qm.postToQueue(QUEUE_NAME,message);
            LOG.info("ApplicationQueueMessage: notification {} post-queue to device {} ",notification.getUuid(),deviceRef.getUuid());
            if (notification.getQueued() == null) {
              notification.setQueued(System.currentTimeMillis());
              em.update(notification);
              LOG.info("ApplicationQueueMessage: notification {} queue time set.",notification.getUuid(),deviceRef.getUuid());
            }
            deviceCount.incrementAndGet();
            queueMeter.mark();
          }
        }
 catch (        Exception deviceLoopException) {
          LOG.error("Failed to add devices",deviceLoopException);
          errorMessages.add("Failed to add devices for entity: " + entity.getUuid() + " error:"+ deviceLoopException);
        }
        return entity;
      }
    }
;
    LOG.info("ApplicationQueueMessage: notification {} start threading",notification.getUuid());
    o=rx.Observable.create(new IteratorObservable<Entity>(iterator)).parallel(new Func1<Observable<Entity>,Observable<Entity>>(){
      @Override public rx.Observable<Entity> call(      rx.Observable<Entity> deviceObservable){
        return deviceObservable.map(entityListFunct);
      }
    }
,Schedulers.io()).doOnError(new Action1<Throwable>(){
      @Override public void call(      Throwable throwable){
        LOG.error("Failed while writing",throwable);
      }
    }
);
    o.toBlocking().lastOrDefault(null);
  }
  Map<String,Object> properties=new HashMap<String,Object>(2);
  properties.put("queued",notification.getQueued());
  properties.put("state",notification.getState());
  if (errorMessages.size() > 0) {
    if (notification.getErrorMessage() == null) {
      notification.setErrorMessage("There was a problem delivering all of your notifications. See deliveryErrors in properties");
    }
  }
  notification.setExpectedCount(deviceCount.get());
  notification.addProperties(properties);
  em.update(notification);
  if (deviceCount.get() <= 0) {
    SingleQueueTaskManager taskManager=new SingleQueueTaskManager(em,qm,this,notification);
    taskManager.finishedBatch();
  }
  if (LOG.isInfoEnabled()) {
    long elapsed=notification.getQueued() != null ? notification.getQueued() - startTime : 0;
    LOG.info("ApplicationQueueMessage: notification {} done queuing to {} devices in " + elapsed + " ms",notification.getUuid().toString(),deviceCount.get());
    LOG.info("ApplicationQueueMessage: notification {} finished in {} ms",notification.getUuid().toString(),elapsed);
  }
}
