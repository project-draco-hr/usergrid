{
  final EntityManager em=setup.getEmf().getEntityManager(applicationId);
  logger.debug("\n\nCreate things collection\n");
  Map<UUID,Entity> thingsMap=new HashMap<>();
  List<Entity> things=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    final int count=i;
    Entity e=em.create("thing",new HashMap<String,Object>(){
{
        put("name","thing" + count);
        put("index",count);
      }
    }
);
    thingsMap.put(e.getUuid(),e);
    things.add(e);
  }
  logger.debug("\n\nCreate Connections\n");
  em.createConnection(new SimpleEntityRef("thing",things.get(0).getUuid()),"related",new SimpleEntityRef("thing",things.get(1).getUuid()));
  em.createConnection(new SimpleEntityRef("thing",things.get(1).getUuid()),"related",new SimpleEntityRef("thing",things.get(0).getUuid()));
  em.refreshIndex();
  logger.debug("\n\nExport\n");
  ExportService exportService=setup.getExportService();
  UUID exportUUID=exportService.schedule(new HashMap<String,Object>(){
{
      put("path",organization.getName() + em.getApplication().getName());
      put("organizationId",organization.getUuid());
      put("applicationId",applicationId);
      put("collectionName","things");
      put("properties",new HashMap<String,Object>(){
{
          put("storage_provider","s3");
          put("storage_info",new HashMap<String,Object>(){
{
              put(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR,System.getProperty(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR));
              put(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR,System.getProperty(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR));
              put("bucket_location",System.getProperty("bucketName"));
            }
          }
);
        }
      }
);
    }
  }
);
  while (!exportService.getState(exportUUID).equals("FINISHED")) {
    Thread.sleep(100);
  }
  logger.debug("\n\nImport\n");
  final UUID appId2=setup.getMgmtSvc().createApplication(organization.getUuid(),"noobapp").getId();
  final EntityManager em2=setup.getEmf().getEntityManager(appId2);
  ImportService importService=setup.getImportService();
  UUID importUUID=importService.schedule(new HashMap<String,Object>(){
{
      put("path",organization.getName() + em2.getApplication().getName());
      put("organizationId",organization.getUuid());
      put("applicationId",appId2);
      put("collectionName","things");
      put("properties",new HashMap<String,Object>(){
{
          put("storage_provider","s3");
          put("storage_info",new HashMap<String,Object>(){
{
              put(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR,System.getProperty(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR));
              put(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR,System.getProperty(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR));
              put("bucket_location",System.getProperty("bucketName"));
            }
          }
);
        }
      }
);
    }
  }
);
  while (!importService.getState(importUUID).equals("FINISHED")) {
    Thread.sleep(100);
  }
  em2.refreshIndex();
  try {
    logger.debug("\n\nCheck connections\n");
    List<Entity> importedThings=em2.getCollection(appId2,"things",null,Level.ALL_PROPERTIES).getEntities();
    assertTrue(!importedThings.isEmpty());
    int conCount=0;
    for (    Entity e : importedThings) {
      Results r=em2.getConnectedEntities(e,"related",null,Level.IDS);
      List<ConnectionRef> connections=r.getConnections();
      conCount+=connections.size();
    }
    assertEquals(2,conCount);
    logger.debug("\n\nCheck dictionary\n");
    EntityRef er;
    Map<Object,Object> dictionaries1, dictionaries2;
    for (int i=0; i < 3; i++) {
      er=importedThings.get(i);
      dictionaries1=em2.getDictionaryAsMap(er,"connected_types");
      dictionaries2=em2.getDictionaryAsMap(er,"connecting_types");
      if (i == 2) {
        assertThat(dictionaries1.size(),is(0));
        assertThat(dictionaries2.size(),is(0));
      }
 else {
        assertThat(dictionaries1.size(),is(not(0)));
        assertThat(dictionaries2.size(),is(not(0)));
      }
    }
    for (    Entity e : importedThings) {
      assertTrue(e.getModified() > thingsMap.get(e.getUuid()).getModified());
    }
  }
  finally {
    logger.debug("\n\nDelete bucket\n");
    deleteBucket();
  }
}
