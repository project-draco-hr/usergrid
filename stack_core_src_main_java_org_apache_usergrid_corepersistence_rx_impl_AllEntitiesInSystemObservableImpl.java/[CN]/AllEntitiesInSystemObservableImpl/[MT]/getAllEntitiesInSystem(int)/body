{
  return applicationObservable.getAllApplicationIds().flatMap(new Func1<Id,Observable<ApplicationEntityGroup>>(){
    @Override public Observable<ApplicationEntityGroup> call(    final Id applicationId){
      final ApplicationScope applicationScope=new ApplicationScopeImpl(applicationId);
      final GraphManager gm=graphManagerFactory.createEdgeManager(applicationScope);
      final Observable<Id> entityNodes=targetIdObservable.getTargetNodes(gm,applicationId);
      final Observable<Id> applicationNode=Observable.just(applicationId);
      return Observable.merge(applicationNode,entityNodes).buffer(bufferSize).map(new Func1<List<Id>,List<EntityIdScope>>(){
        @Override public List<EntityIdScope> call(        List<Id> ids){
          List<EntityIdScope> scopes=new ArrayList<>(ids.size());
          for (          Id id : ids) {
            CollectionScope scope=CpNamingUtils.getCollectionScopeNameFromEntityType(applicationId,id.getType());
            EntityIdScope idScope=new EntityIdScope(id,scope);
            scopes.add(idScope);
          }
          return scopes;
        }
      }
).map(new Func1<List<EntityIdScope>,ApplicationEntityGroup>(){
        @Override public ApplicationEntityGroup call(        final List<EntityIdScope> scopes){
          return new ApplicationEntityGroup(applicationScope,scopes);
        }
      }
);
    }
  }
);
}
