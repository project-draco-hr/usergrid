{
  Logger logger=LoggerFactory.getLogger(ExportServiceImpl.class);
  String bucketName=exportInfo.getBucket_location();
  String accessId=exportInfo.getS3_accessId();
  String secretKey=exportInfo.getS3_key();
  Properties overrides=new Properties();
  overrides.setProperty("s3" + ".identity",accessId);
  overrides.setProperty("s3" + ".credential",secretKey);
  final Iterable<? extends Module> MODULES=ImmutableSet.of(new JavaUrlHttpCommandExecutorServiceModule(),new Log4JLoggingModule(),new NettyPayloadModule());
  BlobStoreContext context=ContextBuilder.newBuilder("s3").credentials(accessId,secretKey).modules(MODULES).overrides(overrides).buildView(BlobStoreContext.class);
  try {
    AsyncBlobStore blobStore=context.getAsyncBlobStore();
    ListenableFuture<Boolean> container=blobStore.createContainerInLocation(null,bucketName);
    if (container.get()) {
      logger.info("Created bucket " + bucketName);
    }
  }
 catch (  Exception ex) {
    logger.error("Could not start binary service: {}",ex.getMessage());
    throw new RuntimeException(ex);
  }
  try {
    AsyncBlobStore blobStore=context.getAsyncBlobStore();
    BlobBuilder blobBuilder=blobStore.blobBuilder("test.json").payload(inputStream).calculateMD5().contentType("text/plain");
    Blob blob=blobBuilder.build();
    ListenableFuture<String> futureETag=blobStore.putBlob(bucketName,blob,PutOptions.Builder.multipart());
    logger.info("Uploaded file etag=" + futureETag.get());
  }
 catch (  Exception e) {
    logger.error("Error uploading to blob store",e);
  }
}
