{
  checkPermissionsForCollection(context);
  if (!query.hasQueryPredicates() && (query.getEntityType() != null) && query.containsNameOrEmailIdentifiersOnly()) {
    String name=query.getSingleNameOrEmailIdentifier();
    String nameProperty=Schema.getDefaultSchema().aliasProperty(query.getEntityType());
    if (nameProperty == null) {
      nameProperty="name";
    }
    Entity entity=em.getUniqueEntityFromAlias(query.getEntityType(),name);
    if (entity == null) {
      return null;
    }
    entity=importEntity(context,entity);
    return new ServiceResults(null,context,Type.CONNECTION,Results.fromEntity(entity),null,null);
  }
  int count=query.getLimit();
  Level level=Level.REFS;
  if (!context.moreParameters()) {
    count=Query.MAX_LIMIT;
    level=Level.ALL_PROPERTIES;
    if (logger.isDebugEnabled()) {
      logger.debug("Query does not have more parameters, overwriting limit to: {} and level to {}",count,level.name());
    }
  }
  if (context.getRequest().isReturnsTree()) {
    level=Level.ALL_PROPERTIES;
  }
  query.setLimit(query.getLimit(count));
  query.setResultsLevel(level);
  Results r=null;
  if (connecting()) {
    if (query.hasQueryPredicates()) {
      logger.debug("Attempted query of backwards connections");
      return null;
    }
 else {
      r=em.getSourceEntities(new SimpleEntityRef(context.getOwner().getType(),context.getOwner().getUuid()),query.getConnectionType(),query.getEntityType(),level,query.getLimit());
    }
  }
 else {
    r=em.searchTargetEntities(context.getOwner(),query);
  }
  importEntities(context,r);
  List<ServiceRequest> nextRequests=context.getNextServiceRequests(r.getRefs());
  return new ServiceResults(this,context,Type.CONNECTION,r,null,nextRequests);
}
