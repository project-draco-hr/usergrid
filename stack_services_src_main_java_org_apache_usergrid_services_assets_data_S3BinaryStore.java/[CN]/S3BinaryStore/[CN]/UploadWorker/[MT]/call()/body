{
  LOG.debug("Writing temp file for S3 upload");
  long maxSizeBytes=50 * FileUtils.ONE_MB;
  String maxSizeMbString=properties.getProperty("usergrid.binary.max-size-mb","50");
  if (StringUtils.isNumeric(maxSizeMbString)) {
    maxSizeBytes=Long.parseLong(maxSizeMbString) * FileUtils.ONE_MB;
  }
  if (maxSizeBytes < 5 * FileUtils.ONE_MB) {
    maxSizeBytes=5 * FileUtils.ONE_MB;
  }
  OutputStream os=null;
  File tempFile;
  try {
    tempFile=File.createTempFile(entity.getUuid().toString(),"tmp");
    tempFile.deleteOnExit();
    os=new BufferedOutputStream(new FileOutputStream(tempFile.getAbsolutePath()));
    os.write(data);
    written+=data.length;
    written+=IOUtils.copyLarge(inputStream,os,0,maxSizeBytes + 1);
    LOG.debug("Write temp file {} length {}",tempFile.getName(),written);
  }
 catch (  IOException e) {
    throw new RuntimeException("Error creating temp file",e);
  }
 finally {
    if (os != null) {
      try {
        os.flush();
      }
 catch (      IOException e) {
        LOG.error("Error flushing data to temporary upload file",e);
      }
      IOUtils.closeQuietly(os);
    }
  }
  Map<String,Object> fileMetadata=AssetUtils.getFileMetadata(entity);
  if (tempFile.length() > maxSizeBytes) {
    LOG.debug("File too large. Temp file size (bytes) = {}, " + "Max file size (bytes) = {} ",tempFile.length(),maxSizeBytes);
    try {
      EntityManager em=emf.getEntityManager(appId);
      fileMetadata.put("error","Asset size " + tempFile.length() + " is larger than max size of "+ maxSizeBytes);
      em.update(entity);
      tempFile.delete();
    }
 catch (    Exception e) {
      LOG.error("Error updating entity with error message",e);
    }
    return null;
  }
  String uploadFileName=AssetUtils.buildAssetKey(appId,entity);
  String mimeType=AssetMimeHandler.get().getMimeType(entity,data);
  try {
    LOG.debug("S3 upload thread started");
    BlobStore blobStore=getContext().getBlobStore();
    BlobBuilder.PayloadBlobBuilder bb=blobStore.blobBuilder(uploadFileName).payload(tempFile).contentMD5(Files.hash(tempFile,Hashing.md5())).contentType(mimeType);
    if (fileMetadata.get(AssetUtils.CONTENT_DISPOSITION) != null) {
      bb.contentDisposition(fileMetadata.get(AssetUtils.CONTENT_DISPOSITION).toString());
    }
    final Blob blob=bb.build();
    String md5sum=Hex.encodeHexString(blob.getMetadata().getContentMetadata().getContentMD5());
    fileMetadata.put(AssetUtils.CHECKSUM,md5sum);
    LOG.debug("S3 upload starting");
    String eTag=blobStore.putBlob(bucketName,blob);
    LOG.debug("S3 upload complete eTag=" + eTag);
    EntityManager em=emf.getEntityManager(appId);
    fileMetadata.put(AssetUtils.LAST_MODIFIED,System.currentTimeMillis());
    fileMetadata.put(AssetUtils.CONTENT_LENGTH,written);
    fileMetadata.put(AssetUtils.E_TAG,eTag);
    em.update(entity);
  }
 catch (  Exception e) {
    LOG.error("error uploading",e);
  }
  if (tempFile != null && tempFile.exists()) {
    tempFile.delete();
  }
  return null;
}
