{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  long written=IOUtils.copyLarge(inputStream,baos,0,FIVE_MB);
  byte[] data=baos.toByteArray();
  if (written < FIVE_MB) {
    final String uploadFileName=AssetUtils.buildAssetKey(appId,entity);
    final String mimeType=AssetMimeHandler.get().getMimeType(entity,data);
    final Map<String,Object> fileMetadata=AssetUtils.getFileMetadata(entity);
    fileMetadata.put(AssetUtils.LAST_MODIFIED,System.currentTimeMillis());
    BlobStore blobStore=getContext().getBlobStore();
    BlobBuilder.PayloadBlobBuilder bb=blobStore.blobBuilder(uploadFileName).payload(data).contentMD5(Hashing.md5().newHasher().putBytes(data).hash()).contentType(mimeType);
    fileMetadata.put(AssetUtils.CONTENT_LENGTH,written);
    if (fileMetadata.get(AssetUtils.CONTENT_DISPOSITION) != null) {
      bb.contentDisposition(fileMetadata.get(AssetUtils.CONTENT_DISPOSITION).toString());
    }
    final Blob blob=bb.build();
    String md5sum=Hex.encodeHexString(blob.getMetadata().getContentMetadata().getContentMD5());
    fileMetadata.put(AssetUtils.CHECKSUM,md5sum);
    String eTag=blobStore.putBlob(bucketName,blob);
    fileMetadata.put(AssetUtils.E_TAG,eTag);
  }
 else {
    ExecutorService executors=getExecutorService();
    executors.submit(new UploadWorker(appId,entity,inputStream,data,written));
  }
}
