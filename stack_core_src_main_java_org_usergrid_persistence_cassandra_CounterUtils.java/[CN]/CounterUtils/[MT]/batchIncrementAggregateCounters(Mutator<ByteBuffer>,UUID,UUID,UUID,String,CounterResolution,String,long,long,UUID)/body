{
  String[] segments=StringUtils.split(name,'.');
  for (int j=0; j < segments.length; j++) {
    name=StringUtils.join(segments,'.',0,j + 1);
    if ("system".equals(name)) {
      continue;
    }
    handleAggregateCounterRow(m,getAggregateCounterRow(name,null,null,null,null,resolution),resolution.round(counterTimestamp),value,applicationId);
    String currentRow=null;
    HashSet<String> rowSet=new HashSet<String>(16);
    for (int i=0; i < 16; i++) {
      boolean include_user=(i & 0x01) != 0;
      boolean include_group=(i & 0x02) != 0;
      boolean include_queue=(i & 0x04) != 0;
      boolean include_category=(i & 0x08) != 0;
      Object[] parameters={include_user ? userId : null,include_group ? groupId : null,include_queue ? queueId : null,include_category ? category : null};
      int non_null=0;
      for (      Object p : parameters) {
        if (p != null) {
          non_null++;
        }
      }
      currentRow=getAggregateCounterRow(name,(UUID)parameters[0],(UUID)parameters[1],(UUID)parameters[2],(String)parameters[3],resolution);
      if (non_null > 0 && !rowSet.contains(currentRow)) {
        rowSet.add(currentRow);
        handleAggregateCounterRow(m,currentRow,resolution.round(counterTimestamp),value,applicationId);
      }
    }
  }
}
