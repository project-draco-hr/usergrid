{
  install(new CommonModule());
  install(new CollectionModule(){
    /** 
 * configure our migration data provider for all entities in the system
 */
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<EntityIdScope>>(){
      }
).to(AllEntitiesInSystemImpl.class);
    }
  }
);
  install(new GraphModule(){
    /** 
 * Override the observable that needs to be used for migration
 */
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<GraphNode>>(){
      }
).to(AllNodesInGraphImpl.class);
    }
  }
);
  install(new IndexModule(){
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<ApplicationScope>>(){
      }
).to(AllApplicationsObservable.class);
    }
  }
);
  bind(ManagerCache.class).to(CpManagerCache.class);
  bind(ApplicationIdCacheFactory.class);
  Multibinder<EntityDeleted> entityBinder=Multibinder.newSetBinder(binder(),EntityDeleted.class);
  entityBinder.addBinding().to(EntityDeletedHandler.class);
  Multibinder<EntityVersionDeleted> versionBinder=Multibinder.newSetBinder(binder(),EntityVersionDeleted.class);
  versionBinder.addBinding().to(EntityVersionDeletedHandler.class);
  Multibinder<EntityVersionCreated> versionCreatedMultibinder=Multibinder.newSetBinder(binder(),EntityVersionCreated.class);
  versionCreatedMultibinder.addBinding().to(EntityVersionCreatedHandler.class);
  Multibinder<DataMigration<EntityIdScope>> dataMigrationMultibinder=Multibinder.newSetBinder(binder(),new TypeLiteral<DataMigration<EntityIdScope>>(){
  }
,CoreMigration.class);
  dataMigrationMultibinder.addBinding().to(EntityTypeMappingMigration.class);
  final Multibinder<MigrationPlugin> plugins=Multibinder.newSetBinder(binder(),MigrationPlugin.class);
  plugins.addBinding().to(CoreMigrationPlugin.class);
  plugins.addBinding().to(AppInfoMigrationPlugin.class);
  plugins.addBinding().to(MigrationModuleVersionPlugin.class);
  bind(AllApplicationsObservable.class).to(AllApplicationsObservableImpl.class);
  bind(IndexService.class).to(IndexServiceImpl.class);
  bind(BufferQueue.class).toProvider(QueueProvider.class);
  install(new GuicyFigModule(QueryFig.class));
  install(new GuicyFigModule(ApplicationIdCacheFig.class));
}
