{
  install(new CommonModule());
  install(new LockModule());
  install(new CacheModule());
  install(new CollectionModule(){
    /** 
 * configure our migration data provider for all entities in the system
 */
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<EntityIdScope>>(){
      }
).to(AllEntitiesInSystemImpl.class);
    }
  }
);
  install(new GraphModule(){
    /** 
 * Override the observable that needs to be used for migration
 */
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<GraphNode>>(){
      }
).to(AllNodesInGraphImpl.class);
    }
  }
);
  install(new IndexModule(){
    @Override public void configureMigrationProvider(){
      bind(new TypeLiteral<MigrationDataProvider<ApplicationScope>>(){
      }
).to(AllApplicationsObservableImpl.class);
    }
  }
);
  bind(ManagerCache.class).to(CpManagerCache.class);
  bind(ApplicationIdCacheFactory.class);
  bind(CollectionSettingsCacheFactory.class);
  Multibinder<DataMigration> dataMigrationMultibinder=Multibinder.newSetBinder(binder(),new TypeLiteral<DataMigration>(){
  }
,CoreMigration.class);
  dataMigrationMultibinder.addBinding().to(DeDupConnectionDataMigration.class);
  final Multibinder<MigrationPlugin> plugins=Multibinder.newSetBinder(binder(),MigrationPlugin.class);
  plugins.addBinding().to(CoreMigrationPlugin.class);
  bind(AllApplicationsObservable.class).to(AllApplicationsObservableImpl.class);
  bind(AllEntityIdsObservable.class).to(AllEntityIdsObservableImpl.class);
  bind(IndexService.class).to(IndexServiceImpl.class);
  bind(EventBuilder.class).to(EventBuilderImpl.class);
  bind(ApplicationIndexBucketLocator.class);
  bind(AsyncEventService.class).toProvider(AsyncIndexProvider.class);
  bind(ReIndexService.class).to(ReIndexServiceImpl.class);
  install(new FactoryModuleBuilder().implement(AggregationService.class,AggregationServiceImpl.class).build(AggregationServiceFactory.class));
  bind(IndexLocationStrategyFactory.class).to(IndexLocationStrategyFactoryImpl.class);
  install(new GuicyFigModule(IndexProcessorFig.class));
  install(new GuicyFigModule(CoreIndexFig.class));
  install(new GuicyFigModule(ApplicationIdCacheFig.class));
  install(new GuicyFigModule(IndexSchemaCacheFig.class));
  install(new GuicyFigModule(EntityManagerFig.class));
  install(new GuicyFigModule(AsyncEventsSchedulerFig.class));
  install(new GuicyFigModule(ServiceSchedulerFig.class));
  install(new PipelineModule());
  bind(CollectionService.class).to(CollectionServiceImpl.class);
  bind(ConnectionService.class).to(ConnectionServiceImpl.class);
  bind(ApplicationService.class).to(ApplicationServiceImpl.class);
  bind(StatusService.class).to(StatusServiceImpl.class);
}
