{
  FilterPredicate filter=null;
  QueryFilterParser.property_return property1=null;
  QueryFilterParser.operator_return operator2=null;
  QueryFilterParser.value_return value3=null;
  QueryFilterParser.second_value_return second_value4=null;
  try {
{
      pushFollow(FOLLOW_property_in_filter716);
      property1=property();
      state._fsp--;
      pushFollow(FOLLOW_operator_in_filter718);
      operator2=operator();
      state._fsp--;
      pushFollow(FOLLOW_value_in_filter720);
      value3=value();
      state._fsp--;
      int alt1=2;
      int LA1_0=input.LA(1);
      if ((LA1_0 == 28)) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          match(input,28,FOLLOW_28_in_filter723);
          pushFollow(FOLLOW_second_value_in_filter725);
          second_value4=second_value();
          state._fsp--;
        }
      break;
  }
  String property=(property1 != null ? input.toString(property1.start,property1.stop) : null);
  String operator=(operator2 != null ? input.toString(operator2.start,operator2.stop) : null);
  String value=(value3 != null ? input.toString(value3.start,value3.stop) : null);
  String second_value=(second_value4 != null ? input.toString(second_value4.start,second_value4.stop) : null);
  filter=new FilterPredicate(property,operator,value,second_value);
  match(input,EOF,FOLLOW_EOF_in_filter731);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}
