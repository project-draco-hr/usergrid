{
  FilterPredicate filter=null;
  QueryFilterParser.property_return property1=null;
  QueryFilterParser.operator_return operator2=null;
  QueryFilterParser.value_return value3=null;
  QueryFilterParser.second_value_return second_value4=null;
  QueryFilterParser.third_value_return third_value5=null;
  try {
{
      pushFollow(FOLLOW_property_in_filter747);
      property1=property();
      state._fsp--;
      pushFollow(FOLLOW_operator_in_filter749);
      operator2=operator();
      state._fsp--;
      pushFollow(FOLLOW_value_in_filter751);
      value3=value();
      state._fsp--;
      int alt2=2;
      int LA2_0=input.LA(1);
      if (((LA2_0 >= 29 && LA2_0 <= 30))) {
        alt2=1;
      }
switch (alt2) {
case 1:
{
          if ((input.LA(1) >= 29 && input.LA(1) <= 30)) {
            input.consume();
            state.errorRecovery=false;
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            throw mse;
          }
          pushFollow(FOLLOW_second_value_in_filter762);
          second_value4=second_value();
          state._fsp--;
          int alt1=2;
          int LA1_0=input.LA(1);
          if ((LA1_0 == 29)) {
            alt1=1;
          }
switch (alt1) {
case 1:
{
              match(input,29,FOLLOW_29_in_filter766);
              pushFollow(FOLLOW_third_value_in_filter768);
              third_value5=third_value();
              state._fsp--;
            }
          break;
      }
    }
  break;
}
String property=(property1 != null ? input.toString(property1.start,property1.stop) : null);
String operator=(operator2 != null ? input.toString(operator2.start,operator2.stop) : null);
String value=(value3 != null ? input.toString(value3.start,value3.stop) : null);
String second_value=(second_value4 != null ? input.toString(second_value4.start,second_value4.stop) : null);
String third_value=(third_value5 != null ? input.toString(third_value5.start,third_value5.stop) : null);
filter=new FilterPredicate(property,operator,value,second_value,third_value);
match(input,EOF,FOLLOW_EOF_in_filter777);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return filter;
}
