{
  logger.info("Waiting on request actor {}...",ra.path());
  boolean started=false;
  int retries=0;
  int maxRetries=60;
  while (retries < maxRetries) {
    Timeout t=new Timeout(10,TimeUnit.SECONDS);
    Future<Object> fut=Patterns.ask(ra,new ClientActor.StatusRequest(),t);
    try {
      ClientActor.StatusMessage result=(ClientActor.StatusMessage)Await.result(fut,t.duration());
      if (result.getStatus().equals(ClientActor.StatusMessage.Status.READY)) {
        started=true;
        break;
      }
      logger.info("Waiting for request actor {} region {} ({}s)",ra.path(),currentRegion,retries);
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      logger.error("Error: Timeout waiting for requestActor");
    }
    retries++;
  }
  if (started) {
    logger.info("RequestActor has started");
  }
 else {
    throw new RuntimeException("RequestActor did not start in time");
  }
}
