{
  if (logger.isTraceEnabled()) {
    logger.trace("ApplicationResource /authorize: {}/{}",username,password);
  }
  try {
    responseType=response_type;
    clientId=client_id;
    redirectUri=redirect_uri;
    this.scope=scope;
    this.state=state;
    User user=null;
    String errorDescription="Username or password do not match";
    try {
      user=management.verifyAppUserPasswordCredentials(services.getApplicationId(),username,password);
    }
 catch (    UnactivatedAdminUserException uaue) {
      errorDescription="user not activated";
    }
catch (    DisabledAdminUserException daue) {
      errorDescription="user disabled";
    }
catch (    Exception e1) {
      logger.warn("Unexpected exception in authorize username/password verification",e1);
    }
    if ((user != null) && isNotBlank(redirect_uri)) {
      String authorizationCode=management.getAccessTokenForAppUser(services.getApplicationId(),user.getUuid(),0);
      redirect_uri=buildRedirectUriWithAuthCode(redirect_uri,state,authorizationCode);
      throw new RedirectionException(redirect_uri);
    }
 else {
      errorMsg=errorDescription;
    }
    ApplicationInfo app=management.getApplicationInfo(applicationId);
    applicationName=app.getName();
    return Response.ok(handleViewable("authorize_form",this,getOrganizationName())).build();
  }
 catch (  RedirectionException e) {
    throw e;
  }
catch (  Exception e) {
    logger.error("handleAuthorizeForm failed",e);
    return Response.ok(handleViewable("error",this,getOrganizationName())).build();
  }
}
