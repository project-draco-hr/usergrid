{
  final Id applicationId=new SimpleId("application");
  ApplicationScope context=new ApplicationScopeImpl(applicationId);
  final UUID entityId=UUIDGenerator.newTimeUUID();
  final UUID version1=UUIDGenerator.newTimeUUID();
  final String type="test";
  final Id id=new SimpleId(entityId,type);
  Entity entityv1=new Entity(id);
  EntityUtils.setVersion(entityv1,version1);
  MvccEntity saved=new MvccEntityImpl(id,version1,MvccEntity.Status.COMPLETE,Optional.of(entityv1));
  serializationStrategy.write(context,saved).execute();
  MvccEntity returnedV1=serializationStrategy.load(context,Collections.singleton(id),version1).getEntity(id);
  assertEquals("Mvcc entities are the same",saved,returnedV1);
  Entity entityv2=new Entity(id);
  UUID version2=UUIDGenerator.newTimeUUID();
  EntityUtils.setVersion(entityv1,version2);
  MvccEntity savedV2=new MvccEntityImpl(id,version2,MvccEntity.Status.COMPLETE,Optional.of(entityv2));
  serializationStrategy.write(context,savedV2).execute();
  MvccEntity returnedV2=serializationStrategy.load(context,Collections.singleton(id),version2).getEntity(id);
  assertEquals("Mvcc entities are the same",savedV2,returnedV2);
  UUID version3=UUIDGenerator.newTimeUUID();
  serializationStrategy.mark(context,id,version3).execute();
  final Optional<Entity> empty=Optional.absent();
  MvccEntity clearedV3=new MvccEntityImpl(id,version3,MvccEntity.Status.DELETED,empty);
  MvccEntity returnedV3=serializationStrategy.load(context,Collections.singleton(id),version3).getEntity(id);
  assertEquals("entities are the same",clearedV3,returnedV3);
  UUID current=UUIDGenerator.newTimeUUID();
  MvccEntity first=serializationStrategy.load(context,id).get();
  assertEquals(clearedV3,first);
  serializationStrategy.delete(context,id,version1).execute();
  serializationStrategy.delete(context,id,version2).execute();
  first=serializationStrategy.load(context,id).get();
  assertEquals(clearedV3,first);
  serializationStrategy.delete(context,id,version3).execute();
  assertFalse("Not loaded",serializationStrategy.load(context,id).isPresent());
}
