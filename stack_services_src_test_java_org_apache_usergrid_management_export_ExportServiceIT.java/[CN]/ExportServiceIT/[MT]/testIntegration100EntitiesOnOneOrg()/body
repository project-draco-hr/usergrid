{
  S3Export s3Export=new S3ExportImpl();
  ExportService exportService=setup.getExportService();
  HashMap<String,Object> payload=payloadBuilder();
  payload.put("organizationId",organization.getUuid());
  payload.put("applicationId",applicationId);
  OrganizationInfo orgMade=null;
  ApplicationInfo appMade=null;
  for (int i=0; i < 100; i++) {
    orgMade=setup.getMgmtSvc().createOrganization("largerboss" + i,adminUser,true);
    appMade=setup.getMgmtSvc().createApplication(orgMade.getUuid(),"superapp" + i);
    EntityManager customMaker=setup.getEmf().getEntityManager(appMade.getId());
    customMaker.createApplicationCollection("superappCol" + i);
    Map<String,Object> entityLevelProperties=null;
    Entity[] entNotCopied;
    entNotCopied=new Entity[20];
    for (int index=0; index < 20; index++) {
      entityLevelProperties=new LinkedHashMap<String,Object>();
      entityLevelProperties.put("username","bobso" + index);
      entityLevelProperties.put("email","derp" + index + "@anuff.com");
      entNotCopied[index]=customMaker.create("superappCol",entityLevelProperties);
    }
  }
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Map<String,Object> userProperties=null;
  Entity[] entity;
  entity=new Entity[100];
  for (int i=0; i < 100; i++) {
    userProperties=new LinkedHashMap<String,Object>();
    userProperties.put("username","bido" + i);
    userProperties.put("email","bido" + i + "@anuff.com");
    entity[i]=em.create("user",userProperties);
  }
  UUID exportUUID=exportService.schedule(payload);
  JobData jobData=jobDataCreator(payload,exportUUID,s3Export);
  JobExecution jobExecution=mock(JobExecution.class);
  when(jobExecution.getJobData()).thenReturn(jobData);
  exportService.doExport(jobExecution);
  while (!exportService.getState(exportUUID).equals("FINISHED")) {
    ;
  }
  String bucketName=System.getProperty("bucketName");
  String accessId=System.getProperty(SDKGlobalConfiguration.ACCESS_KEY_ENV_VAR);
  String secretKey=System.getProperty(SDKGlobalConfiguration.SECRET_KEY_ENV_VAR);
  Properties overrides=new Properties();
  overrides.setProperty("s3" + ".identity",accessId);
  overrides.setProperty("s3" + ".credential",secretKey);
  Blob bo=null;
  BlobStore blobStore=null;
  try {
    final Iterable<? extends Module> MODULES=ImmutableSet.of(new JavaUrlHttpCommandExecutorServiceModule(),new Log4JLoggingModule(),new NettyPayloadModule());
    BlobStoreContext context=ContextBuilder.newBuilder("s3").credentials(accessId,secretKey).modules(MODULES).overrides(overrides).buildView(BlobStoreContext.class);
    String expectedFileName=((ExportServiceImpl)exportService).prepareOutputFileName("organization",organization.getName(),"applications");
    blobStore=context.getBlobStore();
    if (!blobStore.blobExists(bucketName,expectedFileName)) {
      assert(false);
    }
    Long numOfFiles=blobStore.countBlobs(bucketName);
    Long numWeWant=Long.valueOf(1);
    assertEquals(numOfFiles,numWeWant);
    bo=blobStore.getBlob(bucketName,expectedFileName);
  }
 catch (  Exception e) {
    assert(false);
  }
  assertNotNull(bo);
  blobStore.deleteContainer(bucketName);
}
