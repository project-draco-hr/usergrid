{
  ApplicationScope context=new ApplicationScopeImpl(new SimpleId("organization"));
  final EntityCollectionManager manager=factory.createCollectionManager(context);
  final Entity newEntity=new Entity(new SimpleId("test"));
  final Entity v1Created=manager.write(newEntity).toBlocking().lastOrDefault(null);
  assertNotNull("Id was assigned",v1Created.getId());
  assertNotNull("Version was assigned",v1Created.getVersion());
  final UUID v1Version=v1Created.getVersion();
  final VersionSet resultsV1=manager.getLatestVersion(Arrays.asList(v1Created.getId())).toBlocking().last();
  final MvccLogEntry version1Log=resultsV1.getMaxVersion(v1Created.getId());
  assertEquals(v1Created.getId(),version1Log.getEntityId());
  assertEquals(v1Version,version1Log.getVersion());
  assertEquals(MvccLogEntry.State.COMPLETE,version1Log.getState());
  assertEquals(Stage.COMMITTED,version1Log.getStage());
  final Entity v2Created=manager.write(v1Created).toBlocking().last();
  final UUID v2Version=v2Created.getVersion();
  assertTrue("Newer version in v2",UUIDComparator.staticCompare(v2Version,v1Version) > 0);
  final VersionSet resultsV2=manager.getLatestVersion(Arrays.asList(v1Created.getId())).toBlocking().last();
  final MvccLogEntry version2Log=resultsV2.getMaxVersion(v1Created.getId());
  assertEquals(v1Created.getId(),version2Log.getEntityId());
  assertEquals(v2Version,version2Log.getVersion());
  assertEquals(MvccLogEntry.State.COMPLETE,version2Log.getState());
  assertEquals(Stage.COMMITTED,version2Log.getStage());
}
