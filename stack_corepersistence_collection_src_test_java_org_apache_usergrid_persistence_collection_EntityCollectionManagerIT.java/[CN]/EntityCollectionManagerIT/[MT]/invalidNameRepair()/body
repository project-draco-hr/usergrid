{
  CollectionScope context=new CollectionScopeImpl(new SimpleId("organization"),new SimpleId("test"),"test");
  Entity newEntity=new Entity(new SimpleId("test"));
  final IntegerField expectedInteger=new IntegerField("count",5,true);
  newEntity.setField(expectedInteger);
  EntityCollectionManager manager=factory.createCollectionManager(context);
  Observable<Entity> observable=manager.write(newEntity);
  Entity createReturned=observable.toBlocking().lastOrDefault(null);
  assertNotNull("Need entity to be created before proceeding",createReturned);
  assertNotNull("Id was assigned",createReturned.getId());
  assertNotNull("Version was assigned",createReturned.getVersion());
  FieldSet fieldResults=manager.getEntitiesFromFields(Arrays.<Field>asList(expectedInteger)).toBlocking().last();
  assertEquals(1,fieldResults.size());
  assertEquals("Same value",createReturned,fieldResults.getEntity(expectedInteger).getEntity().get());
  entitySerializationStrategy.delete(context,createReturned.getId(),createReturned.getVersion()).execute();
  final FieldSet results=manager.getEntitiesFromFields(Arrays.<Field>asList(expectedInteger)).toBlocking().last();
  assertTrue(results.isEmpty());
  UniqueValueSet uniqueValues=uniqueValueSerializationStrategy.load(context,createReturned.getFields());
  assertFalse(uniqueValues.iterator().hasNext());
}
