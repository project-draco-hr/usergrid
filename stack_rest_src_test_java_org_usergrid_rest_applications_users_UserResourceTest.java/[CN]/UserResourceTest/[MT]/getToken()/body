{
  createUser("test_1","test_1@test.com","test123","Test1 User");
  createUser("test_2","test_2@test.com","test123","Test2 User");
  createUser("test_3","test_3@test.com","test123","Test3 User");
  ApplicationInfo appInfo=managementService.getApplicationInfo("test-organization/test-app");
  String clientId=managementService.getClientIdForApplication(appInfo.getId());
  String clientSecret=managementService.getClientSecretForApplication(appInfo.getId());
  JsonNode node=resource().path("/test-organization/test-app/users/test_1/token").queryParam("client_id",clientId).queryParam("client_secret",clientSecret).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  String user_token_from_client_credentials=node.get("access_token").asText();
  UUID userId=UUID.fromString(node.get("user").get("uuid").asText());
  managementService.activateAppUser(appInfo.getId(),userId);
  String user_token_from_java=managementService.getAccessTokenForAppUser(appInfo.getId(),userId,1000000);
  assertNotNull(user_token_from_client_credentials);
  Status status=null;
  try {
    resource().path("/test-organization/test-app/users/test_1/token").queryParam("access_token","blah").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.FORBIDDEN,status);
  try {
    resource().path("/test-organization/test-app/users/test_2/token").queryParam("access_token",user_token_from_client_credentials).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  }
 catch (  UniformInterfaceException uie) {
    status=uie.getResponse().getClientResponseStatus();
    log.info("Error Response Body: " + uie.getResponse().getEntity(String.class));
  }
  assertEquals(Status.FORBIDDEN,status);
  JsonNode response=null;
  response=resource().path("/test-organization/test-app/users/test_1").queryParam("access_token",user_token_from_client_credentials).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertNotNull(getEntity(response,0));
  response=resource().path("/test-organization/test-app/users/test_1").queryParam("access_token",user_token_from_java).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
  assertNotNull(getEntity(response,0));
}
