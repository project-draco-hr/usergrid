{
  final int size=10;
  final ThreadFactory factory=new ThreadFactory(){
    private final AtomicLong counter=new AtomicLong();
    @Override public Thread newThread(    final Runnable r){
      final String threadName="RxCassandraIOThreadPool-" + counter.incrementAndGet();
      LOG.debug("Allocating new IO thread with name {}",threadName);
      Thread t=new Thread(r,threadName);
      t.setDaemon(true);
      return t;
    }
  }
;
  final ScheduledThreadPoolExecutor pool=new ScheduledThreadPoolExecutor(10,factory,new ThreadPoolExecutor.AbortPolicy());
  pool.setMaximumPoolSize(10);
  pool.setKeepAliveTime(60,TimeUnit.SECONDS);
  final CountDownLatch latch=new CountDownLatch(size);
  final Semaphore semaphore=new Semaphore(0);
  for (int i=0; i < size; i++) {
    pool.schedule(new Callable<Object>(){
      @Override public Object call() throws Exception {
        latch.countDown();
        semaphore.acquire();
        return null;
      }
    }
,0,TimeUnit.MILLISECONDS);
  }
  latch.await();
  pool.schedule(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return null;
    }
  }
,0,TimeUnit.MILLISECONDS);
}
