{
  final int startCount=10;
  ConfigurationManager.getConfigInstance().setProperty(PROP_NAME,"" + startCount);
  final DynamicIntProperty maxThreads=new DynamicIntProperty(PROP_NAME,startCount);
  final CassandraThreadScheduler cassSchedulerSetup=new CassandraThreadScheduler(maxThreads);
  final Scheduler rxScheduler=cassSchedulerSetup.get();
  final Semaphore semaphore=new Semaphore(0,true);
  CountDownLatch firstBatch=schedule(rxScheduler,maxThreads.get(),semaphore);
  try {
    rxScheduler.schedule(new Action0(){
      @Override public void call(){
      }
    }
);
    fail("This should have thrown an exception");
  }
 catch (  RejectedExecutionException ree) {
  }
  final int doubleMaxCount=startCount * 2;
  ConfigurationManager.getConfigInstance().setProperty(PROP_NAME,"" + doubleMaxCount);
  CountDownLatch secondBatch=schedule(rxScheduler,maxThreads.get() - startCount,semaphore);
  try {
    rxScheduler.schedule(new Action0(){
      @Override public void call(){
      }
    }
);
    fail("This should have thrown an exception");
  }
 catch (  RejectedExecutionException ree) {
  }
  semaphore.release(maxThreads.get());
  boolean completed=firstBatch.await(20,TimeUnit.SECONDS);
  assertTrue("Completed executing actions",completed);
  completed=secondBatch.await(20,TimeUnit.SECONDS);
  assertTrue("Completed executing actions",completed);
  CountDownLatch result=schedule(rxScheduler,1,semaphore);
  semaphore.release(1);
  completed=result.await(20,TimeUnit.SECONDS);
  assertTrue("Completed executing actions",completed);
}
