{
  final MigrationInfoSerialization serialization=mock(MigrationInfoSerialization.class);
  when(serialization.getCurrentVersion()).thenReturn(1);
  final ApplicationDataMigration v1=mock(ApplicationDataMigration.class);
  when(v1.getVersion()).thenReturn(2);
  when(v1.migrate(any(Observable.class),any(DataMigration.ProgressObserver.class))).thenReturn(Observable.empty());
  final ApplicationDataMigration v2=mock(ApplicationDataMigration.class);
  when(v2.getVersion()).thenReturn(3);
  when(v2.migrate(any(Observable.class),any(DataMigration.ProgressObserver.class))).thenReturn(Observable.empty());
  Set<ApplicationDataMigration> migrations=new HashSet<>();
  migrations.add(v1);
  migrations.add(v2);
  Set<CollectionDataMigration> collectionDataMigrations=new HashSet<>();
  DataMigrationManagerImpl migrationManager=new DataMigrationManagerImpl(serialization,migrations,collectionDataMigrations,allEntitiesInSystemObservable,allApplicationsObservable);
  migrationManager.migrate();
  verify(v1).migrate(any(Observable.class),any(DataMigration.ProgressObserver.class));
  verify(v2).migrate(any(Observable.class),any(DataMigration.ProgressObserver.class));
  verify(serialization,times(2)).setStatusCode(DataMigrationManagerImpl.StatusCode.RUNNING.status);
  verify(serialization,times(2 * 2)).setStatusMessage(any(String.class));
  verify(serialization).setStatusCode(DataMigrationManagerImpl.StatusCode.COMPLETE.status);
  verify(serialization).setVersion(2);
  verify(serialization).setVersion(3);
}
