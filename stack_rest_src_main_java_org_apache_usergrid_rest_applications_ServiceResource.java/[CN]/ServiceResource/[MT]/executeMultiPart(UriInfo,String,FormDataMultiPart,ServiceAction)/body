{
  if (properties.getProperty(PROPERTIES_USERGRID_BINARY_UPLOADER).equals("local")) {
    this.binaryStore=localFileBinaryStore;
  }
 else {
    this.binaryStore=awsSdkS3BinaryStore;
  }
  List<BodyPart> bodyParts=multiPart.getBodyParts();
  HashMap<String,Object> data=new HashMap<String,Object>();
  for (  BodyPart bp : bodyParts) {
    FormDataBodyPart bodyPart=(FormDataBodyPart)bp;
    if (bodyPart.getMediaType().equals(MediaType.TEXT_PLAIN_TYPE)) {
      data.put(bodyPart.getName(),bodyPart.getValue());
    }
 else {
      logger.info("skipping bodyPart {} of media type {}",bodyPart.getName(),bodyPart.getMediaType());
    }
  }
  FormDataBodyPart fileBodyPart=multiPart.getField(FILE_FIELD_NAME);
  if (data.isEmpty() && fileBodyPart != null) {
    data.put(AssetUtils.FILE_METADATA,new HashMap());
  }
  ApiResponse response=createApiResponse();
  response.setAction(serviceAction.name().toLowerCase());
  response.setApplication(services.getApplication());
  response.setParams(ui.getQueryParameters());
  ServicePayload payload=getPayload(data);
  ServiceResults serviceResults=executeServiceRequest(ui,response,serviceAction,payload);
  if (fileBodyPart != null) {
    InputStream fileInput=((BodyPartEntity)fileBodyPart.getEntity()).getInputStream();
    if (fileInput != null) {
      Entity entity=serviceResults.getEntity();
      EntityManager em=emf.getEntityManager(getApplicationId());
      try {
        binaryStore.write(getApplicationId(),entity,fileInput);
      }
 catch (      AwsPropertiesNotFoundException apnfe) {
        logger.error("Amazon Property needed for this operation not found",apnfe);
        response.setError("500","Amazon Property needed for this operation not found",apnfe);
      }
catch (      RuntimeException re) {
        logger.error(re.getMessage());
        response.setError("500",re);
      }
      em.update(entity);
      serviceResults.setEntity(entity);
    }
  }
  return new JSONWithPadding(response,callback);
}
