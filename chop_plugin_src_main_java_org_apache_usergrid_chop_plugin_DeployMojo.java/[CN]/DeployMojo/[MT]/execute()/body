{
  initCertStore();
  File source=getRunnerFile();
  if (source.exists()) {
    LOG.info("{} exists!",source.getAbsolutePath());
  }
 else {
    LOG.info("{} does not exist.",source.getAbsolutePath());
  }
  if (!isReadyToDeploy()) {
    LOG.info("{} is NOT present to upload, calling chop:runner goal now...",RUNNER_JAR);
    RunnerMojo runnerMojo=new RunnerMojo(this);
    runnerMojo.execute();
  }
  if (!isReadyToDeploy()) {
    throw new MojoExecutionException("Files to be deployed are not ready and chop:runner failed");
  }
  Properties props=new Properties();
  try {
    File extractedConfigPropFile=new File(getExtractedRunnerPath(),PROJECT_FILE);
    FileInputStream inputStream=new FileInputStream(extractedConfigPropFile);
    props.load(inputStream);
    inputStream.close();
  }
 catch (  Exception e) {
    LOG.error("Error while reading project.properties in runner.jar",e);
    throw new MojoExecutionException(e.getMessage());
  }
  DefaultClientConfig clientConfig=new DefaultClientConfig();
  Client client=Client.create(clientConfig);
  WebResource resource=client.resource(endpoint).path("/upload");
  ClientResponse uploadResponse=resource.path("/status").queryParam(RestParams.COMMIT_ID,props.getProperty(Project.GIT_UUID_KEY)).queryParam(RestParams.MODULE_ARTIFACTID,props.getProperty(Project.ARTIFACT_ID_KEY)).queryParam(RestParams.MODULE_GROUPID,props.getProperty(Project.GROUP_ID_KEY)).queryParam(RestParams.MODULE_VERSION,props.getProperty(Project.PROJECT_VERSION_KEY)).queryParam(RestParams.USERNAME,username).queryParam(RestParams.TEST_PACKAGE,props.getProperty(Project.TEST_PACKAGE_BASE)).queryParam(RestParams.MD5,props.getProperty(Project.MD5_KEY)).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  String uploadResponseMessage=uploadResponse.getEntity(String.class);
  if (uploadResponseMessage.equals(SetupStackState.JarAlreadyDeployed.getMessage())) {
    LOG.info(uploadResponseMessage);
    return;
  }
  FormDataMultiPart multipart=new FormDataMultiPart();
  try {
    multipart.field(RestParams.COMMIT_ID,props.getProperty(Project.GIT_UUID_KEY));
    multipart.field(RestParams.MODULE_GROUPID,props.getProperty(Project.GROUP_ID_KEY));
    multipart.field(RestParams.MODULE_ARTIFACTID,props.getProperty(Project.ARTIFACT_ID_KEY));
    multipart.field(RestParams.MODULE_VERSION,props.getProperty(Project.PROJECT_VERSION_KEY));
    multipart.field(RestParams.USERNAME,username);
    multipart.field(RestParams.VCS_REPO_URL,props.getProperty(Project.GIT_URL_KEY));
    multipart.field(RestParams.TEST_PACKAGE,props.getProperty(Project.TEST_PACKAGE_BASE));
    multipart.field(RestParams.MD5,props.getProperty(Project.MD5_KEY));
    FileInputStream in=new FileInputStream(source);
    FormDataBodyPart body=new FormDataBodyPart(RestParams.CONTENT,in,MediaType.APPLICATION_OCTET_STREAM_TYPE);
    multipart.bodyPart(body);
  }
 catch (  Exception e) {
    LOG.error("Error while preparing upload data",e);
    throw new MojoExecutionException(e.getMessage());
  }
  clientConfig=new DefaultClientConfig();
  client=Client.create(clientConfig);
  resource=client.resource(endpoint).path("/upload");
  ClientResponse resp=resource.path("/runner").type(MediaType.MULTIPART_FORM_DATA).accept(MediaType.TEXT_PLAIN).post(ClientResponse.class,multipart);
  String responseMessage=resp.getEntity(String.class);
  if (resp.getStatus() == Response.Status.CREATED.getStatusCode()) {
    LOG.info("Runner Jar uploaded to coordinator successfully on path: {}",responseMessage);
  }
 else {
    LOG.error("Could not upload successfully, HTTP status: ",resp.getStatus());
    LOG.error("Error Message: {}",responseMessage);
    throw new MojoExecutionException("Upload failed");
  }
}
