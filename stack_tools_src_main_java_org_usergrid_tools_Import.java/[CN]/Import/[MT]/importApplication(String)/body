{
  File applicationFile=new File(importDir,applicationName);
  logger.info("Loading application file: " + applicationFile.getAbsolutePath());
  JsonParser jp=getJsonParserForFile(applicationFile);
  JsonToken token=jp.nextToken();
  validateStartArray(token);
  token=jp.nextValue();
  Application application=jp.readValueAs(Application.class);
  @SuppressWarnings("unchecked") String orgName=((Map<String,String>)application.getMetadata("organization")).get("value");
  OrganizationInfo info=managementService.getOrganizationByName(orgName);
  if (info == null) {
    logger.error("Unable to import application '{}' for organisation with name '{}'",application.getName(),orgName);
    return;
  }
  UUID appId=null;
  try {
    appId=managementService.importApplication(info.getUuid(),application);
  }
 catch (  ApplicationAlreadyExistsException aaee) {
    ApplicationInfo appInfo=managementService.getApplicationInfo(orgName + "/" + application.getName());
    if (appInfo != null) {
      appId=appInfo.getId();
    }
  }
  echo(application);
  EntityManager em=emf.getEntityManager(appId);
  for (  Entry<String,String> entry : em.getRoles().entrySet()) {
    em.deleteRole(entry.getKey());
  }
  @SuppressWarnings("unchecked") Map<String,Object> dictionaries=(Map<String,Object>)application.getMetadata("dictionaries");
  if (dictionaries != null) {
    EntityManager rootEm=emf.getEntityManager(MANAGEMENT_APPLICATION_ID);
    Entity appEntity=rootEm.get(appId);
    for (    Entry<String,Object> dictionary : dictionaries.entrySet()) {
      @SuppressWarnings("unchecked") Map<Object,Object> value=(Map<Object,Object>)dictionary.getValue();
      em.addMapToDictionary(appEntity,dictionary.getKey(),value);
    }
  }
  @SuppressWarnings("unchecked") Map<String,Object> stats=(Map<String,Object>)application.getMetadata("counters");
  for (  Entry<String,Object> stat : stats.entrySet()) {
    String entryName=stat.getKey();
    long amount=Long.parseLong(stat.getValue().toString());
    Map<String,Long> counters=em.getApplicationCounters();
    if (counters != null && counters.get(entryName) != null) {
      long existing=counters.get(entryName);
      em.incrementApplicationCounter(entryName,existing * -1);
    }
    if (entryName.startsWith("application.collection") || entryName.equals("application.entities")) {
      em.incrementApplicationCounter(entryName,1);
      em.incrementApplicationCounter(entryName,-1);
    }
 else {
      em.incrementApplicationCounter(entryName,amount);
    }
  }
  while (jp.nextValue() != JsonToken.END_ARRAY) {
    @SuppressWarnings("unchecked") Map<String,Object> entityProps=jp.readValueAs(HashMap.class);
    UUID uuid=getId(entityProps);
    String type=getType(entityProps);
    try {
      em.create(uuid,type,entityProps);
    }
 catch (    DuplicateUniquePropertyExistsException de) {
      logger.error("Unable to create entity.  It appears to be a duplicate",de);
    }
catch (    Exception e) {
      logger.error("Unable to create entity " + uuid + " of type "+ type+ ", skipping but this may indicate a bad import...",e);
    }
    echo(entityProps);
  }
  logger.info("----- End of application:" + application.getName());
  jp.close();
}
