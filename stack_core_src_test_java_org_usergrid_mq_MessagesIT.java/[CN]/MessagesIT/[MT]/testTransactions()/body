{
  UUID applicationId=setup.createApplication("testOrganization","testTransactions");
  assertNotNull(applicationId);
  QueueManager qm=getQueueManagerFactory().getQueueManager(applicationId);
  String queuePath="/foo/bar";
  assertFalse(qm.hasMessagesInQueue(queuePath,null));
  assertFalse(qm.hasOutstandingTransactions(queuePath,null));
  assertFalse(qm.hasPendingReads(queuePath,null));
  Message message=new Message();
  message.setStringProperty("foo","bar");
  LOG.info("Posting message to queue " + queuePath + ": "+ message.getUuid());
  qm.postToQueue(queuePath,message);
  assertTrue(qm.hasMessagesInQueue(queuePath,null));
  assertFalse(qm.hasOutstandingTransactions(queuePath,null));
  assertTrue(qm.hasPendingReads(queuePath,null));
  message=new Message();
  message.setStringProperty("foo","bar");
  LOG.info("Posting message to queue " + queuePath + ": "+ message.getUuid());
  qm.postToQueue(queuePath,message);
  assertTrue(qm.hasMessagesInQueue(queuePath,null));
  assertFalse(qm.hasOutstandingTransactions(queuePath,null));
  assertTrue(qm.hasPendingReads(queuePath,null));
  QueueQuery qq=new QueueQuery();
  qq.setTimeout(100);
  qq.setLimit(1);
  QueueResults qr1=qm.getFromQueue(queuePath,qq);
  assertTrue(qm.hasMessagesInQueue(queuePath,null));
  assertTrue(qm.hasOutstandingTransactions(queuePath,null));
  assertTrue(qm.hasPendingReads(queuePath,null));
  QueueResults qr2=qm.getFromQueue(queuePath,qq);
  assertTrue(qm.hasMessagesInQueue(queuePath,null));
  assertTrue(qm.hasOutstandingTransactions(queuePath,null));
  assertTrue(qm.hasPendingReads(queuePath,null));
  qm.deleteTransaction(queuePath,qr1.getMessages().get(0).getTransaction(),qq);
  assertTrue(qm.hasMessagesInQueue(queuePath,null));
  assertTrue(qm.hasOutstandingTransactions(queuePath,null));
  assertTrue(qm.hasPendingReads(queuePath,null));
  qm.deleteTransaction(queuePath,qr2.getMessages().get(0).getTransaction(),qq);
}
