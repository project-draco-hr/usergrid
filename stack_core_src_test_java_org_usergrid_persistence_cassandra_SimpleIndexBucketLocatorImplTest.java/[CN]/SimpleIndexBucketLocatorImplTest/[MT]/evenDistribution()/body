{
  UUID appId=UUIDUtils.newTimeUUID();
  String entityType="user";
  String propName="firstName";
  int bucketSize=20;
  float distributionPercentage=.05f;
  SimpleIndexBucketLocatorImpl locator=new SimpleIndexBucketLocatorImpl(bucketSize);
  List<String> buckets=locator.getBuckets(appId,IndexType.COLLECTION,entityType,propName);
  assertEquals(bucketSize,buckets.size());
  int testSize=2000000;
  Map<String,Float> counts=new HashMap<String,Float>();
  final Timer hashes=Metrics.newTimer(SimpleIndexBucketLocatorImplTest.class,"responses",TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  for (int i=0; i < testSize; i++) {
    UUID id=UUIDUtils.newTimeUUID();
    final TimerContext context=hashes.time();
    String bucket=locator.getBucket(appId,IndexType.COLLECTION,id,entityType,propName);
    context.stop();
    Float count=counts.get(bucket);
    if (count == null) {
      count=0f;
    }
    counts.put(bucket,++count);
  }
  List<String> keys=new ArrayList<String>(counts.keySet());
  int keySize=keys.size();
  assertEquals(bucketSize,keySize);
  for (int i=0; i < keySize; i++) {
    float sourceCount=counts.get(keys.get(i));
    for (int j=i + 1; j < keySize; j++) {
      float destCount=counts.get(keys.get(j));
      float maxDelta=Math.max(sourceCount,destCount) * distributionPercentage;
      assertEquals(String.format("Not within %f as percentage for keys '%s' and '%s'",distributionPercentage,keys.get(i),keys.get(j)),sourceCount,destCount,maxDelta);
    }
  }
}
