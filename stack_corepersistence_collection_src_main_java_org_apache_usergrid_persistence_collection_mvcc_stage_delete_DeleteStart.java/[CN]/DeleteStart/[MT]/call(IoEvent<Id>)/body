{
  final Id entityId=entityIoEvent.getEvent();
  EntityUtils.verifyIdentity(entityId);
  final UUID version=uuidService.newTimeUUID();
  final Scope scope=entityIoEvent.getEntityCollection();
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.ACTIVE);
  MutationBatch write=logStrategy.write(scope,startEntry);
  try {
    write.execute();
  }
 catch (  ConnectionException e) {
    LOG.error("Failed to execute write asynchronously ",e);
    throw new CollectionRuntimeException("Failed to execute write asynchronously ",e);
  }
  final MvccEntityImpl nextStage=new MvccEntityImpl(entityId,version,Optional.<Entity>absent());
  return Observable.from(new IoEvent<MvccEntity>(scope,nextStage));
}
