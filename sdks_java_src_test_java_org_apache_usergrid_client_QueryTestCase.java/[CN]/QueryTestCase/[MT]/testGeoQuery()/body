{
  String collectionName="sdkTestLocation";
  UsergridQuery deleteQuery=new UsergridQuery(collectionName);
  Usergrid.DELETE(deleteQuery);
  ArrayList<UsergridEntity> entities=new ArrayList<>();
  UsergridEntity apigeeOffice=new UsergridEntity(collectionName,"Apigee Office");
  apigeeOffice.setLocation(37.334115,-121.894340);
  entities.add(apigeeOffice);
  UsergridEntity amicis=new UsergridEntity(collectionName,"Amicis");
  amicis.setLocation(37.335616,-121.894168);
  entities.add(amicis);
  UsergridEntity sanPedroMarket=new UsergridEntity(collectionName,"SanPedroMarket");
  sanPedroMarket.setLocation(37.336499,-121.894356);
  entities.add(sanPedroMarket);
  UsergridEntity saintJamesPark=new UsergridEntity(collectionName,"saintJamesPark");
  saintJamesPark.setLocation(37.339079,-121.891422);
  entities.add(saintJamesPark);
  UsergridEntity sanJoseNews=new UsergridEntity(collectionName,"sanJoseNews");
  sanJoseNews.setLocation(37.337812,-121.890784);
  entities.add(sanJoseNews);
  UsergridEntity deAnza=new UsergridEntity(collectionName,"deAnza");
  deAnza.setLocation(37.334370,-121.895081);
  entities.add(deAnza);
  Usergrid.POST(entities);
  SDKTestUtils.indexSleep();
  float centerLat=37.334110f;
  float centerLon=-121.894340f;
  UsergridResponse queryResponse=Usergrid.GET(new UsergridQuery(collectionName).locationWithin(611.00000,centerLat,centerLon));
  assertNotNull(queryResponse.getEntities());
  float lastDistanceFrom=0;
  for (  UsergridEntity entity : queryResponse.getEntities()) {
    JsonNode locationNode=entity.getEntityProperty("location");
    assertNotNull("location node should not be null",locationNode);
    DoubleNode lat=(DoubleNode)locationNode.get("latitude");
    DoubleNode lon=(DoubleNode)locationNode.get("longitude");
    float distanceFrom=distFrom(centerLat,centerLon,lat.floatValue(),lon.floatValue());
    System.out.println("Entity " + entity.getName() + " is "+ distanceFrom+ " away");
    assertTrue("Entity " + entity.getName() + " was included but is not within specified distance ("+ distanceFrom+ ")",distanceFrom <= 611.0);
    if (lastDistanceFrom != 0) {
      assertTrue("GEO results are not sorted by distance ascending: expected " + lastDistanceFrom + " <= "+ distanceFrom,lastDistanceFrom <= distanceFrom);
    }
    lastDistanceFrom=distanceFrom;
  }
  queryResponse=Usergrid.GET(new UsergridQuery(collectionName).locationWithin(150,centerLat,centerLon));
  assertNotNull(queryResponse.getEntities());
  lastDistanceFrom=0;
  for (  UsergridEntity entity : queryResponse.getEntities()) {
    JsonNode locationNode=entity.getEntityProperty("location");
    assertNotNull("location node should not be null",locationNode);
    DoubleNode lat=(DoubleNode)locationNode.get("latitude");
    DoubleNode lon=(DoubleNode)locationNode.get("longitude");
    float distanceFrom=distFrom(centerLat,centerLon,lat.floatValue(),lon.floatValue());
    System.out.println("Entity " + entity.getName() + " is "+ distanceFrom+ " away");
    assertTrue("Entity " + entity.getName() + " was included but is not within specified distance ("+ distanceFrom+ ")",distanceFrom <= 150);
    if (lastDistanceFrom != 0) {
      assertTrue("GEO results are not sorted by distance ascending: expected " + lastDistanceFrom + " <= "+ distanceFrom,lastDistanceFrom <= distanceFrom);
    }
    lastDistanceFrom=distanceFrom;
  }
  Usergrid.DELETE(deleteQuery);
}
