{
  HyperLogLog hyperLogLog=new HyperLogLog(LOSS);
  HyperLogLog secondLog=new HyperLogLog(LOSS);
  for (int i=0; i < SIZE; i++) {
    byte[] bytes=UUID_SER.toByteBuffer(UUIDGenerator.newTimeUUID()).array();
    long hash=MurmurHash.hash64(bytes);
    if (i % 2 == 0) {
      secondLog.offerHashed(hash);
    }
 else {
      hyperLogLog.offerHashed(hash);
    }
  }
  int half=SIZE / 2;
  assertCardinality(hyperLogLog,half,LOSS);
  assertCardinality(secondLog,half,LOSS);
  byte[] hyperLogLogBytes=hyperLogLog.getBytes();
  byte[] secondLogBytes=secondLog.getBytes();
  log.info("The hyperLogLogBytes byte size is {}",hyperLogLogBytes.length);
  log.info("The secondLogBytes byte size is {}",secondLogBytes.length);
  HyperLogLog deSerializedFirst=HyperLogLog.Builder.build(hyperLogLogBytes);
  HyperLogLog deSerializedSecond=HyperLogLog.Builder.build(secondLogBytes);
  deSerializedFirst.addAll(deSerializedSecond);
  assertCardinality(deSerializedFirst,SIZE,LOSS);
}
