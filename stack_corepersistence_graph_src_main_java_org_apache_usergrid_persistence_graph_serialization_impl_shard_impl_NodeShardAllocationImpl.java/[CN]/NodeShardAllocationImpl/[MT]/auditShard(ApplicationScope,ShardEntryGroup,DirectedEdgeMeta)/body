{
  ValidationUtils.validateApplicationScope(scope);
  GraphValidation.validateShardEntryGroup(shardEntryGroup);
  GraphValidation.validateDirectedEdgeMeta(directedEdgeMeta);
  Preconditions.checkNotNull(shardEntryGroup,"shardEntryGroup cannot be null");
  if (shardEntryGroup.isCompactionPending()) {
    if (logger.isTraceEnabled())     logger.trace("Shard entry group {} is compacting, not auditing",shardEntryGroup);
    return false;
  }
  if (shardEntryGroup.entrySize() != 1) {
    if (logger.isTraceEnabled())     logger.trace("Shard entry group {} does not have 1 entry, not allocating",shardEntryGroup);
    return false;
  }
  final Shard shard=shardEntryGroup.getMinShard();
  final long minTime=getMinTime();
  if (shard.getCreatedTime() >= minTime) {
    if (logger.isTraceEnabled())     logger.trace("Shard entry group {}  and shard {} is before the minimum created time of {}.  Not allocating",shardEntryGroup,shard,minTime);
    return false;
  }
  final long shardSize=graphFig.getShardSize();
  final Iterator<MarkedEdge> edges=directedEdgeMeta.loadEdges(shardedEdgeSerialization,edgeColumnFamilies,scope,Collections.singletonList(shard),0,SearchByEdgeType.Order.ASCENDING);
  if (!edges.hasNext()) {
    if (logger.isTraceEnabled())     logger.trace("Tried to allocate a new shard for edge meta data {}, but no max value could be found in that row",directedEdgeMeta);
    return false;
  }
  MarkedEdge marked=null;
  long edgeCount=0;
  for (long i=1; edges.hasNext(); i++) {
    if (i % shardSize == 0) {
      marked=edges.next();
    }
 else {
      edges.next();
    }
    edgeCount++;
  }
  if (marked == null) {
    if (logger.isTraceEnabled()) {
      logger.trace("Shard {} in shard group {} not full, " + "not splitting. Edge count: {}",shard,shardEntryGroup,edgeCount);
    }
    return false;
  }
  final long createTimestamp=timeService.getCurrentTime();
  final Shard newShard=new Shard(marked.getTimestamp(),createTimestamp,false);
  logger.info("Allocating new shard {} for edge meta {}",newShard,directedEdgeMeta);
  final MutationBatch batch=this.edgeShardSerialization.writeShardMeta(scope,newShard,directedEdgeMeta);
  try {
    batch.execute();
    if (logger.isTraceEnabled()) {
      logger.trace("Clearing shard cache");
    }
    nodeShardCache.invalidate(scope,directedEdgeMeta);
  }
 catch (  ConnectionException e) {
    throw new RuntimeException("Unable to connect to casandra",e);
  }
  return true;
}
