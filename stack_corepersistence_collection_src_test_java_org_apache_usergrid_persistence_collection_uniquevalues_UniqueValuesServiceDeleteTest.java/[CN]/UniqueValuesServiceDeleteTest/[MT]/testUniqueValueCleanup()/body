{
  initAkka();
  ApplicationScope context=new ApplicationScopeImpl(new SimpleId("organization"));
  EntityCollectionManager manager=factory.createCollectionManager(context);
  String username=RandomStringUtils.randomAlphanumeric(20);
  Entity originalUser=null;
{
    Entity newEntity=new Entity(new SimpleId("user"));
    newEntity.setField(new StringField("username",username,true));
    newEntity.setField(new StringField("email",username + "@example.org",true));
    Observable<Entity> observable=manager.write(newEntity,null);
    originalUser=observable.toBlocking().lastOrDefault(null);
  }
{
    Entity newEntity=new Entity(new SimpleId("user"));
    newEntity.setField(new StringField("username",username,true));
    newEntity.setField(new StringField("email",username + "@example.org",true));
    try {
      Observable<Entity> observable=manager.write(newEntity,null);
      Entity returned=observable.toBlocking().lastOrDefault(null);
      fail("Should not have created dupliate user");
    }
 catch (    WriteUniqueVerifyException expected) {
    }
  }
  manager.mark(originalUser.getId(),null).toBlocking().firstOrDefault(null);
{
    Entity newEntity=new Entity(new SimpleId("user"));
    newEntity.setField(new StringField("username",username,true));
    newEntity.setField(new StringField("email",username + "@example.org",true));
    try {
      Observable<Entity> observable=manager.write(newEntity,null);
      Entity returned=observable.toBlocking().lastOrDefault(null);
    }
 catch (    WriteUniqueVerifyException unexpected) {
      logger.error("Error creating user",unexpected);
      fail("Still cannot create new user after delete");
    }
  }
}
