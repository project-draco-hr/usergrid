{
  UUID jobUUID=null;
  String colExport=collection_name;
  Map<String,String> uuidRet=new HashMap<String,String>();
  Map<String,Object> properties;
  Map<String,Object> storage_info;
  try {
    if ((properties=(Map<String,Object>)json.get("properties")) == null) {
      throw new NullPointerException("Could not find 'properties'");
    }
    storage_info=(Map<String,Object>)properties.get("storage_info");
    String storage_provider=(String)properties.get("storage_provider");
    if (storage_provider == null) {
      throw new NullPointerException("Could not find field 'storage_provider'");
    }
    if (storage_info == null) {
      throw new NullPointerException("Could not find field 'storage_info'");
    }
    String bucketName=(String)storage_info.get("bucket_location");
    String accessId=(String)storage_info.get("s3_access_id");
    String secretKey=(String)storage_info.get("s3_key");
    if (bucketName == null) {
      throw new NullPointerException("Could not find field 'bucketName'");
    }
    if (accessId == null) {
      throw new NullPointerException("Could not find field 's3_access_id'");
    }
    if (secretKey == null) {
      throw new NullPointerException("Could not find field 's3_key'");
    }
    json.put("organizationId",organization.getUuid());
    json.put("applicationId",applicationId);
    json.put("collectionName",colExport);
    jobUUID=exportService.schedule(json);
    uuidRet.put("Export Entity",jobUUID.toString());
  }
 catch (  NullPointerException e) {
    return Response.status(SC_BAD_REQUEST).type(JSONPUtils.jsonMediaType(callback)).entity(ServiceResource.wrapWithCallback(e.getMessage(),callback)).build();
  }
catch (  Exception e) {
    OAuthResponse errorMsg=OAuthResponse.errorResponse(SC_INTERNAL_SERVER_ERROR).setErrorDescription(e.getMessage()).buildJSONMessage();
    return Response.status(errorMsg.getResponseStatus()).type(JSONPUtils.jsonMediaType(callback)).entity(ServiceResource.wrapWithCallback(errorMsg.getBody(),callback)).build();
  }
  return Response.status(SC_ACCEPTED).entity(uuidRet).build();
}
