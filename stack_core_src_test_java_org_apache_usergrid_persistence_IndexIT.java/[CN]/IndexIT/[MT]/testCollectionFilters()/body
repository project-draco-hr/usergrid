{
  LOG.info("testCollectionFilters");
  UUID applicationId=setup.createApplication("testOrganization","testCollectionFilters");
  assertNotNull(applicationId);
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  assertNotNull(em);
  for (int i=alphabet.length - 1; i >= 0; i--) {
    String name=alphabet[i];
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    properties.put("name",name);
    em.create("item",properties);
  }
  em.refreshIndex();
  Query query=Query.fromQL("name < 'delta' order by name asc");
  Results r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  int i=0;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(3,i);
  query=Query.fromQL("name <= 'delta' order by name asc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=0;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(4,i);
  query=Query.fromQL("name <= 'foxtrot' and name > 'bravo' order by name asc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=2;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(6,i);
  query=Query.fromQL("name < 'foxtrot' and name > 'bravo' order by name asc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=2;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(5,i);
  query=Query.fromQL("name < 'foxtrot' and name >= 'bravo' order by name asc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=1;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(5,i);
  query=Query.fromQL("name <= 'foxtrot' and name >= 'bravo' order by name asc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=1;
  for (  Entity entity : r.getEntities()) {
    assertEquals(alphabet[i],entity.getProperty("name"));
    i++;
  }
  assertEquals(6,i);
  query=Query.fromQL("name <= 'foxtrot' and name >= 'bravo' order by name desc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=6;
  for (  Entity entity : r.getEntities()) {
    i--;
    assertEquals(alphabet[i],entity.getProperty("name"));
  }
  assertEquals(1,i);
  query=Query.fromQL("name < 'foxtrot' and name > 'bravo' order by name desc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=5;
  for (  Entity entity : r.getEntities()) {
    i--;
    assertEquals(alphabet[i],entity.getProperty("name"));
  }
  assertEquals(2,i);
  query=Query.fromQL("name < 'foxtrot' and name >= 'bravo' order by name desc");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  i=5;
  for (  Entity entity : r.getEntities()) {
    i--;
    assertEquals(alphabet[i],entity.getProperty("name"));
  }
  assertEquals(1,i);
  query=Query.fromQL("name = 'foxtrot'");
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  assertEquals(1,r.size());
  long created=r.getEntity().getCreated();
  UUID entityId=r.getEntity().getUuid();
  query=Query.fromQL("created = " + created);
  r=em.searchCollection(em.getApplicationRef(),"items",query);
  LOG.info(JsonUtils.mapToFormattedJsonString(r.getEntities()));
  assertEquals(1,r.size());
  assertEquals(entityId,r.getEntity().getUuid());
}
