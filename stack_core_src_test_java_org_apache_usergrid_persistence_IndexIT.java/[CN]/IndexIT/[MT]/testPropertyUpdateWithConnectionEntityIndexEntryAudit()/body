{
  UUID applicationId=setup.createApplication("testOrganization","testPropertyUpdateWithConnectionEntityIndexEntryAudit" + RandomStringUtils.randomAlphabetic(20));
  EntityManager em=setup.getEmf().getEntityManager(applicationId);
  Map<String,Object> entity1=new LinkedHashMap<String,Object>();
  entity1.put("name","name_1");
  entity1.put("status","pickled");
  Map<String,Object> entity2=new LinkedHashMap<String,Object>();
  entity2.put("name","name_2");
  entity2.put("status","foo");
  Entity entity1Ref=em.create("names",entity1);
  Entity entity2Ref=em.create("names",entity2);
  em.createConnection(entity2Ref,"connecting",entity1Ref);
  em.refreshIndex();
  Query query=Query.fromQL("select * where status = 'pickled'");
  Results r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  entity1Ref.setProperty("status","herring");
  em.update(entity1Ref);
  em.refreshIndex();
  query=Query.fromQL("select * where status = 'pickled'");
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(0,r.size());
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(0,r.size());
  query=Query.fromQL("select * where status = 'herring'");
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  r=em.searchCollection(em.getApplicationRef(),"names",query);
  assertEquals(1,r.size());
  assertEquals(entity1Ref.getUuid(),r.getEntity().getUuid());
  RelationManager rm=em.getRelationManager(entity2Ref);
  if (rm instanceof RelationManagerImpl) {
    RelationManagerImpl impl=(RelationManagerImpl)rm;
    CassandraService cass=CoreITSuite.cassandraResource.getBean(CassandraService.class);
    ByteBufferSerializer buf=ByteBufferSerializer.get();
    Keyspace ko=cass.getApplicationKeyspace(applicationId);
    Mutator<ByteBuffer> m=createMutator(ko,buf);
    IndexUpdate update=impl.batchStartIndexUpdate(m,entity1Ref,"status","ignore",UUIDUtils.newTimeUUID(),false,false,true,false);
    int count=0;
    IndexEntry lastMatch=null;
    for (    IndexEntry entry : update.getPrevEntries()) {
      if ("status".equals(entry.getPath())) {
        count++;
        lastMatch=entry;
      }
    }
    assertEquals(1,count);
    if (lastMatch != null) {
      assertEquals("herring",lastMatch.getValue());
    }
 else {
      fail("The last match was null but should have been herring!");
    }
  }
}
