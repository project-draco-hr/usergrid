{
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getBufferSize()).thenReturn(10);
  final MvccEntitySerializationStrategy ess=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy less=mock(MvccLogEntrySerializationStrategy.class);
  final Keyspace keyspace=mock(Keyspace.class);
  final MutationBatch entityBatch=mock(MutationBatch.class);
  final MutationBatch logBatch=mock(MutationBatch.class);
  final EntityVersionCreatedFactory entityVersionCreatedFactory=mock(EntityVersionCreatedFactory.class);
  when(keyspace.prepareMutationBatch()).thenReturn(mock(MutationBatch.class)).thenReturn(entityBatch).thenReturn(logBatch);
  final Set<EntityVersionCreated> listeners=mock(Set.class);
  when(listeners.size()).thenReturn(0);
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final Entity entity=new Entity(entityId);
  final MvccEntity mvccEntity=new MvccEntityImpl(entityId,UUIDGenerator.newTimeUUID(),MvccEntity.Status.COMPLETE,entity);
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(less,appScope,entityId,2);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  final UniqueValueSerializationStrategy uvss=mock(UniqueValueSerializationStrategy.class);
  EntityVersionCreatedTask entityVersionCreatedTask=new EntityVersionCreatedTask(entityVersionCreatedFactory,serializationFig,less,ess,uvss,keyspace,appScope,listeners,entity);
  ListenableFuture<Void> future=taskExecutor.submit(entityVersionCreatedTask);
  future.get();
  verify(listeners).size();
}
