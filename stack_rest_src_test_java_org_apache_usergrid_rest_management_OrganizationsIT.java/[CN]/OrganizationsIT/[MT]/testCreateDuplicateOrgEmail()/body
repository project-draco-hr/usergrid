{
  Organization organization=createOrgPayload("testCreateDuplicateOrgEmail",null);
  Organization orgCreatedResponse=clientSetup.getRestClient().management().orgs().post(organization);
  this.refreshIndex();
  assertNotNull(orgCreatedResponse);
  Token tokenPayload=new Token("password",organization.getUsername(),organization.getPassword());
  Token tokenReturned=clientSetup.getRestClient().management().token().post(tokenPayload);
  assertNotNull(tokenReturned);
  Organization orgDuplicatePayload=new Organization(organization.getOrganization() + "test",organization.getUsername() + "test",organization.getEmail(),organization.getName() + "test",organization.getPassword() + "test",null);
  try {
    clientSetup.getRestClient().management().orgs().post(orgDuplicatePayload);
    fail("Should not have created organization");
  }
 catch (  UniformInterfaceException ex) {
    errorParse(400,duplicateUniquePropertyExistsErrorMessage,ex);
  }
  tokenPayload=new Token("password",organization.getUsername() + "test",organization.getPassword() + "test");
  Token tokenError=null;
  try {
    tokenError=clientSetup.getRestClient().management().token().post(tokenPayload);
    fail("Should not have created organization");
  }
 catch (  UniformInterfaceException ex) {
    errorParse(400,invalidGrantErrorMessage,ex);
  }
  assertNull(tokenError);
}
