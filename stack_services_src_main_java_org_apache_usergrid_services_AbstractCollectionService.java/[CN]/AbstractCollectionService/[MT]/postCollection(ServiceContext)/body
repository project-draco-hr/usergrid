{
  checkPermissionsForCollection(context);
  if (context.getPayload().isBatch()) {
    List<Entity> entities=new ArrayList<Entity>();
    List<Map<String,Object>> batch=context.getPayload().getBatchProperties();
    logger.debug("Attempting to batch create " + batch.size() + " entities in collection "+ context.getCollectionName());
    int i=1;
    for (    Map<String,Object> p : batch) {
      logger.debug("Creating entity " + i + " in collection "+ context.getCollectionName());
      Entity item=null;
      try {
        item=em.createItemInCollection(context.getOwner(),context.getCollectionName(),getEntityType(),p);
      }
 catch (      Exception e) {
        logger.error("Entity " + i + " unable to be created in collection "+ context.getCollectionName(),e);
        i++;
        continue;
      }
      logger.debug("Entity " + i + " created in collection "+ context.getCollectionName()+ " with UUID "+ item.getUuid());
      item=importEntity(context,item);
      entities.add(item);
      i++;
    }
    return new ServiceResults(this,context,Type.COLLECTION,Results.fromEntities(entities),null,null);
  }
  Entity item=em.createItemInCollection(context.getOwner(),context.getCollectionName(),getEntityType(),context.getProperties());
  item=importEntity(context,item);
  return new ServiceResults(this,context,Type.COLLECTION,Results.fromEntity(item),null,null);
}
