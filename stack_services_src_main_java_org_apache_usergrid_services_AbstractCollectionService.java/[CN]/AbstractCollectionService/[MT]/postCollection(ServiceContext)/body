{
  checkPermissionsForCollection(context);
  if (context.getPayload().isBatch()) {
    List<Entity> entities=new ArrayList<Entity>();
    List<Map<String,Object>> batch=context.getPayload().getBatchProperties();
    if (logger.isTraceEnabled()) {
      logger.trace("Attempting to batch create {} entities in collection {}",batch.size(),context.getCollectionName());
    }
    int i=1;
    for (    Map<String,Object> p : batch) {
      if (logger.isTraceEnabled()) {
        logger.trace("Creating entity {} in collection {}",i,context.getCollectionName());
      }
      Entity item=null;
      try {
        item=em.createItemInCollection(context.getOwner(),context.getCollectionName(),getEntityType(),p);
      }
 catch (      Exception e) {
        if (logger.isDebugEnabled()) {
          logger.debug("Entity {} unable to be created in collection {}",i,context.getCollectionName(),e);
        }
        i++;
        continue;
      }
      if (logger.isTraceEnabled()) {
        logger.trace("Entity {} created in collection {} with UUID {}",i,context.getCollectionName(),item.getUuid());
      }
      item=importEntity(context,item);
      entities.add(item);
      i++;
    }
    return new ServiceResults(this,context,Type.COLLECTION,Results.fromEntities(entities),null,null);
  }
  Entity item=em.createItemInCollection(context.getOwner(),context.getCollectionName(),getEntityType(),context.getProperties());
  item=importEntity(context,item);
  return new ServiceResults(this,context,Type.COLLECTION,Results.fromEntity(item),null,null);
}
