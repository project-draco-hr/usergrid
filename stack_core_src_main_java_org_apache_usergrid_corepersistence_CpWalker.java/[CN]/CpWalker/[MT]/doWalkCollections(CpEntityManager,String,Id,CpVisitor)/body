{
  final ApplicationScope applicationScope=em.getApplicationScope();
  final GraphManager gm=em.getManagerCache().getGraphManager(applicationScope);
  logger.debug("Loading edges types from {}:{}\n   scope {}:{}",new Object[]{applicationId.getType(),applicationId.getUuid(),applicationScope.getApplication().getType(),applicationScope.getApplication().getUuid()});
  final String edgeType;
  if (collectionName != null) {
    edgeType=CpNamingUtils.EDGE_COLL_SUFFIX;
  }
 else {
    edgeType=CpNamingUtils.getEdgeTypeFromCollectionName(collectionName);
  }
  Observable<String> edgeTypes=gm.getEdgeTypesFromSource(new SimpleSearchEdgeType(applicationId,edgeType,null));
  edgeTypes.flatMap(new Func1<String,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final String edgeType){
      logger.debug("Loading edges of type {} from node {}",edgeType,applicationId);
      return gm.loadEdgesFromSource(new SimpleSearchByEdgeType(applicationId,edgeType,Long.MAX_VALUE,SearchByEdgeType.Order.DESCENDING,null));
    }
  }
).parallel(new Func1<Observable<Edge>,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final Observable<Edge> edgeObservable){
      return edgeObservable.doOnNext(new Action1<Edge>(){
        @Override public void call(        Edge edge){
          logger.info("Re-indexing edge {}",edge);
          EntityRef targetNodeEntityRef=new SimpleEntityRef(edge.getTargetNode().getType(),edge.getTargetNode().getUuid());
          Entity entity;
          try {
            entity=em.get(targetNodeEntityRef);
          }
 catch (          Exception ex) {
            logger.error("Error getting sourceEntity {}:{}, continuing",targetNodeEntityRef.getType(),targetNodeEntityRef.getUuid());
            return;
          }
          String collName=CpNamingUtils.getCollectionName(edge.getType());
          visitor.visitCollectionEntry(em,collName,entity);
        }
      }
);
    }
  }
,Schedulers.io()).toBlocking().lastOrDefault(null);
}
