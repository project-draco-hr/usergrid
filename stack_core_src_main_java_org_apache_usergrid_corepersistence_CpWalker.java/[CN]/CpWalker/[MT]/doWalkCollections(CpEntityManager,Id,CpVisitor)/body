{
  final ApplicationScope applicationScope=em.getApplicationScope();
  final GraphManager gm=em.getManagerCache().getGraphManager(applicationScope);
  logger.debug("Loading edges types from {}:{}\n   scope {}:{}",new Object[]{applicationId.getType(),applicationId.getUuid(),applicationScope.getApplication().getType(),applicationScope.getApplication().getUuid()});
  Observable<String> edgeTypes=gm.getEdgeTypesFromSource(new SimpleSearchEdgeType(applicationId,CpNamingUtils.EDGE_COLL_SUFFIX,null));
  edgeTypes.flatMap(new Func1<String,Observable<Edge>>(){
    @Override public Observable<Edge> call(    final String edgeType){
      logger.debug("Loading edges of type {} from node {}",edgeType,applicationId);
      return gm.loadEdgesFromSource(new SimpleSearchByEdgeType(applicationId,edgeType,Long.MAX_VALUE,SearchByEdgeType.Order.DESCENDING,null));
    }
  }
).doOnNext(new Action1<Edge>(){
    @Override public void call(    Edge edge){
      logger.info("Re-indexing edge {}",edge);
      EntityRef targetNodeEntityRef=new SimpleEntityRef(edge.getTargetNode().getType(),edge.getTargetNode().getUuid());
      Entity entity;
      try {
        entity=em.get(targetNodeEntityRef);
      }
 catch (      Exception ex) {
        logger.error("Error getting sourceEntity {}:{}, continuing",targetNodeEntityRef.getType(),targetNodeEntityRef.getUuid());
        return;
      }
      String collName=CpNamingUtils.getCollectionName(edge.getType());
      visitor.visitCollectionEntry(em,collName,entity);
      try {
        Thread.sleep(writeDelayMs);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("Unable to wait");
      }
    }
  }
).toBlocking().lastOrDefault(null);
}
