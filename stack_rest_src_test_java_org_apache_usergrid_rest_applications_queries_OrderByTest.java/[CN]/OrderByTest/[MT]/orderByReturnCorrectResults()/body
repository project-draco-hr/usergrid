{
  int size=20;
  Entity[] activities=new Entity[size];
  Entity actor=new Entity();
  actor.put("displayName","Erin");
  Entity props=new Entity();
  props.put("actor",actor);
  props.put("verb","go");
  props.put("content","bragh");
  for (int i=0; i < size; i++) {
    props.put("ordinal",i);
    Entity e=this.app().collection("activity").post(props);
    activities[i]=e;
    log.info(String.valueOf(e.get("uuid").toString()));
    log.info(String.valueOf(Long.parseLong(activities[0].get("created").toString())));
  }
  refreshIndex();
  ArrayUtils.reverse(activities);
  long lastCreated=Long.parseLong(activities[0].get("created").toString());
  String errorQuery=String.format("select * where created <= %d order by created desc",lastCreated);
  int index=0;
  QueryParameters params=new QueryParameters().setQuery(errorQuery);
  Collection activitiesResponse=this.app().collection("activities").get(params);
  do {
    int returnSize=activitiesResponse.getResponse().getEntityCount();
    for (int i=0; i < returnSize; i++, index++) {
      assertEquals((activities[index]).get("uuid").toString(),activitiesResponse.getResponse().getEntities().get(i).get("uuid").toString());
    }
    activitiesResponse=this.app().collection("activities").getNextPage(activitiesResponse,params,true);
  }
 while (activitiesResponse.getCursor() != null);
}
