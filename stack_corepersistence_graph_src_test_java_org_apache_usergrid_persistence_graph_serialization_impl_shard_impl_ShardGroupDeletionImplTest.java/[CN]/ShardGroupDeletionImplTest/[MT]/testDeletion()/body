{
  final long createTime=10000;
  final long currentTime=createTime * 2;
  final Shard shard0=new Shard(1000,createTime,true);
  final ShardEntryGroup group=new ShardEntryGroup(1);
  group.addShard(shard0);
  assertFalse("this should return false for our test to succeed",group.isCompactionPending());
  assertFalse("this should return false for our test to succeed",group.isNew(currentTime));
  final DirectedEdgeMeta directedEdgeMeta=getDirectedEdgeMeta();
  final EdgeShardSerialization edgeShardSerialization=mock(EdgeShardSerialization.class);
  final MutationBatch batch=mock(MutationBatch.class);
  when(edgeShardSerialization.removeShardMeta(same(scope),same(shard0),same(directedEdgeMeta))).thenReturn(batch);
  final TimeService timeService=mock(TimeService.class);
  when(timeService.getCurrentTime()).thenReturn(currentTime);
  initExecutor(1,1);
  final ShardGroupDeletionImpl shardGroupDeletion=new ShardGroupDeletionImpl(asyncTaskExecutor,edgeShardSerialization,timeService);
  final ListenableFuture<ShardGroupDeletion.DeleteResult> future=shardGroupDeletion.maybeDeleteShard(this.scope,directedEdgeMeta,group,Collections.emptyIterator());
  final ShardGroupDeletion.DeleteResult result=future.get();
  assertEquals("should  delete",ShardGroupDeletion.DeleteResult.DELETED,result);
  verify(batch).execute();
}
