{
  if ((userId == null) || (newPassword == null)) {
    return;
  }
  EntityManager em=emf.getEntityManager(smf.getManagementAppId());
  User user=em.get(userId,User.class);
  em.refreshIndex();
  CredentialsInfo newCredentials=encryptionService.defaultEncryptedCredentials(newPassword,user.getUuid(),smf.getManagementAppId());
  int passwordHistorySize=calculatePasswordHistorySizeForUser(user.getUuid());
  Map<String,CredentialsInfo> credsMap=cast(em.getDictionaryAsMap(user,CREDENTIALS_HISTORY));
  CredentialsInfo currentCredentials=null;
  if (passwordHistorySize > 0) {
    ArrayList<CredentialsInfo> oldCreds=new ArrayList<CredentialsInfo>(credsMap.values());
    Collections.sort(oldCreds);
    currentCredentials=readUserPasswordCredentials(smf.getManagementAppId(),user.getUuid());
    if (encryptionService.verify(newPassword,currentCredentials,userId,smf.getManagementAppId())) {
      throw new RecentlyUsedPasswordException();
    }
    for (int i=0; i < oldCreds.size() && i < passwordHistorySize; i++) {
      CredentialsInfo ci=oldCreds.get(i);
      if (encryptionService.verify(newPassword,ci,userId,smf.getManagementAppId())) {
        throw new RecentlyUsedPasswordException();
      }
    }
  }
  if (credsMap.size() > passwordHistorySize) {
    ArrayList<UUID> oldUUIDs=new ArrayList<UUID>(credsMap.size());
    for (    String uuid : credsMap.keySet()) {
      oldUUIDs.add(UUID.fromString(uuid));
    }
    UUIDUtils.sort(oldUUIDs);
    for (int i=0; i < oldUUIDs.size() - passwordHistorySize; i++) {
      em.removeFromDictionary(user,CREDENTIALS_HISTORY,oldUUIDs.get(i).toString());
    }
  }
  if (passwordHistorySize > 0) {
    UUID uuid=UUIDUtils.newTimeUUID();
    em.addToDictionary(user,CREDENTIALS_HISTORY,uuid.toString(),currentCredentials);
  }
  writeUserPassword(smf.getManagementAppId(),user,newCredentials);
  writeUserMongoPassword(smf.getManagementAppId(),user,encryptionService.plainTextCredentials(mongoPassword((String)user.getProperty("username"),newPassword),user.getUuid(),smf.getManagementAppId()));
}
