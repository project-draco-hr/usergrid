{
  logger.info("createOwnerAndOrganization: {} {}",organizationName,email);
  Lock groupLock=getUniqueUpdateLock(lockManager,smf.getManagementAppId(),organizationName,Schema.COLLECTION_GROUPS,PROPERTY_PATH);
  Lock userLock=getUniqueUpdateLock(lockManager,smf.getManagementAppId(),username,"users","username");
  Lock emailLock=getUniqueUpdateLock(lockManager,smf.getManagementAppId(),email,"users","email");
  UserInfo user=null;
  OrganizationInfo organization=null;
  try {
    groupLock.lock();
    userLock.lock();
    emailLock.lock();
    EntityManager em=emf.getEntityManager(smf.getManagementAppId());
    if (!em.isPropertyValueUniqueForEntity(Group.ENTITY_TYPE,PROPERTY_PATH,organizationName)) {
      throw new DuplicateUniquePropertyExistsException(Group.ENTITY_TYPE,PROPERTY_PATH,organizationName);
    }
    if (!validateAdminInfo(username,name,email,password)) {
      return null;
    }
    if (password == null && SubjectUtils.isServiceAdmin()) {
      user=getAdminUserByEmail(email);
      if (user == null) {
        throw new IllegalArgumentException("Password should be sent in the request or should be a valid admin user email.");
      }
    }
 else     if (password == null) {
      throw new IllegalArgumentException("Password should be sent in the request.");
    }
    if (user == null) {
      if ((tokens.isExternalSSOProviderEnabled() && SubjectUtils.isServiceAdmin()) || areActivationChecksDisabled()) {
        user=createAdminUserInternal(null,username,name,email,password,true,false,userProperties);
      }
 else {
        user=createAdminUserInternal(null,username,name,email,password,activated,disabled,userProperties);
      }
    }
    if (logger.isTraceEnabled()) {
      logger.debug("createOwnerAndOrganization: User created");
    }
    organization=createOrganizationInternal(null,organizationName,user,true,organizationProperties);
  }
  finally {
    emailLock.unlock();
    userLock.unlock();
    groupLock.unlock();
  }
  return new OrganizationOwnerInfo(user,organization);
}
