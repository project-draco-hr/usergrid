{
  logger.info("createAdminUserInternal: {}",username);
  Collection<String> policyVioliations=passwordPolicy.policyCheck(password,true);
  if (!policyVioliations.isEmpty()) {
    throw new PasswordPolicyViolationException(passwordPolicy.getDescription(true),policyVioliations);
  }
  if (username == null) {
    username=email;
  }
  if (name == null) {
    name=email;
  }
  EntityManager em=emf.getEntityManager(smf.getManagementAppId());
  User user=new User();
  user.setUsername(username);
  user.setName(name);
  user.setEmail(email);
  user.setActivated(activated);
  user.setConfirmed(!newAdminUsersRequireConfirmation());
  user.setDisabled(disabled);
  if (userProperties != null) {
    userProperties.remove("password");
    user.setProperties(userProperties);
  }
  user=em.create(user);
  return createAdminFrom(organizationId,user,password);
}
