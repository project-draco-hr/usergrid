{
  this.em=entityManager;
  this.qm=queueManager;
  this.jobScheduler=jobScheduler;
  this.metricsFactory=metricsFactory;
  this.queueName=getQueueNames(properties);
  this.queueMeter=metricsFactory.getMeter(ApplicationQueueManagerImpl.class,"notification.queue");
  this.sendMeter=metricsFactory.getMeter(NotificationsService.class,"queue.send");
  int maxAsyncThreads;
  int workerQueueSize;
  try {
    maxAsyncThreads=Integer.valueOf(System.getProperty(PUSH_PROCESSING_MAXTHREADS_PROP,"200"));
    workerQueueSize=Integer.valueOf(System.getProperty(PUSH_PROCESSING_QUEUESIZE_PROP,"2000"));
    this.concurrencyFactor=Integer.valueOf(System.getProperty(PUSH_PROCESSING_CONCURRENCY_PROP,"50"));
  }
 catch (  Exception e) {
    maxAsyncThreads=200;
    workerQueueSize=2000;
    this.concurrencyFactor=50;
  }
  this.asyncExecutor=TaskExecutorFactory.createTaskExecutor("push-device-io",maxAsyncThreads,workerQueueSize,TaskExecutorFactory.RejectionAction.CALLERRUNS);
}
