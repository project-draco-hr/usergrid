{
  final CountDownLatch latch=new CountDownLatch(2);
  entityDelete.addCompleteListener(new CompleteListener<MvccEntityEvent<MvccEntity>>(){
    @Override public void onComplete(    AsynchronousMessage<MvccEntityEvent<MvccEntity>> event){
      latch.countDown();
    }
  }
);
  entityDelete.addErrorListener(new ErrorListener<MvccEntityEvent<MvccEntity>>(){
    @Override public void onError(    AsynchronousMessage<MvccEntityEvent<MvccEntity>> event,    Throwable t){
      latch.countDown();
    }
  }
);
  String middleName="middleName" + UUIDUtils.newTimeUUID();
  Map<String,Object> properties=new LinkedHashMap<String,Object>();
  properties.put("username","edanuff");
  properties.put("email","ed@anuff.com");
  properties.put("middlename",middleName);
  Entity user=em.create("user",properties);
  user.setField(new StringField("address1","1782 address st"));
  em.update(user);
  user.setField(new StringField("address2","apt 508"));
  em.update(user);
  user.setField(new StringField("address3","apt 508"));
  em.update(user);
  em.refreshIndex();
  user=em.get(user.getId());
  em.delete(user).toBlockingObservable().last();
  latch.await(10,TimeUnit.SECONDS);
  Query query=new Query();
  query.addEqualityFilter("username","edanuff");
  Results r=em.searchCollection(em.getApplicationRef(),"users",query);
  assertTrue(r.size() == 0);
}
