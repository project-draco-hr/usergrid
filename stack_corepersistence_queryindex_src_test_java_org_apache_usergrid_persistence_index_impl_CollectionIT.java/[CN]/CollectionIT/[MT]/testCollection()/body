{
  app.put("username","edanuff");
  app.put("email","ed@anuff.com");
  Entity user=app.create("user");
  assertNotNull(user);
  app.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  app.put("verb","tweet");
  app.put("content","I ate a sammich");
  app.put("ordinal",3);
  Entity activity=app.create("activity");
  assertNotNull(activity);
  LOG.info("" + activity.getClass());
  LOG.info(JsonUtils.mapToFormattedJsonString(activity));
  activity=app.get(activity.getId());
  LOG.info("Activity class = {}",activity.getClass());
  LOG.info(JsonUtils.mapToFormattedJsonString(activity));
  app.addToCollection(user,"activities",activity);
  app.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  app.put("verb","tweet2");
  app.put("content","I ate a pickle");
  app.put("ordinal",2);
  Entity activity2=app.create("activity");
  activity2=app.get(activity2.getId());
  app.addToCollection(user,"activities",activity2);
  app.put("actor",new LinkedHashMap<String,Object>(){
{
      put("displayName","Ed Anuff");
      put("objectType","person");
    }
  }
);
  app.put("verb","tweet2");
  app.put("content","I ate an apple");
  app.put("ordinal",1);
  Entity activity3=app.create("activity");
  activity3=app.get(activity3.getId());
  app.addToCollection(user,"activities",activity3);
  em.refreshIndex();
  Query query=new Query();
  Results r=app.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  query=new Query().addEqualityFilter("verb","tweet2");
  r=app.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  query=new Query().addEqualityFilter("verb","tweet2");
  query.addSort("created");
  r=app.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  List<Entity> entities=r.getEntities();
  assertEquals(entities.get(0).getId(),activity2.getId());
  assertEquals(entities.get(1).getId(),activity3.getId());
  query=new Query().addEqualityFilter("verb","tweet2");
  query.addSort("ordinal");
  r=app.searchCollection(user,"activities",query);
  assertEquals(2,r.size());
  entities=r.getEntities();
  assertEquals(entities.get(0).getId(),activity3.getId());
  assertEquals(entities.get(1).getId(),activity2.getId());
  query=new Query();
  query.addSort("content");
  r=app.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  entities=r.getEntities();
  LOG.info(JsonUtils.mapToFormattedJsonString(entities));
  assertEquals(entities.get(0).getId(),activity2.getId());
  assertEquals(entities.get(1).getId(),activity.getId());
  assertEquals(entities.get(2).getId(),activity3.getId());
  query=new Query();
  query.addSort("verb");
  r=app.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  query=new Query();
  query.addSort("ordinal");
  r=app.searchCollection(user,"activities",query);
  assertEquals(3,r.size());
  entities=r.getEntities();
  assertEquals(entities.get(0).getId(),activity3.getId());
  assertEquals(entities.get(1).getId(),activity2.getId());
  assertEquals(entities.get(2).getId(),activity.getId());
  query=new Query().addEqualityFilter("ordinal",2);
  r=app.searchCollection(user,"activities",query);
  assertEquals(1,r.size());
  query=new Query().addEqualityFilter("ordinal",2);
  query.addSort("ordinal");
  r=app.searchCollection(user,"activities",query);
  assertEquals(1,r.size());
}
