{
  long sleepTime=Long.parseLong(props.getProperty(TIMEOUT_PROP));
  long customRetry=sleepTime + 1000;
  int numberOfRuns=1;
  OnlyOnceExceution job=cassandraResource.getBean("onlyOnceExceution",OnlyOnceExceution.class);
  job.setTimeout(customRetry);
  job.setLatch(numberOfRuns);
  job.setDelay(sleepTime);
  getJobListener().setExpected(1);
  JobData returned=scheduler.createJob("onlyOnceExceution",System.currentTimeMillis(),new JobData());
  boolean waited=getJobListener().blockTilDone(customRetry * numberOfRuns * 2 + 5000L);
  assertTrue("Job ran twice",waited);
  getJobListener().setExpected(2);
  job.setLatch(numberOfRuns);
  JobStat stat=scheduler.getStatsForJob(returned.getJobName(),returned.getUuid());
  assertNotNull(stat);
  assertEquals(numberOfRuns,stat.getTotalAttempts());
  assertEquals(numberOfRuns,stat.getRunCount());
  assertEquals(0,stat.getDelayCount());
  boolean slept=job.waitForSleep(customRetry * numberOfRuns * 2,TimeUnit.MILLISECONDS);
  assertTrue("Job slept",slept);
  waited=getJobListener().blockTilDone(customRetry * numberOfRuns * 2);
  assertFalse("Job ran twice",waited);
  stat=scheduler.getStatsForJob(returned.getJobName(),returned.getUuid());
  assertEquals(numberOfRuns,stat.getTotalAttempts());
  assertEquals(numberOfRuns,stat.getRunCount());
  assertEquals(0,stat.getDelayCount());
}
