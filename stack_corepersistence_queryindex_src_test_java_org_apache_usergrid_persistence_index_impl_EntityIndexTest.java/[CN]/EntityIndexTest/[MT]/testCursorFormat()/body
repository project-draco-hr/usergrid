{
  String myType=UUID.randomUUID().toString();
  Id appId=new SimpleId(UUID.randomUUID(),"application");
  Id ownerId=new SimpleId(UUID.randomUUID(),"owner");
  ApplicationScope applicationScope=new ApplicationScopeImpl(appId);
  IndexEdge indexEdge=new IndexEdgeImpl(ownerId,"users",SearchEdge.NodeType.SOURCE,10);
  ApplicationEntityIndex entityIndex=eif.createApplicationEntityIndex(applicationScope);
  final EntityIndexBatch batch=entityIndex.createBatch();
  final int size=100;
  final List<Id> entityIds=new ArrayList<>(size);
  for (int i=0; i < size; i++) {
    final String middleName="middleName" + UUIDUtils.newTimeUUID();
    final int ordinal=i;
    Map entityMap=new HashMap(){
{
        put("username","edanuff");
        put("email","ed@anuff.com");
        put("middlename",middleName);
        put("ordinal",ordinal);
        put("mytype",myType);
      }
    }
;
    final Id userId=new SimpleId("user");
    Entity user=EntityIndexMapUtils.fromMap(entityMap);
    EntityUtils.setId(user,userId);
    EntityUtils.setVersion(user,UUIDGenerator.newTimeUUID());
    entityIds.add(userId);
    batch.index(indexEdge,user);
  }
  batch.execute().get();
  ei.refreshAsync().toBlocking().last();
  final int limit=5;
  final int expectedPages=size / limit;
  Optional<Integer> offset=Optional.absent();
  UUID lastId=null;
  final String query="select * where mytype='" + myType + "' order by ordinal asc";
  int i;
  for (i=0; i < expectedPages; i++) {
    final CandidateResults results=!offset.isPresent() ? entityIndex.search(indexEdge,SearchTypes.allTypes(),query,limit) : entityIndex.search(indexEdge,SearchTypes.allTypes(),query,limit,i * limit);
    assertEquals(limit,results.size());
    int ordinal=0;
    assertNotEquals("Scroll matches last item from previous page",lastId,results.get(ordinal).getId().getUuid());
    lastId=results.get(limit - 1).getId().getUuid();
    offset=results.getOffset();
    assertEquals("Failed on page " + i,results.get(ordinal).getId(),entityIds.get(i * limit));
  }
  final CandidateResults results=entityIndex.search(indexEdge,SearchTypes.allTypes(),query,limit,i * limit);
  assertEquals(0,results.size());
  assertFalse(results.hasOffset());
}
