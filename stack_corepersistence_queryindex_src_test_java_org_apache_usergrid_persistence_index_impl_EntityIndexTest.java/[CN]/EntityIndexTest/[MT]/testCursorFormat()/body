{
  Id appId=new SimpleId("application");
  Id ownerId=new SimpleId("owner");
  ApplicationScope applicationScope=new ApplicationScopeImpl(appId);
  IndexScope indexScope=new IndexScopeImpl(ownerId,"users");
  ApplicationEntityIndex entityIndex=eif.createApplicationEntityIndex(applicationScope);
  ei.initializeIndex();
  final EntityIndexBatch batch=entityIndex.createBatch();
  final int size=10;
  final List<Id> entities=new ArrayList<>(size);
  for (int i=0; i < size; i++) {
    final String middleName="middleName" + UUIDUtils.newTimeUUID();
    Map entityMap=new HashMap(){
{
        put("username","edanuff");
        put("email","ed@anuff.com");
        put("middlename",middleName);
        put("created",System.nanoTime());
      }
    }
;
    final Id userId=new SimpleId("user");
    Entity user=EntityIndexMapUtils.fromMap(entityMap);
    EntityUtils.setId(user,userId);
    EntityUtils.setVersion(user,UUIDGenerator.newTimeUUID());
    user.setField(new UUIDField(IndexingUtils.ENTITYID_ID_FIELDNAME,UUIDGenerator.newTimeUUID()));
    entities.add(userId);
    batch.index(indexScope,user);
  }
  batch.execute().get();
  ei.refresh();
  final int limit=1;
  final int expectedPages=size / limit;
  String cursor=null;
  for (int i=0; i < expectedPages; i++) {
    final Query query=Query.fromQL("select * order by created");
    query.setLimit(limit);
    if (cursor != null) {
      query.setCursor(cursor);
    }
    final CandidateResults results=entityIndex.search(indexScope,SearchTypes.allTypes(),query);
    assertTrue(results.hasCursor());
    cursor=results.getCursor();
    assertEquals("Should be 16 bytes as hex",32,cursor.length());
    assertEquals(1,results.size());
    assertEquals(results.get(0).getId(),entities.get(i));
  }
}
