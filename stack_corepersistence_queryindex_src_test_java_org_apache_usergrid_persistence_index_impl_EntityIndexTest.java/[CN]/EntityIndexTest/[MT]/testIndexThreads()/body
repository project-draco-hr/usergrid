{
  final Id appId=new SimpleId("application");
  final ApplicationScope applicationScope=new ApplicationScopeImpl(appId);
  long now=System.currentTimeMillis();
  final int threads=20;
  final int size=30;
  final EntityIndex entityIndex=eif.createEntityIndex(applicationScope);
  final IndexScope indexScope=new IndexScopeImpl(appId,"things");
  final String entityType="thing";
  entityIndex.initializeIndex();
  final CountDownLatch latch=new CountDownLatch(threads);
  final AtomicLong failTime=new AtomicLong(0);
  InputStream is=this.getClass().getResourceAsStream("/sample-large.json");
  ObjectMapper mapper=new ObjectMapper();
  final List<Object> sampleJson=mapper.readValue(is,new TypeReference<List<Object>>(){
  }
);
  for (int i=0; i < threads; i++) {
    Thread thread=new Thread(new Runnable(){
      public void run(){
        try {
          EntityIndexBatch batch=entityIndex.createBatch();
          insertJsonBlob(sampleJson,batch,entityType,indexScope,size,0);
          batch.execute().get();
        }
 catch (        Exception e) {
synchronized (failTime) {
            if (failTime.get() == 0) {
              failTime.set(System.currentTimeMillis());
            }
          }
          System.out.println(e.toString());
          fail("threw exception");
        }
 finally {
          latch.countDown();
        }
      }
    }
);
    thread.start();
  }
  try {
    latch.await();
  }
 catch (  InterruptedException ie) {
    throw new RuntimeException(ie);
  }
  assertTrue("system must have failed at " + (failTime.get() - now),failTime.get() == 0);
}
