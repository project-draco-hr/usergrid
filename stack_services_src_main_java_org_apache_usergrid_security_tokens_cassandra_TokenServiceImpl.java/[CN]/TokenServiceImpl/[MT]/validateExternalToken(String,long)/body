{
  TokenInfo tokenInfo=null;
  if (!isSSOEnabled()) {
    throw new NotImplementedException("External Token Validation Service not enabled");
  }
  if (extAccessToken == null) {
    throw new IllegalArgumentException("ext_access_token must be specified");
  }
  if (ttl == -1) {
    throw new IllegalArgumentException("ttl must be specified");
  }
  com.codahale.metrics.Timer processingTimer=getMetricsFactory().getTimer(TokenServiceImpl.class,SSO_PROCESSING_TIME);
  com.codahale.metrics.Timer.Context timerContext=processingTimer.time();
  try {
    JsonNode accessInfoNode=getMeFromUgCentral(extAccessToken);
    JsonNode userNode=accessInfoNode.get("user");
    String username=userNode.get("username").asText();
    UserInfo userInfo=management.getAdminUserByUsername(username);
    UUID userId=userInfo == null ? null : userInfo.getUuid();
    if (userId == null) {
      logger.info("User {} does not exist locally, creating",username);
      String name=userNode.get("name").asText();
      String email=userNode.get("email").asText();
      String dummyPassword=RandomStringUtils.randomAlphanumeric(40);
      JsonNode orgsNode=userNode.get("organizations");
      Iterator<String> fieldNames=orgsNode.getFieldNames();
      if (!fieldNames.hasNext()) {
        fieldNames=Collections.singletonList(username).iterator();
      }
      while (fieldNames.hasNext()) {
        String orgName=fieldNames.next();
        if (userId == null) {
          OrganizationOwnerInfo ownerOrgInfo=management.createOwnerAndOrganization(orgName,username,name,email,dummyPassword,true,false);
          applicationCreator.createSampleFor(ownerOrgInfo.getOrganization());
          userId=ownerOrgInfo.getOwner().getUuid();
          userInfo=ownerOrgInfo.getOwner();
          Counter createdAdminsCounter=getMetricsFactory().getCounter(TokenServiceImpl.class,SSO_CREATED_LOCAL_ADMINS);
          createdAdminsCounter.inc();
          logger.info("Created user {} and org {}",username,orgName);
        }
 else {
          final OrganizationInfo organization=management.createOrganization(orgName,userInfo,true);
          applicationCreator.createSampleFor(organization);
          logger.info("Created user {}'s other org {}",username,orgName);
        }
      }
    }
    importToken(extAccessToken,TokenCategory.ACCESS,null,new AuthPrincipalInfo(ADMIN_USER,userId,CpNamingUtils.MANAGEMENT_APPLICATION_ID),null,ttl);
    tokenInfo=getTokenInfo(extAccessToken);
  }
 catch (  Exception e) {
    timerContext.stop();
    logger.debug("Error validating external token",e);
    throw e;
  }
  return tokenInfo;
}
