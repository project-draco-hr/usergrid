{
  UUID uuid=null;
  try {
    uuid=getUUIDForToken(token);
  }
 catch (  Exception e) {
    try {
      return validateExternalToken(token,1,properties.getProperty(USERGRID_EXTERNAL_PROVIDER));
    }
 catch (    Exception exception) {
      logger.debug("invalid request");
      throw new IllegalArgumentException("Invalid token in the request.");
    }
  }
  long ssoTtl=1000000L;
  TokenInfo tokenInfo;
  try {
    tokenInfo=getTokenInfo(uuid);
  }
 catch (  InvalidTokenException e) {
    if (isExternalSSOProviderEnabled()) {
      return validateExternalToken(token,maxPersistenceTokenAge,"");
    }
 else {
      throw e;
    }
  }
  if (updateAccessTime) {
    long now=currentTimeMillis();
    long maxTokenTtl=getMaxTtl(TokenCategory.getFromBase64String(token),tokenInfo.getPrincipal());
    Mutator<UUID> batch=createMutator(cassandra.getUsergridApplicationKeyspace(),ue);
    HColumn<String,Long> col=createColumn(TOKEN_ACCESSED,now,calcTokenTime(tokenInfo.getExpiration(maxTokenTtl)),se,le);
    batch.addInsertion(uuid,TOKENS_CF,col);
    long inactive=now - tokenInfo.getAccessed();
    if (inactive > tokenInfo.getInactive()) {
      col=createColumn(TOKEN_INACTIVE,inactive,calcTokenTime(tokenInfo.getExpiration(maxTokenTtl)),se,le);
      batch.addInsertion(uuid,TOKENS_CF,col);
      tokenInfo.setInactive(inactive);
    }
    batch.execute();
  }
  return tokenInfo;
}
