{
  final Set<ConfigChangeType> changes=new HashSet<ConfigChangeType>();
  final List<CassandraConfigEvent> events=new ArrayList<CassandraConfigEvent>();
  Properties properties=PropertyUtils.loadFromClassPath(APP_CONFIG);
  String oldPort=properties.getProperty(CASSANDRA_PORT);
  String oldConnections=properties.getProperty(CASSANDRA_CONNECTIONS);
  String oldCluster=properties.getProperty(CASSANDRA_CLUSTER_NAME);
  String oldHosts=properties.getProperty(CASSANDRA_HOSTS);
  String oldTimeout=properties.getProperty(CASSANDRA_TIMEOUT);
  String oldVersion=properties.getProperty(CASSANDRA_VERSION);
  String oldKeyspace=properties.getProperty(COLLECTIONS_KEYSPACE_NAME);
  LOG.debug("old port = {}",oldPort);
  LOG.debug("old connections = {}",oldConnections);
  LOG.debug("old cluster = {}",oldCluster);
  LOG.debug("old hosts = {}",oldHosts);
  LOG.debug("old timeout = {}",oldTimeout);
  LOG.debug("old version = {}",oldVersion);
  LOG.debug("old keyspace = {}",oldKeyspace);
  assertNotNull(config);
  CassandraConfigListener listener=new CassandraConfigListener(){
    @Override public void reconfigurationEvent(    final CassandraConfigEvent event){
      LOG.debug("got reconfiguration even: {}" + event);
      changes.addAll(event.getChanges());
      events.add(event);
    }
  }
;
  config.register(listener);
  String newPort=getRandomNumber(oldPort);
  String newConnections=getRandomNumber(oldConnections);
  String newCluster=getRandomString(oldCluster);
  String newHosts=getRandomString(oldHosts);
  String newTimeout=getRandomNumber(oldTimeout);
  String newVersion=getRandomString(oldVersion);
  String newKeyspace=getRandomString(oldKeyspace);
  LOG.debug("new port = {}",newPort);
  LOG.debug("new connections = {}",newConnections);
  LOG.debug("new cluster = {}",newCluster);
  LOG.debug("new hosts = {}",newHosts);
  LOG.debug("new timeout = {}",newTimeout);
  LOG.debug("new version = {}",newVersion);
  LOG.debug("new keyspace = {}",newKeyspace);
  properties.setProperty(CASSANDRA_PORT,newPort);
  properties.setProperty(CASSANDRA_CONNECTIONS,newConnections);
  properties.setProperty(CASSANDRA_CLUSTER_NAME,newCluster);
  properties.setProperty(CASSANDRA_HOSTS,newHosts);
  properties.setProperty(CASSANDRA_TIMEOUT,newTimeout);
  properties.setProperty(CASSANDRA_VERSION,newVersion);
  properties.setProperty(COLLECTIONS_KEYSPACE_NAME,newKeyspace);
  long startTime=System.currentTimeMillis();
  write(properties);
  while (changes.size() < 7) {
    Thread.sleep(100L);
    LOG.debug("waking up");
  }
  long propagationTime=System.currentTimeMillis() - startTime;
  assertTrue("the default notification delay is not working: propagation time = " + propagationTime,propagationTime >= DynamicCassandraConfig.DEFAULT_NOTIFICATION_DELAY);
  assertEquals("there should be 7 changed properties",7,changes.size());
  assertEquals("there should only be one event",1,events.size());
  assertEquals("the old port does not match",Integer.parseInt(oldPort),events.get(0).getOld().getPort());
  assertEquals("the new port does not match",Integer.parseInt(newPort),events.get(0).getCurrent().getPort());
  assertTrue("the port change should exist",events.get(0).hasChange(ConfigChangeType.PORT));
  assertEquals("the old connections does not match",Integer.parseInt(oldConnections),events.get(0).getOld().getConnections());
  assertEquals("the new connections does not match",Integer.parseInt(newConnections),events.get(0).getCurrent().getConnections());
  assertTrue("the connections change should exist",events.get(0).hasChange(ConfigChangeType.CONNECTIONS));
  assertEquals("the old cluster does not match",oldCluster,events.get(0).getOld().getClusterName());
  assertEquals("the new cluster does not match",newCluster,events.get(0).getCurrent().getClusterName());
  assertTrue("the cluster change should exist",events.get(0).hasChange(ConfigChangeType.CLUSTER_NAME));
  assertEquals("the old hosts does not match",oldHosts,events.get(0).getOld().getHosts());
  assertEquals("the new hosts does not match",newHosts,events.get(0).getCurrent().getHosts());
  assertTrue("the hosts change should exist",events.get(0).hasChange(ConfigChangeType.HOSTS));
  assertEquals("the old timeout does not match",Integer.parseInt(oldTimeout),events.get(0).getOld().getTimeout());
  assertEquals("the new timeout does not match",Integer.parseInt(newTimeout),events.get(0).getCurrent().getTimeout());
  assertTrue("the timeout change should exist",events.get(0).hasChange(ConfigChangeType.TIMEOUT));
  assertEquals("the old version does not match",oldVersion,events.get(0).getOld().getVersion());
  assertEquals("the new version does not match",newVersion,events.get(0).getCurrent().getVersion());
  assertTrue("the version change should exist",events.get(0).hasChange(ConfigChangeType.VERSION));
  assertEquals("the old keyspace does not match",oldKeyspace,events.get(0).getOld().getKeyspaceName());
  assertEquals("the new keyspace does not match",newKeyspace,events.get(0).getCurrent().getKeyspaceName());
  assertTrue("the keyspace change should exist",events.get(0).hasChange(ConfigChangeType.KEYSPACE_NAME));
  assertEquals("7 event change should be present",7,events.get(0).getChanges().size());
  changes.clear();
  events.clear();
  config.unregister(listener);
  write(original);
  Thread.sleep(DynamicCassandraConfig.DEFAULT_NOTIFICATION_DELAY);
  assertTrue("events should be empty with listener removed",events.isEmpty());
  assertTrue("changes should be empty with listener removed",changes.isEmpty());
}
