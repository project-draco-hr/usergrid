{
  final Set<ConfigChangeType> changes=new HashSet<ConfigChangeType>();
  final List<CassandraConfigEvent> events=new ArrayList<CassandraConfigEvent>();
  Properties properties=PropertyUtils.loadFromClassPath(APP_CONFIG);
  String oldPort=properties.getProperty(CASSANDRA_PORT);
  LOG.debug("old port = {}",oldPort);
  assertNotNull(config);
  config.register(new CassandraConfigListener(){
    @Override public void reconfigurationEvent(    final CassandraConfigEvent event){
      LOG.debug("got reconfiguration even: {}" + event);
      changes.addAll(event.getChanges());
      events.add(event);
    }
  }
);
  String newPort=getRandomNumber(oldPort);
  LOG.debug("new port = {}",oldPort);
  properties.setProperty(CASSANDRA_PORT,newPort);
  long startTime=System.currentTimeMillis();
  write(properties);
  while (changes.isEmpty()) {
    Thread.sleep(100L);
    LOG.debug("waking up");
  }
  long propagationTime=System.currentTimeMillis() - startTime;
  assertTrue("the default notification delay is not working: propagation time = " + propagationTime,propagationTime >= DynamicCassandraConfig.DEFAULT_NOTIFICATION_DELAY);
  assertEquals("there should only be one changed property",1,changes.size());
  assertEquals("there should only be one event",1,events.size());
  assertEquals("only the port should change",ConfigChangeType.PORT,changes.iterator().next());
  assertEquals("the old port does not match",Integer.parseInt(oldPort),events.get(0).getOld().getPort());
  assertEquals("the new port does not match",Integer.parseInt(newPort),events.get(0).getCurrent().getPort());
  assertEquals("only one event change should be present",1,events.get(0).getChanges().size());
  assertTrue("the port change should exist",events.get(0).hasChange(ConfigChangeType.PORT));
}
