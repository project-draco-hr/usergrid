{
  String queryString="select * where (a > 1 and b > 10 and a < 10 and b < 20 ) or ( c >= 20 and d >= 30 and c <= 30 and d " + "<= 40)";
  ANTLRStringStream in=new ANTLRStringStream(queryString);
  QueryFilterLexer lexer=new QueryFilterLexer(in);
  TokenRewriteStream tokens=new TokenRewriteStream(lexer);
  QueryFilterParser parser=new QueryFilterParser(tokens);
  Query query=parser.ql().query;
  QueryProcessor processor=new QueryProcessor(query,null,null,null);
  OrNode node=(OrNode)processor.getFirstNode();
  SliceNode sliceNode=(SliceNode)node.getLeft();
  Iterator<QuerySlice> slices=sliceNode.getAllSlices().iterator();
  QuerySlice slice=slices.next();
  assertEquals("a",slice.getPropertyName());
  assertEquals(BigInteger.valueOf(1),slice.getStart().getValue());
  assertFalse(slice.getStart().isInclusive());
  assertEquals(BigInteger.valueOf(10),slice.getFinish().getValue());
  assertFalse(slice.getFinish().isInclusive());
  slice=slices.next();
  assertEquals("b",slice.getPropertyName());
  assertEquals(BigInteger.valueOf(10),slice.getStart().getValue());
  assertFalse(slice.getStart().isInclusive());
  assertEquals(BigInteger.valueOf(20),slice.getFinish().getValue());
  assertFalse(slice.getFinish().isInclusive());
  sliceNode=(SliceNode)node.getRight();
  slices=sliceNode.getAllSlices().iterator();
  slice=slices.next();
  assertEquals("c",slice.getPropertyName());
  assertEquals(BigInteger.valueOf(20),slice.getStart().getValue());
  assertTrue(slice.getStart().isInclusive());
  assertEquals(BigInteger.valueOf(30),slice.getFinish().getValue());
  assertTrue(slice.getFinish().isInclusive());
  slice=slices.next();
  assertEquals("d",slice.getPropertyName());
  assertEquals(BigInteger.valueOf(30),slice.getStart().getValue());
  assertTrue(slice.getStart().isInclusive());
  assertEquals(BigInteger.valueOf(40),slice.getFinish().getValue());
  assertTrue(slice.getFinish().isInclusive());
}
