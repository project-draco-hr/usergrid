{
  try {
    int alt25=3;
switch (input.LA(1)) {
case '\\':
{
switch (input.LA(2)) {
case '0':
case '1':
case '2':
case '3':
{
switch (input.LA(3)) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
switch (input.LA(4)) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
                    alt25=1;
                  }
                break;
default :
              alt25=2;
          }
        }
      break;
default :
    alt25=3;
}
}
break;
case '4':
case '5':
case '6':
case '7':
{
switch (input.LA(3)) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
alt25=2;
}
break;
default :
alt25=3;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",25,1,input);
throw nvae;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",25,0,input);
throw nvae;
}
switch (alt25) {
case 1:
{
match('\\');
if ((input.LA(1) >= '0' && input.LA(1) <= '3')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
if ((input.LA(1) >= '0' && input.LA(1) <= '7')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
if ((input.LA(1) >= '0' && input.LA(1) <= '7')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 2:
{
match('\\');
if ((input.LA(1) >= '0' && input.LA(1) <= '7')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
if ((input.LA(1) >= '0' && input.LA(1) <= '7')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 3:
{
match('\\');
if ((input.LA(1) >= '0' && input.LA(1) <= '7')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
}
}
  finally {
}
}
