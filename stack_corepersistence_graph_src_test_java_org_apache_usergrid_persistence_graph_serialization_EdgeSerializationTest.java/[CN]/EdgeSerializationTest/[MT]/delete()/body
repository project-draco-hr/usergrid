{
  final MarkedEdge edge1=createEdge("source","edge","target");
  final Id sourceId=edge1.getSourceNode();
  final Id targetId1=edge1.getTargetNode();
  final MarkedEdge edge2=createEdge(sourceId,"edge",createId("target"));
  final Id targetId2=edge2.getTargetNode();
  final UUID timestamp=UUIDGenerator.newTimeUUID();
  serialization.writeEdge(scope,edge1,timestamp).execute();
  serialization.writeEdge(scope,edge2,timestamp).execute();
  long now=System.currentTimeMillis();
  Iterator<MarkedEdge> results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),null));
  assertEquals(edge2,results.next());
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,"edge",now,null));
  assertEquals(edge2,results.next());
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId1,"edge",now,sourceId.getType(),null));
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId2,"edge",now,sourceId.getType(),null));
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId1,"edge",now,null));
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId2,"edge",now,null));
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  final UUID timestamp2=UUIDGenerator.newTimeUUID();
  serialization.deleteEdge(scope,edge1,timestamp2).execute();
  serialization.deleteEdge(scope,edge2,timestamp2).execute();
  results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),null));
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,"edge",now,null));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId1,"edge",now,sourceId.getType(),null));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId2,"edge",now,sourceId.getType(),null));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId1,"edge",now,null));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId2,"edge",now,null));
  assertFalse(results.hasNext());
}
