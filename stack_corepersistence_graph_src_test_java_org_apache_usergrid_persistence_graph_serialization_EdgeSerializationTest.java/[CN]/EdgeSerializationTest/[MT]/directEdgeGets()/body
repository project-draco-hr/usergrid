{
  final Edge edgev1=createEdge("source","edge1","target");
  final Id sourceId=edgev1.getSourceNode();
  final Id targetId=edgev1.getTargetNode();
  final Edge edgev2=createEdge(sourceId,"edge1",targetId);
  assertTrue("Edge version 1 has lower time uuid",UUIDComparator.staticCompare(edgev1.getVersion(),edgev2.getVersion()) < 0);
  final Edge edgeType2V1=createEdge(sourceId,"edge2",targetId);
  serialization.writeEdge(scope,edgev1).execute();
  serialization.writeEdge(scope,edgev2).execute();
  serialization.writeEdge(scope,edgeType2V1).execute();
  final UUID now=UUIDGenerator.newTimeUUID();
  SearchByEdge search=createGetByEdge(sourceId,"edge1",targetId,now,null);
  Iterator<Edge> results=serialization.getEdgeFromSource(scope,search);
  assertEquals(edgev2,results.next());
  assertEquals(edgev1,results.next());
  assertFalse("No results should be returned",results.hasNext());
  results=serialization.getEdgeToTarget(scope,search);
  assertEquals(edgev2,results.next());
  assertEquals(edgev1,results.next());
  assertFalse("No results should be returned",results.hasNext());
  search=createGetByEdge(sourceId,"edge1",targetId,now,edgev2);
  results=serialization.getEdgeFromSource(scope,search);
  assertEquals(edgev1,results.next());
  assertFalse("No results should be returned",results.hasNext());
  results=serialization.getEdgeToTarget(scope,search);
  assertEquals(edgev1,results.next());
  assertFalse("No results should be returned",results.hasNext());
  search=createGetByEdge(sourceId,"edge1",targetId,now,edgev1);
  results=serialization.getEdgeFromSource(scope,search);
  assertFalse("No results should be returned",results.hasNext());
  results=serialization.getEdgeToTarget(scope,search);
  assertFalse("No results should be returned",results.hasNext());
  search=createGetByEdge(sourceId,"edge1",targetId,edgev1.getVersion(),null);
  results=serialization.getEdgeFromSource(scope,search);
  assertEquals(edgev1,results.next());
  assertFalse("Max version was honored",results.hasNext());
  search=createGetByEdge(sourceId,"edge1",targetId,edgev1.getVersion(),null);
  results=serialization.getEdgeToTarget(scope,search);
  assertEquals(edgev1,results.next());
  assertFalse("Max version was honored",results.hasNext());
}
