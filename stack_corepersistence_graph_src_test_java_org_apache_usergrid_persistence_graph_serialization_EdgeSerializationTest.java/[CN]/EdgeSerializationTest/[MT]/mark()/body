{
  final Edge edge1=createEdge("source","edge","target");
  final Id sourceId=edge1.getSourceNode();
  final Id targetId1=edge1.getTargetNode();
  final Edge edge2=createEdge(sourceId,"edge",createId("target"));
  final Id targetId2=edge2.getTargetNode();
  serialization.writeEdge(scope,edge1).execute();
  serialization.writeEdge(scope,edge2).execute();
  UUID now=UUIDGenerator.newTimeUUID();
  Iterator<MarkedEdge> results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),null));
  assertEquals(edge1,results.next());
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,"edge",now,null));
  assertEquals(edge1,results.next());
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId1,"edge",now,sourceId.getType(),null));
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId2,"edge",now,sourceId.getType(),null));
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId1,"edge",now,null));
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId2,"edge",now,null));
  assertEquals(edge2,results.next());
  assertFalse(results.hasNext());
  serialization.markEdge(scope,edge1).execute();
  serialization.markEdge(scope,edge2).execute();
  results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),null));
  MarkedEdge edge=results.next();
  assertEquals(edge1,edge);
  assertTrue(edge.isDeleted());
  edge=results.next();
  assertEquals(edge2,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSource(scope,createSearchByEdge(sourceId,"edge",now,null));
  edge=results.next();
  assertEquals(edge1,edge);
  assertTrue(edge.isDeleted());
  edge=results.next();
  assertEquals(edge2,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId1,"edge",now,sourceId.getType(),null));
  edge=results.next();
  assertEquals(edge1,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId2,"edge",now,sourceId.getType(),null));
  edge=results.next();
  assertEquals(edge2,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId1,"edge",now,null));
  edge=results.next();
  assertEquals(edge1,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTarget(scope,createSearchByEdge(targetId2,"edge",now,null));
  edge=results.next();
  assertEquals(edge2,edge);
  assertTrue(edge.isDeleted());
  assertFalse(results.hasNext());
}
