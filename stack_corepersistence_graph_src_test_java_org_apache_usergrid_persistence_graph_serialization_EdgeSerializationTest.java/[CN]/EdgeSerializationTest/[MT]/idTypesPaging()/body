{
  final MarkedEdge edge1=createEdge("source","edge","target");
  final Id sourceId=edge1.getSourceNode();
  final Id targetId1=edge1.getTargetNode();
  final MarkedEdge edge2=createEdge(sourceId,"edge",createId("target"));
  final Id targetId2=edge2.getTargetNode();
  serialization.writeEdge(scope,edge1).execute();
  serialization.writeEdge(scope,edge2).execute();
  UUID now=UUIDGenerator.newTimeUUID();
  Iterator<MarkedEdge> results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),null));
  assertEquals(edge2,results.next());
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),edge2));
  assertEquals(edge1,results.next());
  assertFalse(results.hasNext());
  results=serialization.getEdgesFromSourceByTargetType(scope,createSearchByEdgeAndId(sourceId,"edge",now,targetId1.getType(),edge1));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId1,"edge",now,sourceId.getType(),edge2));
  assertFalse(results.hasNext());
  results=serialization.getEdgesToTargetBySourceType(scope,createSearchByEdgeAndId(targetId2,"edge",now,sourceId.getType(),edge1));
  assertFalse(results.hasNext());
}
