{
  final int threadPoolSize=1;
  final int queueSize=10;
  final TaskExecutor executor=new NamedTaskExecutorImpl("jobSuccess",threadPoolSize,queueSize);
  final CountDownLatch exceptionLatch=new CountDownLatch(0);
  final CountDownLatch rejectedLatch=new CountDownLatch(0);
  final CountDownLatch runLatch=new CountDownLatch(1);
  int iterations=threadPoolSize + queueSize;
  for (int i=0; i < iterations; i++) {
    final TestTask<Void> task=new TestTask<Void>(exceptionLatch,rejectedLatch,runLatch){
      @Override public Void call() throws Exception {
        super.call();
        final Object mutex=new Object();
synchronized (mutex) {
          mutex.wait();
        }
        return null;
      }
    }
;
    executor.submit(task);
  }
  runLatch.await(1000,TimeUnit.MILLISECONDS);
  final CountDownLatch secondRejectedLatch=new CountDownLatch(1);
  final CountDownLatch secondExceptionLatch=new CountDownLatch(0);
  final CountDownLatch secondRunLatch=new CountDownLatch(1);
  final TestTask<Void> testTask=new TestTask<Void>(exceptionLatch,rejectedLatch,runLatch){
  }
;
  executor.submit(testTask);
  secondRejectedLatch.await(1000,TimeUnit.MILLISECONDS);
  assertEquals(1l,secondRunLatch.getCount());
  assertEquals(0l,secondExceptionLatch.getCount());
}
