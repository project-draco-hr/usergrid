{
  UUID entityId=null;
{
    Map<String,String> payload=hashMap("type","app_user").map("name","fred");
    JsonNode node=resource().path("/test-organization/test-app/app_users").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(JsonNode.class,payload);
    String uuidString=node.get("entities").get(0).get("uuid").asText();
    entityId=UUIDUtils.tryGetUUID(uuidString);
  }
{
    JsonNode node=resource().path("/test-organization/test-app").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(JsonNode.class);
    String uuid=node.get("application").asText();
    UUID applicationId=UUID.fromString(uuid);
    EntityManagerFactory emf=setup.getEmf();
    EntityManager em=emf.getEntityManager(applicationId);
    Entity entity=em.get(entityId);
    Assert.assertNotNull(entity);
    log.debug("DMJ Properties");
    for (    String key : entity.getProperties().keySet()) {
      log.debug("   {} = {}",key,entity.getProperties().get(key));
    }
    log.debug("DMJ Dynamic Properties");
    for (    String key : entity.getDynamicProperties().keySet()) {
      log.debug("   {} = {}",key,entity.getDynamicProperties().get(key));
    }
  }
{
    String s=resource().path("/test-organization/test-app/app_users/fred").queryParam("access_token",access_token).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).get(String.class);
    int firstFred=s.indexOf("fred");
    int secondFred=s.indexOf("fred",firstFred + 4);
    Assert.assertEquals("Should not be more than one name property",-1,secondFred);
  }
}
