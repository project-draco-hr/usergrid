{
  bind(MvccEntitySerializationStrategy.class).annotatedWith(V1Impl.class).to(MvccEntitySerializationStrategyV1Impl.class);
  bind(MvccEntitySerializationStrategy.class).annotatedWith(V2Impl.class).to(MvccEntitySerializationStrategyV2Impl.class);
  bind(MvccEntitySerializationStrategy.class).annotatedWith(V3Impl.class).to(MvccEntitySerializationStrategyV3Impl.class);
  bind(MvccEntitySerializationStrategy.class).annotatedWith(V1ProxyImpl.class).to(MvccEntitySerializationStrategyProxyV1Impl.class);
  bind(MvccEntitySerializationStrategy.class).annotatedWith(ProxyImpl.class).to(MvccEntitySerializationStrategyProxyV2Impl.class);
  Multibinder<DataMigration> dataMigrationMultibinder=Multibinder.newSetBinder(binder(),DataMigration.class);
  dataMigrationMultibinder.addBinding().to(MvccEntityDataMigrationImpl.class);
  bind(MvccEntityMigrationStrategy.class).to(MvccEntitySerializationStrategyProxyV2Impl.class);
  bind(MvccLogEntrySerializationStrategy.class).to(MvccLogEntrySerializationStrategyImpl.class);
  bind(UniqueValueSerializationStrategy.class).to(UniqueValueSerializationStrategyImpl.class);
  Multibinder<Migration> uriBinder=Multibinder.newSetBinder(binder(),Migration.class);
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategy.class,V1Impl.class));
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategy.class,V2Impl.class));
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategy.class,V3Impl.class));
  uriBinder.addBinding().to(Key.get(MvccLogEntrySerializationStrategy.class));
  uriBinder.addBinding().to(Key.get(UniqueValueSerializationStrategy.class));
  bind(SettingsValidation.class).asEagerSingleton();
}
