{
  bind(MvccEntitySerializationStrategy.class).annotatedWith(ProxyImpl.class).to(MvccEntitySerializationStrategyProxyImpl.class);
  bind(MvccEntitySerializationStrategyV1Impl.class);
  bind(MvccEntitySerializationStrategyV2Impl.class);
  bind(MvccEntitySerializationStrategyV3Impl.class);
  bind(new TypeLiteral<VersionedMigrationSet<MvccEntitySerializationStrategy>>(){
  }
).toProvider(MvccEntitySerializationStrategyProvider.class);
  Multibinder<DataMigration2<EntityIdScope>> dataMigrationMultibinder=Multibinder.newSetBinder(binder(),new TypeLiteral<DataMigration2<EntityIdScope>>(){
  }
);
  dataMigrationMultibinder.addBinding().to(MvccEntityDataMigrationImpl.class);
  Multibinder.newSetBinder(binder(),MigrationPlugin.class).addBinding().to(CollectionMigrationPlugin.class);
  bind(MvccLogEntrySerializationStrategy.class).to(MvccLogEntrySerializationStrategyImpl.class);
  bind(UniqueValueSerializationStrategy.class).to(UniqueValueSerializationStrategyImpl.class);
  Multibinder<Migration> uriBinder=Multibinder.newSetBinder(binder(),Migration.class);
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV1Impl.class));
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV2Impl.class));
  uriBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV3Impl.class));
  uriBinder.addBinding().to(Key.get(MvccLogEntrySerializationStrategy.class));
  uriBinder.addBinding().to(Key.get(UniqueValueSerializationStrategy.class));
  bind(SettingsValidation.class).asEagerSingleton();
}
