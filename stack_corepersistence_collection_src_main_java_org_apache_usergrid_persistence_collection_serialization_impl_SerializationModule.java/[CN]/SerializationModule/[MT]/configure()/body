{
  bind(MvccEntitySerializationStrategyV1Impl.class);
  bind(MvccEntitySerializationStrategyV2Impl.class);
  bind(MvccEntitySerializationStrategyV3Impl.class);
  bind(MvccEntitySerializationStrategy.class).to(MvccEntitySerializationStrategyProxyImpl.class);
  bind(MvccLogEntrySerializationStrategyV1Impl.class);
  bind(MvccLogEntrySerializationStrategyV2Impl.class);
  bind(MvccLogEntrySerializationStrategy.class).to(MvccLogEntrySerializationProxyImpl.class);
  bind(UniqueValueSerializationStrategyV1Impl.class);
  bind(UniqueValueSerializationStrategyV2Impl.class);
  bind(UniqueValueSerializationStrategy.class).to(UniqueValueSerializationStrategyProxyImpl.class);
  Multibinder<Migration> migrationBinder=Multibinder.newSetBinder(binder(),Migration.class);
  migrationBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV1Impl.class));
  migrationBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV2Impl.class));
  migrationBinder.addBinding().to(Key.get(MvccEntitySerializationStrategyV3Impl.class));
  migrationBinder.addBinding().to(Key.get(MvccLogEntrySerializationStrategyV1Impl.class));
  migrationBinder.addBinding().to(Key.get(MvccLogEntrySerializationStrategyV2Impl.class));
  migrationBinder.addBinding().to(Key.get(UniqueValueSerializationStrategyV1Impl.class));
  migrationBinder.addBinding().to(Key.get(UniqueValueSerializationStrategyV2Impl.class));
  bind(SettingsValidation.class).asEagerSingleton();
  Multibinder<DataMigration> dataMigrationMultibinder=Multibinder.newSetBinder(binder(),new TypeLiteral<DataMigration>(){
  }
,CollectionMigration.class);
  dataMigrationMultibinder.addBinding().to(MvccEntityDataMigrationImpl.class);
  Multibinder.newSetBinder(binder(),MigrationPlugin.class).addBinding().to(CollectionMigrationPlugin.class);
}
