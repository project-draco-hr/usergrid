{
  int numValuesTested=20;
  Entity actor=new Entity();
  actor.put("displayName","Erin");
  Entity props=new Entity();
  props.put("actor",actor);
  props.put("verb","go");
  props.put("content","bragh");
  for (int i=0; i < numValuesTested; i++) {
    if (i < numValuesTested / 2) {
      props.put("verb","go");
    }
 else {
      props.put("verb","stop");
    }
    props.put("ordinal",i);
    this.app().collection("activities").post(props);
  }
  this.refreshIndex();
  String query="select * where not verb = 'go'";
  QueryParameters params=new QueryParameters();
  params.setQuery(query);
  Collection activities=this.app().collection("activities").get(params);
  assertEquals(numValuesTested / 2,activities.response.getEntityCount());
  List entities=activities.response.getEntities();
  for (int i=0; i < numValuesTested / 2; i++) {
    assertEquals(numValuesTested - i,Integer.parseInt(((LinkedHashMap<String,Object>)entities.get(i)).get("ordinal").toString()));
    assertEquals("stop",((LinkedHashMap<String,Object>)entities.get(i)).get("verb").toString());
  }
}
