{
  int numOfEntities=30;
  String collectionName="activities";
  Entity[] entities=generateTestEntities(numOfEntities,collectionName);
  QueryParameters params=new QueryParameters().setQuery("select * where (verb = 'go' OR ordinal >= " + (numOfEntities - numOfEntities / 4) + ") AND NOT (verb = 'go' AND ordinal >= "+ (numOfEntities - numOfEntities / 4)+ ")").setLimit((numOfEntities));
  Collection activities=this.app().collection("activities").get(params);
  int index=numOfEntities - 1;
  int count=0;
  int returnSize=activities.getResponse().getEntityCount();
  for (int i=0; i < returnSize; i++, index--) {
    count++;
    Entity activity=activities.getResponse().getEntities().get(i);
    long ordinal=Long.parseLong(String.valueOf(activity.get("ordinal")));
    log.info(ordinal + " " + String.valueOf(activity.get("verb")));
    if (ordinal < (numOfEntities - numOfEntities / 4)) {
      assertEquals("go",String.valueOf(activity.get("verb")));
    }
 else     if (ordinal >= (numOfEntities - numOfEntities / 4)) {
      assertEquals("stop",String.valueOf(activity.get("verb")));
    }
  }
  assertEquals(1 + numOfEntities / 2,count);
}
