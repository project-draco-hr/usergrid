{
  JsonNode node=null;
  String orgName=context.getOrgName();
  String appName=context.getAppName();
  String username=context.getActiveUser().getUser();
  String password=context.getActiveUser().getPassword();
  String mgmtToken=context.getActiveUser().getToken();
  boolean err_thrown=false;
  try {
    node=mapper.readTree(resource().path("/management/token").queryParam("grant_type","password").queryParam("username",username).queryParam("password","blahblah").accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    assertEquals("Should receive a 400 Bad Request",400,e.getResponse().getStatus());
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
  node=mapper.readTree(resource().path("/management/users/" + username).queryParam("access_token",mgmtToken).accept(MediaType.APPLICATION_JSON).get(String.class));
  logNode(node);
  assertEquals(username,node.get("data").get("organizations").get(orgName.toLowerCase()).get("users").get(username).get("name").textValue());
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path(appName + "/token").queryParam("grant_type","password").queryParam("username",username).queryParam("password","blahblah").accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    assertEquals("Should receive a 400 Bad Request",400,e.getResponse().getStatus());
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path(appName + "/token").queryParam("grant_type","pin").queryParam("username",username).queryParam("pin","4321").accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    assertEquals("Should receive a 400 Bad Request",400,e.getResponse().getStatus());
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
  TestUser testUser=new TestAppUser("temp" + UUIDUtils.newTimeUUID(),"password","temp" + UUIDUtils.newTimeUUID() + "@usergrid.com").create(context);
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/token").queryParam("grant_type","password").queryParam("username",testUser.getUser()).queryParam("password",testUser.getPassword()).accept(MediaType.APPLICATION_JSON).get(String.class));
  logNode(node);
  String user_access_token=node.get("access_token").textValue();
  assertTrue(isNotBlank(user_access_token));
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users").queryParam("access_token",user_access_token).accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    if (e.getResponse().getStatus() != 401) {
      throw e;
    }
    err_thrown=true;
  }
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users/"+ testUser.getUser()).queryParam("access_token",user_access_token).accept(MediaType.APPLICATION_JSON).get(String.class));
  logNode(node);
  assertEquals(1,node.get("entities").size());
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users").queryParam("access_token","blahblahblah").accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    if (e.getResponse().getStatus() != 401) {
      throw e;
    }
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users").accept(MediaType.APPLICATION_JSON).get(String.class));
  }
 catch (  UniformInterfaceException e) {
    assertEquals("Should receive a 401 Unauthorized",401,e.getResponse().getStatus());
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
  MultivaluedMap<String,String> formData=new MultivaluedMapImpl();
  formData.add("pin","5678");
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users/"+ testUser.getUser()+ "/setpin").queryParam("access_token",user_access_token).type("application/x-www-form-urlencoded").post(String.class,formData));
  refreshIndex(orgName,appName);
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/token").queryParam("grant_type","pin").queryParam("username",testUser.getUser()).queryParam("pin","5678").accept(MediaType.APPLICATION_JSON).get(String.class));
  logNode(node);
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/token").queryParam("grant_type","pin").queryParam("username",testUser.getUser()).queryParam("pin","5678").accept(MediaType.APPLICATION_JSON).get(String.class));
  logNode(node);
  user_access_token=node.get("access_token").textValue();
  assertTrue(isNotBlank(user_access_token));
  refreshIndex(orgName,appName);
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users/"+ testUser.getUser()+ "/test").queryParam("access_token",user_access_token).get(String.class));
  logNode(node);
  String testUsername="burritos" + UUIDUtils.newTimeUUID();
  String testEmail="burritos" + UUIDUtils.newTimeUUID() + "@usergrid.com";
  String testPassword="burritos";
  String testPin="1234";
  Map<String,String> payload=hashMap("email",testEmail).map("username",testUsername).map("name",testUsername).map("password",testPassword).map("pin",testPin);
  node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/users").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  logNode(node);
  assertNotNull(node.get("entities"));
  assertNotNull(node.get("entities").get(0));
  assertNotNull(node.get("entities").get(0).get("username"));
  assertEquals(testUsername,node.get("entities").get(0).get("username").textValue());
  payload=hashMap("foo","bar");
  err_thrown=false;
  try {
    node=mapper.readTree(resource().path("/" + orgName + "/"+ appName+ "/items").accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON_TYPE).post(String.class,payload));
  }
 catch (  UniformInterfaceException e) {
    assertEquals("Should receive a 401 Unauthorized",401,e.getResponse().getStatus());
    err_thrown=true;
  }
  assertTrue("Error should have been thrown",err_thrown);
}
