{
  final MutationBatch batch=keyspace.prepareMutationBatch().withConsistencyLevel(cassandraConfig.getWriteCL()).withTimestamp(opTimestamp.timestamp());
  final C column=getDirectedEdge();
  final MultiTenantColumnFamily<ScopedRowKey<R>,C> columnFamily=getColumnFamily();
  final boolean isDeleted=isDeleted();
  for (  Shard shard : shards) {
    final R rowKey=getRowKey(shard);
    writeEdge(batch,columnFamily,scope,rowKey,column,shard,isDeleted);
    if (logger.isTraceEnabled() && getDirectedEdge() instanceof DirectedEdge) {
      DirectedEdge directedEdge=(DirectedEdge)getDirectedEdge();
      if (shard != null && shard.getShardEnd().isPresent() && directedEdge.timestamp > shard.getShardEnd().get().timestamp) {
        logger.trace("Writing edge past shard end for edge: {}, shard: {}",directedEdge,shard);
      }
    }
    if (shard.isDeleted() && !isDeleted) {
      logger.info("Shard is deleted. Un-deleting as new data is being written to the shard - {}",shard);
      shard.setDeleted(false);
      batch.mergeShallow(edgeShardSerialization.writeShardMeta(scope,shard,getDirectedEdgeMeta()));
    }
  }
  return batch;
}
