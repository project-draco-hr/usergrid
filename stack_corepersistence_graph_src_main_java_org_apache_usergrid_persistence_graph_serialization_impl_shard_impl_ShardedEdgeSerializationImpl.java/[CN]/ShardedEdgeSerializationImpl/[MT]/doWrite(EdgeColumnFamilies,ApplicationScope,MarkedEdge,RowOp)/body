{
  ValidationUtils.validateApplicationScope(scope);
  GraphValidation.validateEdge(edge);
  final Id sourceNodeId=edge.getSourceNode();
  final String sourceNodeType=sourceNodeId.getType();
  final Id targetNodeId=edge.getTargetNode();
  final String targetNodeType=targetNodeId.getType();
  final long timestamp=edge.getTimestamp();
  final String type=edge.getType();
  final long time=timeService.getCurrentTime();
  final DirectedEdge sourceEdge=new DirectedEdge(targetNodeId,timestamp);
  final DirectedEdgeMeta sourceEdgeMeta=DirectedEdgeMeta.fromSourceNode(sourceNodeId,type);
  final ShardEntryGroup sourceRowKeyShard=writeEdgeShardStrategy.getWriteShards(scope,timestamp,sourceEdgeMeta);
  final MultiTennantColumnFamily<ApplicationScope,RowKey,DirectedEdge> sourceCf=columnFamilies.getSourceNodeCfName();
  for (  Shard shard : sourceRowKeyShard.getWriteShards(time)) {
    final long shardId=shard.getShardIndex();
    final RowKey sourceRowKey=new RowKey(sourceNodeId,type,shardId);
    op.writeEdge(sourceCf,sourceRowKey,sourceEdge);
    op.countEdge(shard,sourceEdgeMeta);
  }
  final DirectedEdgeMeta sourceEdgeTargetTypeMeta=DirectedEdgeMeta.fromSourceNodeTargetType(sourceNodeId,type,targetNodeType);
  final ShardEntryGroup sourceWithTypeRowKeyShard=writeEdgeShardStrategy.getWriteShards(scope,timestamp,sourceEdgeTargetTypeMeta);
  final MultiTennantColumnFamily<ApplicationScope,RowKeyType,DirectedEdge> targetCf=columnFamilies.getSourceNodeTargetTypeCfName();
  for (  Shard shard : sourceWithTypeRowKeyShard.getWriteShards(time)) {
    final long shardId=shard.getShardIndex();
    final RowKeyType sourceRowKeyType=new RowKeyType(sourceNodeId,type,targetNodeId,shardId);
    op.writeEdge(targetCf,sourceRowKeyType,sourceEdge);
    op.countEdge(shard,sourceEdgeTargetTypeMeta);
  }
  final DirectedEdge targetEdge=new DirectedEdge(sourceNodeId,timestamp);
  final DirectedEdgeMeta targetEdgeMeta=DirectedEdgeMeta.fromTargetNode(targetNodeId,type);
  final ShardEntryGroup targetRowKeyShard=writeEdgeShardStrategy.getWriteShards(scope,timestamp,targetEdgeMeta);
  final MultiTennantColumnFamily<ApplicationScope,RowKey,DirectedEdge> sourceByTargetCf=columnFamilies.getTargetNodeCfName();
  for (  Shard shard : targetRowKeyShard.getWriteShards(time)) {
    final long shardId=shard.getShardIndex();
    final RowKey targetRowKey=new RowKey(targetNodeId,type,shardId);
    op.writeEdge(sourceByTargetCf,targetRowKey,targetEdge);
    op.countEdge(shard,targetEdgeMeta);
  }
  final DirectedEdgeMeta targetEdgeSourceTypeMeta=DirectedEdgeMeta.fromTargetNodeSourceType(targetNodeId,type,sourceNodeType);
  final ShardEntryGroup targetWithTypeRowKeyShard=writeEdgeShardStrategy.getWriteShards(scope,timestamp,targetEdgeSourceTypeMeta);
  final MultiTennantColumnFamily<ApplicationScope,RowKeyType,DirectedEdge> targetBySourceCf=columnFamilies.getTargetNodeSourceTypeCfName();
  for (  Shard shard : targetWithTypeRowKeyShard.getWriteShards(time)) {
    final long shardId=shard.getShardIndex();
    final RowKeyType targetRowKeyType=new RowKeyType(targetNodeId,type,sourceNodeId,shardId);
    op.writeEdge(targetBySourceCf,targetRowKeyType,targetEdge);
    op.countEdge(shard,targetEdgeSourceTypeMeta);
  }
  final EdgeRowKey edgeRowKey=new EdgeRowKey(sourceNodeId,type,targetNodeId,0l);
  op.writeVersion(columnFamilies.getGraphEdgeVersions(),edgeRowKey,timestamp);
}
