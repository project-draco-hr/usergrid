{
  ValidationUtils.validateApplicationScope(scope);
  GraphValidation.validateSearchByEdgeType(search);
  final Id targetId=search.getNode();
  final String type=search.getType();
  final long maxTimestamp=search.getMaxTimestamp();
  final MultiTennantColumnFamily<ScopedRowKey<RowKey>,DirectedEdge> columnFamily=columnFamilies.getTargetNodeCfName();
  final Serializer<DirectedEdge> serializer=columnFamily.getColumnSerializer();
  final OrderedComparator<MarkedEdge> comparator=new OrderedComparator<>(SourceDirectedEdgeDescendingComparator.INSTANCE,search.getOrder());
  final EdgeSearcher<RowKey,DirectedEdge,MarkedEdge> searcher=new EdgeSearcher<RowKey,DirectedEdge,MarkedEdge>(scope,shards,search.getOrder(),comparator,maxTimestamp,search.last().transform(TRANSFORM)){
    @Override protected Serializer<DirectedEdge> getSerializer(){
      return serializer;
    }
    @Override protected RowKey generateRowKey(    long shard){
      return new RowKey(targetId,type,shard);
    }
    @Override protected DirectedEdge createColumn(    final MarkedEdge last){
      return new DirectedEdge(last.getSourceNode(),last.getTimestamp());
    }
    @Override protected void setTimeScan(    final RangeBuilder rangeBuilder){
      final ByteBuffer buffer=EdgeSerializer.INSTANCE.fromTimeRange(maxTimestamp);
      rangeBuilder.setStart(buffer);
    }
    @Override protected MarkedEdge createEdge(    final DirectedEdge edge,    final boolean marked){
      return new SimpleMarkedEdge(edge.id,type,targetId,edge.timestamp,marked);
    }
  }
;
  return new ShardsColumnIterator<>(searcher,columnFamily,keyspace,cassandraConfig.getReadCL(),graphFig.getScanPageSize());
}
