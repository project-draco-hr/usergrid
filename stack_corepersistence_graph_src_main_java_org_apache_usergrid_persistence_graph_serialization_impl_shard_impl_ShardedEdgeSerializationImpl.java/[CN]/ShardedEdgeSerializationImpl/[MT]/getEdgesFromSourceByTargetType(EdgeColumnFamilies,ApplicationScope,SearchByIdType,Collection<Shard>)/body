{
  ValidationUtils.validateApplicationScope(scope);
  GraphValidation.validateSearchByEdgeType(search);
  final Id targetId=search.getNode();
  final String type=search.getType();
  final String targetType=search.getIdType();
  final long maxTimestamp=search.getMaxTimestamp();
  final MultiTenantColumnFamily<ScopedRowKey<RowKeyType>,DirectedEdge> columnFamily=columnFamilies.getSourceNodeTargetTypeCfName();
  final Serializer<DirectedEdge> serializer=columnFamily.getColumnSerializer();
  final OrderedComparator<MarkedEdge> comparator=new OrderedComparator<>(TargetDirectedEdgeDescendingComparator.INSTANCE,search.getOrder());
  Optional<Long> lastTimestamp=Optional.absent();
  if (search.last().isPresent()) {
    lastTimestamp=Optional.of(search.last().get().getTimestamp());
  }
  final EdgeSearcher<RowKeyType,DirectedEdge,MarkedEdge> searcher=new EdgeSearcher<RowKeyType,DirectedEdge,MarkedEdge>(scope,shards,search.getOrder(),comparator,maxTimestamp,search.last().transform(TRANSFORM),lastTimestamp){
    @Override protected Serializer<DirectedEdge> getSerializer(){
      return serializer;
    }
    @Override protected RowKeyType generateRowKey(    long shard){
      return new RowKeyType(targetId,type,targetType,shard);
    }
    @Override protected DirectedEdge createColumn(    final MarkedEdge last){
      return new DirectedEdge(last.getTargetNode(),last.getTimestamp());
    }
    @Override protected void setTimeScan(    final RangeBuilder rangeBuilder){
      final ByteBuffer buffer=EdgeSerializer.INSTANCE.fromTimeRange(maxTimestamp);
      rangeBuilder.setStart(buffer);
    }
    @Override protected MarkedEdge createEdge(    final DirectedEdge edge,    final boolean marked){
      return new SimpleMarkedEdge(targetId,type,edge.id,edge.timestamp,marked);
    }
  }
;
  return new ShardsColumnIterator(searcher,columnFamily,keyspace,cassandraConfig.getReadCL(),graphFig.getScanPageSize(),graphFig.getSmartShardSeekEnabled());
}
