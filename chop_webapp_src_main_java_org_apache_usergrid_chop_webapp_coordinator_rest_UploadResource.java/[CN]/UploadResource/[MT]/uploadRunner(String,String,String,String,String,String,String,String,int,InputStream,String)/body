{
  if (inTestMode(testMode)) {
    LOG.info("Calling /upload/runner in test mode ...");
  }
 else {
    LOG.info("/upload/runner called ...");
  }
  LOG.debug("extracted {} = {}",RestParams.COMMIT_ID,commitId);
  LOG.debug("extracted {} = {}",RestParams.MODULE_GROUPID,groupId);
  LOG.debug("extracted {} = {}",RestParams.MODULE_ARTIFACTID,artifactId);
  LOG.debug("extracted {} = {}",RestParams.MODULE_VERSION,version);
  LOG.debug("extracted {} = {}",RestParams.USERNAME,username);
  LOG.debug("extracted {} = {}",RestParams.VCS_REPO_URL,vcsRepoUrl);
  LOG.debug("extracted {} = {}",RestParams.TEST_PACKAGE,runnerCount);
  LOG.debug("extracted {} = {}",RestParams.RUNNER_COUNT,testPackage);
  LOG.debug("extracted {} = {}",RestParams.MD5,md5);
  if (inTestMode(testMode)) {
    return Response.status(Response.Status.CREATED).entity(SUCCESSFUL_TEST_MESSAGE).type(MediaType.TEXT_PLAIN).build();
  }
  File runnerJar=CoordinatorUtils.getRunnerJar(chopUiFig.getContextPath(),username,groupId,artifactId,version,commitId);
  if (!runnerJar.getParentFile().exists()) {
    if (runnerJar.getParentFile().mkdirs()) {
      LOG.info("Created parent directory {} for uploaded runner file",runnerJar.getAbsolutePath());
    }
 else {
      String errorMessage="Failed to create parent directory " + runnerJar.getAbsolutePath() + " for uploaded runner file.";
      LOG.error(errorMessage);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(errorMessage).build();
    }
  }
  if (runnerJar.exists()) {
    if (runnerJar.delete()) {
      LOG.info("Deleted old runner.jar");
    }
 else {
      LOG.info("Could not delete old runner.jar");
    }
  }
  CoordinatorUtils.writeToFile(runnerJarStream,runnerJar.getAbsolutePath());
  Commit commit=null;
  Module module=null;
  List<Commit> commits=commitDao.getByModule(artifactId);
  for (  Commit returnedCommit : commits) {
    Module commitModule=moduleDao.get(returnedCommit.getModuleId());
    if (commitModule.getArtifactId().equals(artifactId) && commitModule.getGroupId().equals(groupId) && commitModule.getVersion().equals(version)) {
      commit=returnedCommit;
      module=commitModule;
    }
  }
  if (module == null) {
    module=new BasicModule(groupId,artifactId,version,vcsRepoUrl,testPackage);
    moduleDao.save(module);
  }
  if (commit == null) {
    commit=new BasicCommit(commitId,module.getId(),md5,new Date(),runnerJar.getAbsolutePath());
    commitDao.save(commit);
  }
  stackCoordinator.registerStack(commitId,artifactId,groupId,version,username,runnerCount);
  return Response.status(Response.Status.CREATED).entity(runnerJar.getAbsolutePath()).build();
}
