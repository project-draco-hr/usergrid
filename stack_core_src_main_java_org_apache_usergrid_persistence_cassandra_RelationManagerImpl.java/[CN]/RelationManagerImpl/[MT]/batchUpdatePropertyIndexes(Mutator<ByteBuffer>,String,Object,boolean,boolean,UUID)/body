{
  Entity entity=getHeadEntity();
  UUID associatedId=null;
  String associatedType=null;
  if (Schema.isAssociatedEntityType(entity.getType())) {
    Object item=entity.getProperty(PROPERTY_ITEM);
    if ((item instanceof UUID) && (entity.getProperty(PROPERTY_COLLECTION_NAME) instanceof String)) {
      associatedId=(UUID)item;
      associatedType=string(entity.getProperty(PROPERTY_ITEM_TYPE));
      String entryName=TYPE_MEMBER + "." + propertyName;
      if (logger.isDebugEnabled()) {
        logger.debug("Extended property {} ( {} ).{} indexed as {} ({})." + entryName,new Object[]{entity.getType(),entity.getUuid(),propertyName,associatedType,associatedId});
      }
      propertyName=entryName;
    }
  }
  IndexUpdate indexUpdate=batchStartIndexUpdate(batch,entity,propertyName,propertyValue,timestampUuid,entitySchemaHasProperty,false,false,getDefaultSchema().isPropertyFulltextIndexed(entity.getType(),propertyName),noRead);
  String effectiveType=entity.getType();
  if (associatedType != null) {
    indexUpdate.setAssociatedId(associatedId);
    effectiveType=associatedType;
  }
  Map<String,Set<CollectionInfo>> containers=getDefaultSchema().getContainers(effectiveType);
  if (containers != null) {
    Map<EntityRef,Set<String>> containerEntities=null;
    if (noRead) {
      containerEntities=new LinkedHashMap<EntityRef,Set<String>>();
      EntityRef applicationRef=new SimpleEntityRef(TYPE_APPLICATION,applicationId);
      addMapSet(containerEntities,applicationRef,defaultCollectionName(entity.getType()));
    }
 else {
      containerEntities=getContainingCollections();
    }
    for (    EntityRef containerEntity : containerEntities.keySet()) {
      if (containerEntity.getType().equals(TYPE_APPLICATION) && Schema.isAssociatedEntityType(entity.getType())) {
        logger.debug("Extended properties for {} not indexed by application",entity.getType());
        continue;
      }
      Set<String> collectionNames=containerEntities.get(containerEntity);
      Set<CollectionInfo> collections=containers.get(containerEntity.getType());
      if (collections != null) {
        for (        CollectionInfo collection : collections) {
          if (collectionNames.contains(collection.getName())) {
            batchUpdateCollectionIndex(indexUpdate,containerEntity,collection.getName());
          }
        }
      }
    }
  }
  if (!noRead) {
    batchUpdateBackwardConnectionsPropertyIndexes(indexUpdate);
  }
  for (  IndexEntry entry : indexUpdate.getPrevEntries()) {
    addDeleteToMutator(batch,ENTITY_INDEX_ENTRIES,entity.getUuid(),entry.getLedgerColumn(),indexUpdate.getTimestamp());
  }
}
