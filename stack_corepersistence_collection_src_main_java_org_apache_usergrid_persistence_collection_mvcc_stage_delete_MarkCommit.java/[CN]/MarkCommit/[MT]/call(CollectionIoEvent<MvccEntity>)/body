{
  final MvccEntity entity=idIoEvent.getEvent();
  MvccValidationUtils.verifyMvccEntityOptionalEntity(entity);
  final Id entityId=entity.getId();
  final UUID version=entity.getVersion();
  final CollectionScope collectionScope=idIoEvent.getEntityCollection();
  LOG.debug("Inserting tombstone for entity {} at version {}",entityId,version);
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.COMMITTED,MvccLogEntry.State.DELETED);
  final MutationBatch entityStateBatch=logStrat.write(collectionScope,startEntry);
  try {
    final MutationBatch entityBatch=entityStrat.mark(collectionScope,entityId,version);
    entityStateBatch.mergeShallow(entityBatch);
    entityStateBatch.execute();
  }
 catch (  ConnectionException e) {
    throw new RuntimeException("Unable to mark entry as deleted");
  }
  Observable<List<MvccEntity>> deleteFieldsObservable=Observable.create(new ObservableIterator<MvccEntity>("deleteColumns"){
    @Override protected Iterator<MvccEntity> getIterator(){
      Iterator<MvccEntity> entities=entityStrat.loadHistory(collectionScope,entityId,entity.getVersion(),100);
      return entities;
    }
  }
).buffer(serializationFig.getBufferSize()).doOnNext(new Action1<List<MvccEntity>>(){
    @Override public void call(    final List<MvccEntity> mvccEntities){
      final MutationBatch batch=keyspace.prepareMutationBatch();
      for (      MvccEntity mvccEntity : mvccEntities) {
        if (!mvccEntity.getEntity().isPresent()) {
          continue;
        }
        final UUID entityVersion=mvccEntity.getVersion();
        final Entity entity=mvccEntity.getEntity().get();
        for (        final Field field : entity.getFields()) {
          if (!field.isUnique()) {
            continue;
          }
          final UniqueValue unique=new UniqueValueImpl(field,entityId,entityVersion);
          final MutationBatch deleteMutation=uniqueValueStrat.delete(collectionScope,unique);
          batch.mergeShallow(deleteMutation);
        }
      }
      try {
        batch.execute();
      }
 catch (      ConnectionException e1) {
        throw new RuntimeException("Unable to execute " + "unique value " + "delete",e1);
      }
    }
  }
);
  final int removedCount=deleteFieldsObservable.count().toBlocking().last();
  LOG.debug("Removed unique values for {} entities of entity {}",removedCount,entityId);
}
