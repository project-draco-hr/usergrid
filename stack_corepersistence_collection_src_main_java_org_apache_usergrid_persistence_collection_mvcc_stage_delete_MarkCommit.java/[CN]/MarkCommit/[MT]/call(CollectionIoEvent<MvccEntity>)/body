{
  final MvccEntity entity=idIoEvent.getEvent();
  MvccValidationUtils.verifyMvccEntityOptionalEntity(entity);
  final Id entityId=entity.getId();
  final UUID version=entity.getVersion();
  final ApplicationScope applicationScope=idIoEvent.getEntityCollection();
  logger.debug("Inserting tombstone for entity {} at version {}",entityId,version);
  final MvccLogEntry startEntry=new MvccLogEntryImpl(entityId,version,Stage.COMMITTED,MvccLogEntry.State.DELETED);
  final MutationBatch entityStateBatch=logStrat.write(applicationScope,startEntry);
  try {
    final MutationBatch entityBatch=entityStrat.mark(applicationScope,entityId,version);
    entityStateBatch.mergeShallow(entityBatch);
    entityStateBatch.execute();
  }
 catch (  ConnectionException e) {
    throw new RuntimeException("Unable to mark entry as deleted");
  }
  if (actorSystemFig != null && actorSystemFig.getEnabled()) {
    String region=idIoEvent.getRegion();
    if (region == null) {
      region=uniqueValuesFig.getAuthoritativeRegion();
    }
    if (region == null) {
      region=actorSystemFig.getRegionLocal();
    }
    try {
      uniqueValuesService.releaseUniqueValues(applicationScope,entityId,version,region);
    }
 catch (    UniqueValueException e) {
      throw new RuntimeException("Unable to release unique values for entity " + entityId);
    }
  }
}
