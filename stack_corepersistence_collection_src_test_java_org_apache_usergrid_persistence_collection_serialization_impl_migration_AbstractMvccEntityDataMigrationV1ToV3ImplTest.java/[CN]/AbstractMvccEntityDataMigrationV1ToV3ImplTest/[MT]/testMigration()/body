{
  final Id applicationId=createId("application");
  ApplicationScope scope=new ApplicationScopeImpl(applicationId);
  final MvccEntity entity1=getEntity("thing");
  final MvccEntity entity2=getEntity("thing");
  MvccEntitySerializationStrategy v1Impl=getExpectedSourceImpl();
  MvccEntitySerializationStrategy v3Impl=getExpectedTargetImpl();
  v1Impl.write(scope,entity1).execute();
  v1Impl.write(scope,entity2).execute();
  MvccEntity returned1=v1Impl.load(scope,entity1.getId()).get();
  MvccEntity returned2=v1Impl.load(scope,entity2.getId()).get();
  assertEquals("Same entity",entity1,returned1);
  assertEquals("Same entity",entity2,returned2);
  final Observable<EntityIdScope> entityIdScope=Observable.just(new EntityIdScope(scope,entity1.getId()),new EntityIdScope(scope,entity2.getId()));
  final TestProgressObserver progressObserver=new TestProgressObserver();
  final CollectionDataVersions startVersion=getSourceVersion();
  final MigrationRelationship<MvccEntitySerializationStrategy> tuple=versions.getMigrationRelationship(startVersion.getVersion());
  assertEquals("Same instance for from",v1Impl.getClass(),tuple.from.getClass());
  assertEquals("Same instance for to",v3Impl.getClass(),tuple.to.getClass());
  final int newVersion=mvccEntityDataMigrationImpl.migrate(startVersion.getVersion(),progressObserver);
  final CollectionDataVersions expectedVersion=expectedTargetVersion();
  assertEquals("Correct version returned",newVersion,expectedVersion.getVersion());
  assertFalse("Progress observer should not have failed",progressObserver.isFailed());
  assertTrue("Progress observer should have update messages",progressObserver.getUpdates().size() > 0);
  returned1=v3Impl.load(scope,entity1.getId()).get();
  returned2=v3Impl.load(scope,entity2.getId()).get();
  assertEquals("Same entity",entity1,returned1);
  assertEquals("Same entity",entity2,returned2);
  final MigrationRelationship<MvccEntitySerializationStrategy> newTuple=versions.getMigrationRelationship(newVersion);
  assertEquals("Same instance for from",v3Impl.getClass(),newTuple.from.getClass());
  assertEquals("Same instance for to",v3Impl.getClass(),newTuple.to.getClass());
}
