{
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getHistorySize()).thenReturn(10);
  final MvccEntitySerializationStrategy mvccEntitySerializationStrategy=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy mvccLogEntrySerializationStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final int sizeToReturn=10;
  final CountDownLatch latch=new CountDownLatch(sizeToReturn * 3);
  final EntityVersionDeletedTest listener1=new EntityVersionDeletedTest(latch);
  final EntityVersionDeletedTest listener2=new EntityVersionDeletedTest(latch);
  final EntityVersionDeletedTest listener3=new EntityVersionDeletedTest(latch);
  final List<EntityVersionDeleted> listeners=new ArrayList<EntityVersionDeleted>();
  listeners.add(listener1);
  listeners.add(listener2);
  listeners.add(listener3);
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(mvccLogEntrySerializationStrategy,appScope,entityId,sizeToReturn + 1);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  EntityVersionCleanupTask cleanupTask=new EntityVersionCleanupTask(serializationFig,mvccLogEntrySerializationStrategy,mvccEntitySerializationStrategy,listeners,appScope,entityId,version);
  final MutationBatch firstBatch=mock(MutationBatch.class);
  when(mvccEntitySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(firstBatch);
  final MutationBatch secondBatch=mock(MutationBatch.class);
  when(mvccLogEntrySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(secondBatch);
  ListenableFuture<Void> future=taskExecutor.submit(cleanupTask);
  future.get();
  verify(firstBatch,times(sizeToReturn)).execute();
  verify(secondBatch,times(sizeToReturn)).execute();
  latch.await();
}
