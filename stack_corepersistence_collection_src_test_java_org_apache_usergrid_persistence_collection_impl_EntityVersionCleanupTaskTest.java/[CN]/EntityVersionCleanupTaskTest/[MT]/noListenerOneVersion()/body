{
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getBufferSize()).thenReturn(10);
  final MvccEntitySerializationStrategy ess=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy less=mock(MvccLogEntrySerializationStrategy.class);
  final Keyspace keyspace=mock(Keyspace.class);
  final MutationBatch entityBatch=mock(MutationBatch.class);
  final MutationBatch logBatch=mock(MutationBatch.class);
  when(keyspace.prepareMutationBatch()).thenReturn(mock(MutationBatch.class)).thenReturn(entityBatch).thenReturn(logBatch);
  final Set<EntityVersionDeleted> listeners=new HashSet<EntityVersionDeleted>();
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(less,appScope,entityId,2);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  final UniqueValueSerializationStrategy uvss=mock(UniqueValueSerializationStrategy.class);
  EntityVersionCleanupTask cleanupTask=new EntityVersionCleanupTask(serializationFig,less,ess,uvss,keyspace,listeners,appScope,entityId,version);
  final MutationBatch newBatch=mock(MutationBatch.class);
  when(ess.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(newBatch);
  when(less.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(newBatch);
  final List<MvccEntity> mel=new ArrayList<MvccEntity>();
  mel.add(new MvccEntityImpl(entityId,UUIDGenerator.newTimeUUID(),MvccEntity.Status.DELETED,Optional.fromNullable((Entity)null)));
  mel.add(new MvccEntityImpl(entityId,UUIDGenerator.newTimeUUID(),MvccEntity.Status.DELETED,Optional.fromNullable((Entity)null)));
  when(ess.load(same(appScope),same(entityId),any(UUID.class),any(Integer.class))).thenReturn(mel.iterator());
  ListenableFuture<Void> future=taskExecutor.submit(cleanupTask);
  future.get();
  verify(entityBatch).execute();
  verify(logBatch).execute();
}
