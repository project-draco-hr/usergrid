{
  final TaskExecutor taskExecutor=new NamedTaskExecutorImpl("test",1);
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getHistorySize()).thenReturn(10);
  final MvccEntitySerializationStrategy mvccEntitySerializationStrategy=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy mvccLogEntrySerializationStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final int sizeToReturn=10;
  final int listenerCount=1;
  final CountDownLatch latch=new CountDownLatch(sizeToReturn * listenerCount);
  final Semaphore waitSemaphore=new Semaphore(0);
  final SlowListener listener1=new SlowListener(latch,waitSemaphore);
  final List<EntityVersionDeleted> listeners=new ArrayList<>();
  listeners.add(listener1);
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(mvccLogEntrySerializationStrategy,appScope,entityId,sizeToReturn + 1);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  EntityVersionCleanupTask firstTask=new EntityVersionCleanupTask(serializationFig,mvccLogEntrySerializationStrategy,mvccEntitySerializationStrategy,listeners,appScope,entityId,version);
  EntityVersionCleanupTask secondTask=new EntityVersionCleanupTask(serializationFig,mvccLogEntrySerializationStrategy,mvccEntitySerializationStrategy,listeners,appScope,entityId,version);
  final MutationBatch firstBatch=mock(MutationBatch.class);
  when(mvccEntitySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(firstBatch);
  final MutationBatch secondBatch=mock(MutationBatch.class);
  when(mvccLogEntrySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(secondBatch);
  taskExecutor.submit(firstTask);
  taskExecutor.submit(secondTask);
  secondTask.get();
  while (!firstTask.isDone()) {
    Thread.sleep(200);
    waitSemaphore.release(listenerCount);
  }
  firstTask.get();
  verify(firstBatch,times(sizeToReturn * 2)).execute();
  verify(secondBatch,times(sizeToReturn * 2)).execute();
  latch.await();
}
