{
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getBufferSize()).thenReturn(10);
  final MvccEntitySerializationStrategy mvccEntitySerializationStrategy=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy mvccLogEntrySerializationStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final Keyspace keyspace=mock(Keyspace.class);
  final MutationBatch entityBatch=mock(MutationBatch.class);
  final MutationBatch logBatch=mock(MutationBatch.class);
  when(keyspace.prepareMutationBatch()).thenReturn(mock(MutationBatch.class)).thenReturn(entityBatch).thenReturn(logBatch);
  final int sizeToReturn=10;
  final int listenerCount=5;
  final CountDownLatch latch=new CountDownLatch(sizeToReturn / serializationFig.getBufferSize() * listenerCount);
  final Semaphore waitSemaphore=new Semaphore(0);
  final SlowListener listener1=new SlowListener(latch,waitSemaphore);
  final SlowListener listener2=new SlowListener(latch,waitSemaphore);
  final SlowListener listener3=new SlowListener(latch,waitSemaphore);
  final SlowListener listener4=new SlowListener(latch,waitSemaphore);
  final SlowListener listener5=new SlowListener(latch,waitSemaphore);
  final Set<EntityVersionDeleted> listeners=new HashSet<EntityVersionDeleted>();
  listeners.add(listener1);
  listeners.add(listener2);
  listeners.add(listener3);
  listeners.add(listener4);
  listeners.add(listener5);
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(mvccLogEntrySerializationStrategy,appScope,entityId,sizeToReturn + 1);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  final UniqueValueSerializationStrategy uniqueValueSerializationStrategy=mock(UniqueValueSerializationStrategy.class);
  EntityVersionCleanupTask cleanupTask=new EntityVersionCleanupTask(serializationFig,mvccLogEntrySerializationStrategy,mvccEntitySerializationStrategy,uniqueValueSerializationStrategy,keyspace,listeners,appScope,entityId,version);
  final MutationBatch batch=mock(MutationBatch.class);
  when(mvccEntitySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(batch);
  when(mvccLogEntrySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(batch);
  ListenableFuture<Void> future=taskExecutor.submit(cleanupTask);
  while (!future.isDone()) {
    Thread.sleep(200);
    waitSemaphore.release(listenerCount);
  }
  future.get();
  verify(logBatch,times(sizeToReturn)).mergeShallow(any(MutationBatch.class));
  verify(entityBatch,times(sizeToReturn)).mergeShallow(any(MutationBatch.class));
  verify(logBatch).execute();
  verify(entityBatch).execute();
  latch.await();
}
