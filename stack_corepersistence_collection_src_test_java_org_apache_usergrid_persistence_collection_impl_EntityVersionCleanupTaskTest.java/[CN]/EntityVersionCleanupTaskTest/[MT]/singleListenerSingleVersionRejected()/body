{
  final TaskExecutor taskExecutor=new NamedTaskExecutorImpl("test",0,0);
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getBufferSize()).thenReturn(10);
  final MvccEntitySerializationStrategy ess=mock(MvccEntitySerializationStrategy.class);
  final MvccLogEntrySerializationStrategy mvccLogEntrySerializationStrategy=mock(MvccLogEntrySerializationStrategy.class);
  final Keyspace keyspace=mock(Keyspace.class);
  final MutationBatch entityBatch=mock(MutationBatch.class);
  final MutationBatch logBatch=mock(MutationBatch.class);
  when(keyspace.prepareMutationBatch()).thenReturn(mock(MutationBatch.class)).thenReturn(entityBatch).thenReturn(logBatch);
  final int sizeToReturn=1;
  final CountDownLatch latch=new CountDownLatch(sizeToReturn);
  final EntityVersionDeletedTest eventListener=new EntityVersionDeletedTest(latch);
  final Set<EntityVersionDeleted> listeners=new HashSet<EntityVersionDeleted>();
  listeners.add(eventListener);
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(mvccLogEntrySerializationStrategy,appScope,entityId,sizeToReturn + 1);
  final UUID version=logEntryMock.getEntries().iterator().next().getVersion();
  final UniqueValueSerializationStrategy uniqueValueSerializationStrategy=mock(UniqueValueSerializationStrategy.class);
  EntityVersionCleanupTask cleanupTask=new EntityVersionCleanupTask(serializationFig,mvccLogEntrySerializationStrategy,ess,uniqueValueSerializationStrategy,keyspace,listeners,appScope,entityId,version);
  final MutationBatch batch=mock(MutationBatch.class);
  when(ess.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(batch);
  when(mvccLogEntrySerializationStrategy.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(batch);
  final List<MvccEntity> mel=new ArrayList<MvccEntity>();
  mel.add(new MvccEntityImpl(entityId,UUIDGenerator.newTimeUUID(),MvccEntity.Status.DELETED,Optional.fromNullable((Entity)null)));
  mel.add(new MvccEntityImpl(entityId,UUIDGenerator.newTimeUUID(),MvccEntity.Status.DELETED,Optional.fromNullable((Entity)null)));
  when(ess.load(same(appScope),same(entityId),any(UUID.class),any(Integer.class))).thenReturn(mel.iterator());
  ListenableFuture<Void> future=taskExecutor.submit(cleanupTask);
  future.get();
  verify(entityBatch).execute();
  verify(logBatch).execute();
  latch.await();
}
