{
  final SerializationFig serializationFig=mock(SerializationFig.class);
  when(serializationFig.getBufferSize()).thenReturn(10);
  final MvccLogEntrySerializationStrategy less=mock(MvccLogEntrySerializationStrategy.class);
  final UniqueValueSerializationStrategy uvss=mock(UniqueValueSerializationStrategy.class);
  final Keyspace keyspace=mock(Keyspace.class);
  final MutationBatch entityBatch=mock(MutationBatch.class);
  when(keyspace.prepareMutationBatch()).thenReturn(mock(MutationBatch.class)).thenReturn(entityBatch);
  final Set<EntityVersionDeleted> listeners=new HashSet<>();
  final Id applicationId=new SimpleId("application");
  final CollectionScope appScope=new CollectionScopeImpl(applicationId,applicationId,"users");
  final Id entityId=new SimpleId("user");
  final List<UUID> versions=VersionGenerator.generateVersions(1);
  final LogEntryMock logEntryMock=LogEntryMock.createLogEntryMock(less,appScope,entityId,versions);
  final UUID version=logEntryMock.getEntryAtIndex(0).getVersion();
  final UniqueValueEntryMock uniqueValueEntryMock=UniqueValueEntryMock.createUniqueMock(uvss,appScope,entityId,versions);
  EntityVersionCleanupTask cleanupTask=new EntityVersionCleanupTask(serializationFig,less,uvss,keyspace,listeners,appScope,entityId,version,false);
  final MutationBatch newBatch=mock(MutationBatch.class);
  when(uvss.delete(same(appScope),any(UniqueValue.class))).thenReturn(newBatch);
  when(less.delete(same(appScope),same(entityId),any(UUID.class))).thenReturn(newBatch);
  cleanupTask.call();
  verify(uvss,never()).delete(any(CollectionScope.class),any(UniqueValue.class));
  verify(less,never()).delete(any(CollectionScope.class),any(Id.class),any(UUID.class));
}
